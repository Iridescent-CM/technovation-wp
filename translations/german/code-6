<h1>Code 6</h1>
<h2>Plane deinen Code</h2>
<ul>
 	<li><a href="#pseudo">Pseudocode</a></li>
 	<li><a href="#activity1">Aktivität</a></li>
 	<li><a href="#flow">Flussdiagramme</a></li>
 	<li><a href="#activity2">Aktivität</a></li>
 	<li><a href="#pair">Paar-Programmierung</a></li>
 	<li><a href="#time">Zeitmanagement</a></li>
 	<li><a href="#reflect">Reflexion</a></li>
</ul>
<h3>Lernziele:</h3>
In dieser Einheit wirst du lernen…
<ul>
 	<li style="font-weight: 400">Wie du planst was du programmieren wirst</li>
 	<li style="font-weight: 400">wie du dein Projekt managest und deine Zeit einteilst</li>
</ul>
<h3><b>Plane deinen Code</b></h3>
In <a href="http://www.technovationchallenge.org/curriculum/code-5/" target="blank">Code 5</a> hast du dir überlegt wie deine App aussehen wird und wie Nutzer mit ihr interagieren werden. In dieser Einheit wirst du zwei Techniken lernen die dir dabei helfen deinen Code zu planen und zu verstehen wie deine App eigentlich funktionieren wird. Es ist wirklich wichtig deinen Code in Voraus zu planen damit du weißt, ob du noch etwas lernen musst, was du bisher nicht weißt. Auch solltest du genau überlegen wie die App funktioniert bevor du mit der Programmierung am Computer beginnst!
<h3 id="pseudo">Pseudocode</h3>
Das Aufschreiben eines <b>Pseudocodes </b>ist ein wichtiger Teil der Planung deiner App. Pseudocodes sind ein Mix aus der normalen Sprache und einigen Code-Fragmenten, die erklären was die App macht. Du solltest Programmier-Ausdrücke, die du bereits kennst, verwenden, z.B. Schleifen (loops), Bedingungen (conditionals) oder andere App Inventor Komponenten wie ListView oder Buttons, die du verwenden willst. Eigentlich gibt es nicht viele Regeln wie man einen Pseudocode aufschreibt, das Ziel ist jedoch immer eine Idee davon zu bekommen wie die App arbeiten wird, bevor man sie programmiert.

Lass uns ein Beispiel aus <a href="http://www.technovationchallenge.org/curriculum/code-3/" target="_blank" rel="noopener">Code 3</a> noch einmal anschauen. In dieser App kann der Nutzer in einer Datenbank nach Wissenschaftlerinnen suchen. Die App Zeigt die Namen mit Hilfe von ListView an und der Nutzer kann eine Wissenschaftlerin auswählen über die er mehr erfahren will.

<i>Suchknopf (Search Button)</i>
<ul>
 	<li style="font-weight: 400">Wenn der Nutzer auf Suchen klickt</li>
 	<li style="font-weight: 400">Die App nutzt einen <b>for loop </b>um alle Namen und Beschreibungen zu durchsuchen, die in der <b>TinyDB </b>gespeichert sind</li>
 	<li style="font-weight: 400"><b>If </b>eine Übereinstimmung gefunden wird
<ul>
 	<li style="font-weight: 400">Die App fügt den Namen der Wissenschaftlerin einer leeren Liste mit dem Namen <i>searchResults</i> zu</li>
</ul>
</li>
 	<li style="font-weight: 400"><b>If </b><i>searchResults</i> ist leer nachdem der loop beendet ist
<ul>
 	<li style="font-weight: 400">Die App zeigt an, dass keine Treffer gefunden wurden</li>
</ul>
</li>
 	<li><b>Else</b>
<ul>
 	<li>Die App zeigt <i>searchResults</i> an mit Hilfe von <b>ListView</b></li>
</ul>
</li>
</ul>
<i>Auswahl der Wissenschaftlerinnen</i>
<ul>
 	<li style="font-weight: 400">Wenn der Nutzer etwas aus <b>ListView1 </b>auswählt</li>
 	<li style="font-weight: 400">die App öffnet <i>Screen2</i></li>
 	<li style="font-weight: 400">Die App ruft den Namen und die Beschreibung der Wissenschaftlerin von <b>TinyDB </b>ab</li>
 	<li style="font-weight: 400">Die App zeigt den Namen und die Beschreibung der Wissenschaftlerin an</li>
</ul>

<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<h3 id="activity1">Aktivität</h3>
	Schreibe den Pseudocode für zwei Funktionen deiner App. Wenn du Probleme dabei hast zu beschreiben wie eine Funktion in deiner App arbeitet kannst du deine Teammitglieder oder Mentoren um Hilfe bitten!

	Fragen zur Vorbereitung: 
	<ul>
	 	<li style="font-weight: 400">Wodurch wird die Funktion gestartet?</li>
	 	<li style="font-weight: 400">Benötigt deine App irgendwelche gespeicherten Werte?
	<ul>
	 	<li style="font-weight: 400">Falls ja, wo sind diese Werte gespeichert?</li>
	</ul>
	</li>
	 	<li style="font-weight: 400">Benötigt deine App irgendwelche gespeicherten Variablen? Um die Übersicht zu behalten hilft es den Variablen Namen zu geben</li>
	</ul>
</div>	
<h3 id="flow"><b>Flussdiagramme</b></h3>
Ein<b> Flussdiagramm </b>ist ein Diagramm das einen Algorithmus darstellt. Es nutzt Formen und Pfeile um zu zeigen, wie Daten im Programm verwendet werden. Programmierer nutzen unterschiedliche Formen um unterschiedliche Verarbeitungen von Daten darzustellen. Hier ist ein Beispiel das einen Algorithmus zeigt mit dem man herausfinden kann warum jemand Bauchschmerzen hat:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-1.png" alt="flowchart-1" width="426" height="434" />
&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/terminal.png" alt="terminal" width="139" height="41" />

<p style="text-align: left">Eine <strong>Ellipse</strong> zeigt an, wo ein Algorithmus beginnt und wo er endet. Im oberen Beispiel gibt es drei unterschiedliche Stellen, an denen der Algorithmus enden kann: entweder die Person muss etwas essen, sich ausruhen oder einen Arzt aufsuchen. Diese drei möglichen Enden werden als <strong>Endstationen (terminals)</strong> bezeichnet.</p>
&nbsp;

<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision.png" alt="decision" width="139" height="76" /></p>

&nbsp;
<p style="text-align: left">Ein <strong>Diamant</strong> zeigt an, dass an dieser Stelle eine Entscheidung getroffen werden muss. Sie sind so ähnlich wie "Weggabenlungen". Sie treten immer auf, wenn entschieden werden muss ob eine Bedingung (condition) wahr oder falsch ist. Auf jede Entscheidung sollten zwei Pfeile folgen, einer für <strong>wahr</strong> und einer für <strong>falsch</strong>. Schau dir an wie die Pfeile oben im Beispiel bei dem Diamanten beginnen, einer beginnt unten, der andere an der Seite des Diamanten.</p>
Hier ist noch ein weiteres Beispiel für ein Flussdiagramm:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-2-1.png" alt="flowchart-2" width="124" height="281" />

&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process.png" alt="process" width="139" height="41" />


Dieses Diagramm nutzt <strong>Rechtecke</strong> um einen <strong>Prozess (process)</strong> darzustellen. Ein Prozess ist was dein Code tut. Zum Beispiel kann er dem Nutzer eine Mitteilung anzeigen oder zwei Zahlen addieren.

Dieses Flussdiagramm zeigt eine <strong>während Schleife (while loop)</strong><i>.</i> Die Bedingung und der Prozess (in diesem Fall der Zugriff auf eine Eingabe) wird sich so lange wiederholen bis die Bedingung erfüllt ist. Es gibt noch eine weitere Schleifen Art, die du in <a href="http://www.technovationchallenge.org/curriculum/code-3/" target = "_blank">Code 3</a> kennen gelernt hast: eine <strong>für Schleife (for loop)</strong><i>.</i> Die Bedingung in einer <strong>für Schleife</strong> ist zu kontrollieren ob der <strong>Zähler (counter)</strong> einen bestimmten Wert erreicht hat. Der Prozess wird sich also so lange wiederholen bis die Bedingung erfüllt ist.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-3-1.png" alt="flowchart-3" width="424" height="314" />

&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/input-1.png" alt="input" width="145" height="41" />



Die letzte Form, die du kennen solltest, ist das <strong>P</strong><b>arallelogramm</b>. Diese Form solltest du immer verwenden, wenn du Daten vom Nutzer oder einer anderen Quelle, wie einer Webseite, benötigst. Das Parallelogramm steht für <strong>Eingaben (</strong><b>inputs).</b>

<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">

	<h3 id="activity2"><strong>Aktivität</strong></h3>
	In dieser Aktivität wirst du aus deinem Pseudocode ein Flussdiagramm erstellen. Nutze den Pseudocode, den du in der vorherigen Aktivität erstellt hast, und folgen diesen Schritten.
	<ol>
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-16outline.png" alt="terminal oval" width="112" height="36" />
	Zeichne eine Ellipse um den Anfang und das Ende deines Prozesses. Diese werden Endstationen (terminal) genannt. Häufig hat ein Flussdiagramm mehr als ein Ende. In dem Beispiel der Suche nach Wissenschaftlerinnen endet die Funktion indem sie entweder die Suchergebnisse mit <strong>listview</strong> anzeigt oder indem dem Nutzer mitgeteilt wird, dass es keine passenden Suchergebnisse gibt.</li>
	</ol>
	<ol start="2">
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision_1outline.png" alt="conditional diamond" width="112" height="36" />
	Zeichne einen Diamanten um jede Entscheidung die getroffen werden muss. Dies ist immer der Fall, wenn entschieden werden muss ob eine Bedingung wahr oder falsch ist. Denk dran, Bedingungen können zu mehr als einem möglichen Ende der Funktion führen.</li>
	</ol>
	<ol start="3">
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-28outline.png" alt="input" width="112" height="36" />
	Zeichne ein Parallelogramm um alle Eingaben (inputs) vom Nutzer oder von anderen Stellen, wie einer Webseite oder Datenbank, die deine App benötigt.</li>
	</ol>
	<ol start="5">
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process_1outline.png" width="112" height="36" />
	Zeichne ein Rechteck um alle Prozesse in deinem Code. Prozesse finden immer statt, wenn deine App etwas macht was nicht in die bisherigen Kategorien passt. Dies kann zum Beispiel eine Rechnung oder das Senden einer Nachricht an den Nutzer sein.</li>
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/arrow_1outline.png" alt="arrow" height="36" />
	Verbinde dein Flussdiagramm mit Pfeilen! Achte dabei besonders auf Schleifen (loops) und Bedingungen (conditions). Wenn du Hilfe brauchst kannst du dir auch noch einmal die bisherigen Beispiele anschauen.</li>
	</ol>
	Mache ein Foto von deinem Flussdiagramm und reich es mit ein um einen <strong>Punkt</strong> zu erhalten! Mach dir keine Sorgen, wenn es nicht sonderlich ordentlich ist. Der Sinn dieser Aufgabe ist, dass du etwas Neues lernst und dass es dir bei der Planung hilft. Es ist auch okay, wenn dein Code am Ende nicht mit deinem Flussdiagramm übereinstimmt, du brauchst dein Flussdiagramm nicht noch mal zu zeichnen.
</div>	
<h3 id="pair"><b>Paar-Programmierung</b></h3>
Paar-Programmierung (Pair programming) heißt, dass zwei Programmierer am gleichen Arbeitsplatz (workstation) (ein Bildschirm, eine Tastatur und eine Maus) entweder zusammenarbeiten oder sich abwechseln. In dieser Situation ist die Person die an der Tastatur oder dem Touchscreen sitzt der Driver und die andere Person ist der Navigator. Der Navigator ist zwar aktiv am Programmieren beteiligt, ist aber mehr auf das große Ganze fokussiert, er beantwortet Fragen des Drivers und achtet darauf, dass keine Fehler im Code sind. Nach einer gewissen Zeit tauschen Driver und Navigator die Rollen.

Vorteile der Paar-Programmierung sind:
<ul>
 	<li style="font-weight: 400">Höhere Qualität des Codes, da der Navigator die Arbeit des Drivers kontrollieren kann.</li>
 	<li style="font-weight: 400">Eine bessere Kommunikation zwischen den Teammitgliedern, da der Driver erklären muss was er gerade macht (oder laut Programmieren muss) und der Navigator darauf reagieren oder nachfragen kann was passiert, wenn der Driver nichts sagt.</li>
 	<li style="font-weight: 400">Wissen kann zwischen den Teammitgliedern geteilt werden, insbesondere wenn eine Person ein Anfänger und die andere bereits fortgeschrittene Programmiererfahrungen hat.</li>
 	<li style="font-weight: 400">Es kann dabei helfen die Teamarbeit effizienter zu machen, da der Driver Fehler beheben kann während der Navigator sich auf die ganze Arbeit konzentriert und den Fokus wieder darauf lenken kann.</li>
</ul>
Tipps zur Paar-Programmierung:
<ul>
 	<li style="font-weight: 400">Hab keine Angst davor zu sagen: "Lass uns deine Idee zuerst ausprobieren!". Manchmal musst du als Driver auf deinen Navigator hören. Das Ziel ist es die beste Idee finden, die häufig erst durch Zusammenarbeit aufkommt, und Fehler zu vermeiden.</li>
 	<li style="font-weight: 400">Hier findest du  <a href="https://www.thoughtworks.com/insights/blog/10-ways-improve-your-pairing-experience" target="_blank" rel="noopener">zehn Vorschläge</a> die dir bei der Arbeit helfen können.</li>
</ul>
<div style="background-color: #421b41; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<blockquote>
	<p style="text-align: center">“None of us is as smart as all of us."</p>
	</blockquote>
	&nbsp;
	<p align="right">–Ken Blanchard, Autor und Manager</p>
</div>	

<h3 id="time">Zeit Management</h3>
An diesem Punkt hast du vielleicht einige Fragen:
<ul>
 	<li>Wie kann ich effektiv auf mein Ziel hinarbeiten und den Abgabetermin einhalten?</li>
 	<li>Wer wird meinen digitalen Prototypen testen? Und wann?</li>
 	<li>Woher weiß ich, dass ich einen funktionierenden digitalen Prototyp habe den ich einreichen kann?</li>
</ul>
Lass uns die verschiedenen Stationen der Softwareentwicklung noch einmal anschauen, um den Programmier-Teil deines Projektes am Laufen zu halten.
<ul>
 	<li>Die Nutzer, ihre Bedürfnisse und das MVP sind bekannt (aus <a href="http://www.technovationchallenge.org/curriculum/code-5/" target="_blank" rel="noopener">Code 5</a>)</li>
 	<li>Ein Flussdiagramm beschreibt, was der Nutzer in der App machen kann</li>
 	<li>Software wird entwickelt</li>
 	<li>Nutzer testen die App und Fehler werden identifiziert</li>
 	<li>Fehler werden behoben und das Team stellt sicher, dass die App jetzt fehlerfrei läuft</li>
 	<li>Wenn die App ohne Probleme auf einem mobilen Gerät läuft und das Team mit dem Endergebnis zufrieden ist kann die App mit anderen geteilt werden</li>
</ul>
Tipps:
<ul>
 	<li>Mache einen Zeitplan
<ul>
 	<li>Du kannst eine Gantt Chart machen um einen Zeitplan aufzustellen. Hier kannst du notieren was wann fertig sein soll und was zuerst erledigt werden muss. Hier findest du ein Beispiel für eine Gantt Chart die bei der Entwicklung von <a href="http://www.dreamincode.net/forums/topic/60048-creating-a-gantt-chart/" target="_blank" rel="noopener">dreamincode</a> verwendet wurde.</li>
 	<li>Teile jedem Teammitglied Aufgaben zu und trage die jeweiligen Abgabefristen in deinen Kalender ein!</li>
 	<li>Wenn du dem 20 Wochen Curriculum folgst sollte dein Team ungefähr 8 Wochen für die Programmierung der App einplanen</li>
 	<li>Wenn du dem 12 Wochen Curriculum folgst sollte dein Team ungefähr 5 Wochen für die Programmierung der App einplanen</li>
 	<li>Achte darauf, dass dein digitaler Prototyp spätestens zwei Tage vor der Technovation Herausforderung Abgabefrist fertig ist, der Abgabetermin ist der 26. April 2017. Dies wird dir viel Stress ersparen, falls Verbindungsprobleme auftreten</li>
</ul>
</li>
 	<li>Unterteile die Aufgaben und verteile sie innerhalb des Teams
<ul>
 	<li>Lasse alle Teammitglieder in Paaren verschiedene Aufgaben gleichzeitig bearbeiten. Auf diese Weise kannst du mit dem Programmieren schneller vorankommen.</li>
</ul>
</li>
 	<li>Setze Prioritäten
<ul>
 	<li>Kümmere dich erst darum, dass deine App funktioniert. Danach kannst du das Design verbessern. Denk daran, dass die Preisrichter darauf achten werden, dass deine eingereichte App funktioniert, ihre Aufgabe erledigt und einfach zu bedienen ist. Du kannst dein Demo Video und deinen Geschäftsplan nutzen um der Jury zu zeigen, wie du deine App später noch um neue Funktionen erweitern willst. Jetzt solltest du dich jedoch auf die MVP konzentrieren.</li>
 	<li>Bitte deinen Mentor dir zu helfen, wenn du Probleme dabei hast Prioritäten festzulegen</li>
</ul>
</li>
 	<li>Fokussiere dich
<ul>
 	<li>Schalte alle Geräte, die du während eines Teamtreffens oder während des Programmierens nicht benötigst, aus. Du kannst dein Handy auch auf lautlos stellen um dich nicht von Nachrichten ablenken zu lassen.</li>
 	<li>Erledige eine Aufgabe bevor du mit der nächsten beginnst. Oft sparst du keine Zeit indem du an mehreren Sachen gleichzeitig arbeitest. Wenn ihr in Paaren arbeitet kann dir dein Navigator dabei helfen das Ziel nicht aus den Augen zu verlieren.</li>
</ul>
</li>
</ul>
Hier findest du die <a href="http://www.technovationchallenge.org/wp-content/uploads/2017/01/Technical-Checklist-2017.pdf" target = "_blank">Code Checklist </a>die die Jury verwenden wird. Du kannst sie nutzen um zu kontrollieren ob du an alles gedacht hast und ob du in der Lage bist alle Komponenten deiner App zu erklären. Versuch so viele Punkte wie möglich zu erzielen. Diese Rubrik kann dir insgesamt bis zu 10 Punkte bringen. Die Jurymitglieder wollen auch sehen, dass du Sachen wie strings, numbers, variables, lists, loops, conditionals, databases, und mobile features verwendet hast. Du kannst auch Punkte für Bilder deines Flussdiagrammes, des Papier Prototypen und für Bildschirmfotos deiner App erhalten.

Es ist auf jeden Fall eine gute Idee deine Arbeit zu dokumentieren und alles zu speichern. Auf diese Weise verlierst du keine Zeit, wenn etwas (unterschiedliche Versionen deiner App, dein Flussdiagramm oder deines Papier-Prototypen) verloren geht, du kannst immer darauf zurück greifen. Du kannst diese Sachen auch nutzen um mit deinem Mentor über Probleme genauer zu diskutieren.
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<h1>Reflexion</h1>
	Herzlichen Glückwunsch! Du bist jetzt auf dem Weg deine eigene App zu entwickeln, die du bei Technovation einreichen kannst! Wenn du bei der Programmierung einmal nicht weiter kommst findest du einige Tipps zur Fehlerbehebung in der nächsten Einheit. Viel Erfolg bei der Erstellung deines digitalen Prototypen! Wir von Technovation freuen uns, dass du es bereits soweit geschafft hast!
	<h3 id="reflect">Weitere Quellen</h3>
	<ul>
	 	<li style="font-weight: 400"><a style="color: yellow;" href="http://ai2.appinventor.mit.edu/reference/other/testing.html" target="_blank" rel="noopener">MIT Testing Documentation</a></li>
	</ul>
</div>	
