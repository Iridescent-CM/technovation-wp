<h1>Code 2</h1>
<h1>Daten und Variablen</h1>
<ul>
  <li><a href="#data">Data</a></li>
  <li><a href="#types">Data Types</a></li>
  <li><a href="#variables">Variables</a></li>
  <li><a href="#localglobal">Local and Global Variables</a></li>
  <li><a href="#lists">Lists</a></li>
  <li><a href="#databases">Databases</a></li>
  <li><a href="#challenge">Code Challenge</a></li>
  <li><a href="#reflect">Reflect</a></li>
</ul>
<h2><b>Lernziele:</b></h2>
In diesem Modul
<ul>
  <li style="font-weight: 400;">erfährst du mehr über Daten und verschiedene Datentypen</li>
  <li style="font-weight: 400;">erfährst du, wie du Variablen und Datenbanken verwendest</li>
  <li style="font-weight: 400;">lernst du, Daten in Listen zu organisieren</li>
  <li style="font-weight: 400;">erstellst du eine To-Do-List-App (Aufgabenliste), die mit einer Datenbank verbunden ist</li>
</ul>
Diese Lektion enthält eine Menge Informationen und es ist okay, wenn du jetzt noch nicht alles verstehst. Die Coding-Challenges sind der beste Weg, um Coding-Konzepte zu verstehen - denn so kannst du sie in Aktion sehen! Du kannst dir diese Lektion auch immer wieder ansehen, wenn du beim Programmieren der App irgendwo steckenbleibst.
<h2>Teil 1: Alles über Daten</h2>
<h3 id="data">Daten</h3>
Irgendwann in deinem Leben hast du wahrscheinlich schon einmal das Wort <strong>Daten</strong> gehört. Daten können eine Menge Dinge bedeuten, aber in der Informatik sind <strong>Daten</strong> die Informationen, die eure App zum Funktionieren benötigt. Um dies besser zu verstehen, denken wir über einige Apps und Informationen nach, die sie brauchen, um zu Funktionieren.
<table style="height: 378px;" width="889">
<tbody>
<tr>
<td style="text-align: left;" width="119">Name der App</td>
<td style="text-align: center;" width="190"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image10.png" alt="WhatsApp logo" width="46" height="46" />WhatsApp</td>
<td style="text-align: center;" width="218"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image32.jpg" alt="Angry Birds logo" width="46" height="46" />Angry Birds</td>
<td style="text-align: center;" width="193"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/cropped-R-fullcolor-1.png" alt="Technovation logo" width="46" height="46" />Slideshow</td>
</tr>
<tr>
<td style="text-align: left;" width="119">Was die App macht</td>
<td width="190">Du kannst mit deinen Freunden schreiben und telefonieren</td>
<td width="218">Bei diesem Spiel schiesst du Vögel auf Schweinchen, um sie zu besiegen</td>
<td width="193">Das ist die App, die du in der letzten Coding-Lektion gemacht hast</td>
</tr>
<tr>
<td style="text-align: left;" width="119">Was die App zum Funktionieren braucht</td>
<td width="190">
<ul>
  <li> dein Benutzername</li>
  <li>die Benutzernamen deiner Freunde</li>
  <li>die Nachricht , die du verschicken möchtest</li>
  <li>die Uhrzeit</li>
  <li>dein Standort</li>
</ul>
</td>
<td width="218">
<ul>
  <li>deine Punktzahl</li>
  <li>wie viele Punkte jedes Objekt wert ist</li>
  <li>deine abgeschlossenen Levels</li>
  <li>Wie viele Vögel du in jedem Level erhältst</li>
</ul>
</td>
<td width="193">
<ul>
  <li> deine Lieblingsbilder</li>
</ul>
</td>
</tr>
</tbody>
</table>
Die Programmiererin muss dafür sorgen, dass die App alle benötigten Informationen erhält. <em>Denk daran</em>, dass Computer nicht alles auf eigene Faust und ohne Anweisungen tun können. Hier sind ein paar Möglichkeiten, wie Apps im App Inventor an diese Daten kommen können:
<ol>
  <li>Die Programmiererin gibt die Informationen ein:
<ul>
  <li>IIn deiner Slideshow-App hast du (die Programmiererin) deine Lieblingsbilder eingetragen.</li>
  <li>In Angry Birds hat die Programmiererin eingegeben, wie viele Vögel der Spieler in jedem Level bekommt.</li>
</ul>
</li>
  <li>Die Benutzerin gibt die Informationen ein
<ul>
  <li>In WhatsApp muss die Benutzerin der App sagen, was sie senden möchte und wem sie es schicken möchte.</li>
</ul>
</li>
  <li>Die App verbindet sich mit einem anderen Ort, um Informationen zu erhalten
<ul>
  <li>WhatsApp verbindet sich mit deinem Handy, um die Uhrzeit abzufragen, damit es weiss, wann du eine Mitteilung abgeschickt hast.</li>
</ul>
</li>
</ol>
Manchmal speichert eine App Informationen, die die Benutzerin eingegeben hat. WhatsApp speichert zum Beispiel den Nachrichtenverlauf. So kannst du die letzte Nachricht anzeigen, die du an eine Freundin geschickt hast. Um dies zu tun, verwendet die Programmiererin eine <em>Datenbank</em>. Wie das geht, lernen wir jetzt in dieser Lektion. Du erfährst dann später auch noch mehr darüber, wie du die App mit anderen Orten verbindest, um Informationen zu erhalten.
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3>Aufgabe:</h3>
Wenn du eine App brauchen würdest, die für dich den nächsten Lebensmittelladen findet, welche Dinge muss die App wissen, um das zu tun?

</div>
<h3 id="types">Datentypen</h3>
Wie du im oberen Teil gesehen hast, können Daten eine Menge Dinge sein! Damit der Computer einfacher versteht, was er mit den vorhandenen Daten tun muss, werden Daten in Kategorien eingeteilt. Diese Kategorien nennt man <strong>Datentyp</strong>. Programmiersprachen drehen sich um drei Hauptdatentypen: Zahlen, Strings und Booleans. Mit App Inventor kannst du auch komplexere Datentypen wie zum Beispiel Farben oder Bilder verwenden. In diesem Teil musst du nichts mit Datentypen machen – es ist aber hilfreich, wenn du sie beim Weiterlernen im Hinterkopf behältst.
<h5>Nummern</h5>
Der Datentyp Zahlen ist genau das, was du denkst! Im App Inventor kannst du Zahlen verwenden, indem du unter <em>blocks</em> auf going to Math klickst.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image30.png" width="712" height="40" />

Wir verwenden Math-Blöcke, wann immer wir Zahlen verwenden müssen. Im Folgenden findest du einige Beispiele dafür, wann du in eurer App einen Zahlen-Datentyp verwenden kannst.
<ul>
  <li style="font-weight: 400;">Berechnung der Punktzahl einer Spielerin in einem Spiel</li>
  <li style="font-weight: 400;">Zählen, wie oft eine Benutzerin versucht hat, sich einzuloggen</li>
  <li style="font-weight: 400;">Zählen, wie oft du möchtest, dass eure App etwas macht</li>
  <li style="font-weight: 400;">Prüfen, ob eure Benutzerinnen ein bestimmtes Alter haben</li>
</ul>
Um mehr herauszufinden über all die Dinge, die du mit Math-Blocks tun kannst, geh auf die Website des MIT: <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/math.html" target="_blank">Math blocks</a>
<h5>Strings</h5>
Beim Datentyp String handelt es sich um Text. Um im App Inventor einen String zu kreieren, klicke unter <em>blocks</em> auf Text.Hier sind einige Textblöcke, die du verwenden kannst:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image20.png" width="815" height="100" />

Du solltest immer einen String verwenden, wenn du ein Textfeld zu deinem Code hinzufügen möchtest. Im Folgenden findest du einige Beispiele für die Verwendung des Datentyps String in eurer App.
<ul>
  <li style="font-weight: 400;">Prüfen, ob das Passwort einer Benutzerin korrekt ist</li>
  <li style="font-weight: 400;">Die App mit dem Benutzer sprechen lassen</li>
  <li style="font-weight: 400;">Showing a message or an alert to the user</li>
  <li style="font-weight: 400;">Einer Benutzerin eine Nachricht anzeigen</li>
</ul>
Bevor du weitermachst, schau auf der Website des MIT nach, was du mit Textblöcken alles anstellen kannst: <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/text.html#string" target="_blank">Text blocks</a>
<h5>Booleans</h5>
Ein Boolean kann einer von zwei Werten haben: true oder false. True (wahr) bedeutet im Grunde "Ja" und false (falsch) bedeutet im Grunde "Nein". Um einen Boolean zu erhalten, geh unter built in functions zu <em>logic</em> und wähle einen dieser Blöcke:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image27.png" width="347" height="39" />

Im Moment gibt es nicht viel zu tun mit den Booleans, wir behalten sie einfach im Auge. Booleans und Logik sind dann das Thema der <a href="/?p=17114" target="_blank"> Coding-Lektion 3: Logik, Loops und Bedingungen. </a>
<h2>Teil 2: Daten speichern</h2>
<h3 id="variables">Variablen</h3>
Eines der wichtigsten Codierungskonzepte ist die <b>Variable</b>. Eine Variable ist ein Name für ein Datenelement, das sich im Wert ändern kann. Eine einfache Möglichkeit, sich das zu merken ist, dass eine Variable variieren oder den Wert ändern kann. Es gibt viele Informationen, die dir jeden Tag wichtig sind, die ihren Wert verändern. Hier sind einige Beispiele:
<ul>
  <li style="font-weight: 400;">dein Alter</li>
  <li style="font-weight: 400;">dein Grösse</li>
  <li style="font-weight: 400;">dein Standort</li>
  <li style="font-weight: 400;">das heutige Datum</li>
</ul>
Um Variablen besser zu verstehen und zu lernen, wie wir sie im App Inventor verwenden, schauen wir uns ein Beispiel an. Stell dir vor, du erstellst ein Spiel, bei dem die Benutzerin Punkte verdienen und verlieren kann. Du möchtest, dass die Spielerin ihre Punktzahl (score) in einem Textfeld sehen kann. Zu Beginn des Spiels hat die Spielerin 0 Punkte, also fügst du diesen Block ins Spiel ein:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image16.png" width="316" height="56" />

Die Spielerin sieht 0 im Textfeld, das ihre Punktzahl enthält. Allerdings ändert sich die Punktzahl jedes Mal, wenn sie das Spiel spielt. Jedes Mal, wenn sie Punkte erhält oder verliert, müssen wir das Textfeld aktualisieren. Wenn sie mehr Punkte erhält, fügen wir einen solchen Block ein:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image22.png" width="326" height="43" />

Das funktioniert. Aber was machen wir jetzt, wenn die Spielerin wieder 10 Punkte verdient? Wir müssen den Text wieder aktualisieren, damit jetzt die Punktzahl 20 angezeigt wird. Was, wenn die Spielerin Punkte verliert? Wir müssen die Punktzahl auf 15 ändern. Und was, wenn sie wieder Punkte gewinnt? Das kann sehr schnell verwirrend werden.

In solchen Szenarien kannst du eine <strong>Variable</strong> erstellen, um die Punktzahl der Spielerin zu verfolgen. Du kannst eine Variable namens <em>score</em> erstellen, die immer den Wert der aktuellen Punktzahl der Spielerin hat. Während sie das Spiel spielt, kannst du Punkte zur Punktzahl dazuzählen oder davon abziehen, ohne dir darüber Gedanken zu machen, was ihre Gesamtpunktzahl ist. So funktioniert das im App Inventor: Zuerst nimmst du diesen Block aus dem Menü <em>Variablen</em>.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image13.png" width="245" height="65" />

Dieser Block teilt der App mit, dass eine Variable vorhanden ist, und fordert dich auf, der Variable einen Namen und einen Wert zu geben. So würde der Block für ein Spiel aussehen, bei dem die Punktzahl am Anfang 0 war:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image28.png" width="284" height="51" />

Mit diesem Block erklärst du der Anwendung, dass es ein Stück Daten geben wird, das <em>score</em> genannt wird und während des Spiels seinen Wert ändern wird. Jedes Mal, wenn die App startet, wird es eine Variable namens <em>score</em> zu erstellen und bei 0 festsetzen. Jetzt kannst du die Funktionen "set" und "get" anwenden. Mit "get" kannst du sehen, welchen Wert die Variable <em>score</em> hat. So kannst du deiner App sagen, dass die Punktzahl in einem Textfeld angegeben werden soll:
Mit "set" kannst du der Punktzahl einer Benutzerin eine neue Zahl zuweisen.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image17.png" width="476" height="45" />

Jedes Mal wenn die Spielerin Punkte sammelt, kannst du der App sagen, dies zu tun.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image19.png" width="508" height="61" />

So teilst du deiner App mit, dass sie zur jetzigen Punktzahl 10 dazuzählen soll. Wenn die aktuelle Punktzahl Null ist, würde die neue Punktzahl 10 betragen. Wenn die aktuelle Punktzahl 25 ist, beträgt die neue Punktzahl 35. Jetzt musst du dir keine Sorgen mehr um die Neuzuweisung der Punktzahl machen, wenn deine Spielerin Punkte gewinnt oder verliert. Die App wird nur die aktuelle Punktzahl verwenden und 10 Punkte hinzufügen.

Es ist okay, wenn die Variablen für dich noch ein bisschen verwirrend sind! Sie sind wirklich nicht leicht zu verstehen und du verstehst sie am besten, wenn du sie gebrauchst. Du wirst sie in der Coding Challenge am Ende diese Lektion und auch in den kommenden Lektionen brauchen.
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3>Aufgabe:</h3>
Wähle eine deiner Lieblingsapps aus und überlege dir drei Orte, wo du denkst, dass die Erfinder der App Variablen gebraucht haben.

</div>
<h3 id="localglobal">Lokale und globale Variablen</h3>
Vielleicht hast du in dem Abschnitt oben bemerkt, dass vor dem Namen <em>Score</em> die Variable "global" hiess. Im App Inventor kannst du zwei Arten von Variablen, <strong>lokale Variablen</strong> und <strong>globale Variablen,</strong> haben. Wenn du Variablen erstellst, musst du darüber nachdenken, ob du die Variable an mehreren Stellen im Code verwenden möchtest, z. B. die Notenvariable von oben oder ob du sie nur an einer Stelle verwenden möchtest.

<strong>Globale Variablen</strong> können überall verwendet werden. Wie du oben gesehen hast, muss die Score Variable mehrfach verwendet werden. du musstest es verwenden, wenn der Spieler Punkte sammelt, wenn der Spieler Punkte verloren hat, und sie in der Textbox anzuzeigen. Es könnte auch für eine High-Score-Tabelle verwendet werden oder für, wenn der Benutzer einen Punkt verliert. Du kannst einen Namen niemals verwenden, wenn du eine globale Variable verwendest. Wenn du dies getan hast, wird deine App nicht wissen, welche Variable zu verwenden ist. Glücklicherweise ist es dem App Inventor nicht möglich, zwei Variablen mit dem gleichen Namen zu erstellen. Wenn du Zweifel hast, welchen Variablentyp du verwenden sollst, verwende global.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image15.gif" />

<strong>Lokale Variablen</strong> können nur an einem Punkt im Code verwendet werden. Wenn du nur eine Variable brauchst, um nur an einer Stelle etwas zu verfolgen, verwendest du eine lokale Variable. Die lokale Variable kann nur innerhalb des "lokalen Variablen" -Bausteins verwendet werden und App Inventor lässt du es nicht außerhalb davon verwenden. Im Gegensatz zu globalen Variablen kannst du die Namen der lokalen Variablen wiederverwenden.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image34.gif" />

In der Codierungsherausforderung siehst du Beispiele, wann globale Variablen verwendet werden sollen und wann lokale Variablen verwendet werden sollen: Um mehr über globale und lokale Variablen zu erfahren, besuche die Website von MIT: <a href="http://appinventor.mit.edu/explore/ai2/support/concepts/variables.html" target="_ blank">Global and Local Variables</a>
<h2>Abschnitt 3: Daten organisieren</h2>
<h3 id="lists">Listen</h3>
Es gibt so viele Informationen auf der Welt, es kann wirklich verwirren! Zum Glück haben wir Möglichkeiten, Daten zu organisieren, damit wir sie leicht finden und verwenden können. Fällt dir ein Beispiel ein, wie du Informationen und Objekte in deinem Leben organisierst? Hier sind einige Beispiele für Dinge, die du tun könntest, um Dinge zu organisieren:
<ul>
  <li>Telefonnummern von Freunden in eine Kontaktliste setzen</li>
  <li>Bleistifte in eine Bleistiftbox stecken</li>
  <li>Kleidung in einen Schrank legen</li>
</ul>
Programmierer verwenden Listen, um Daten in ihren Programmen zu organisieren. Listen können mehrere Stücke von Daten enthalten und man kann daraus leicht Daten erhalten. Du hast möglicherweise schon eine To-do-Liste oder eine Einkaufsliste erstellt, Listen in der Programmierung sind sehr ähnlich gemacht. Im App-Inventor kannst du zu „blocks“ gehen und „lists" auswählen. Eine Liste sieht wie folgt aus:
<table style="height: 189px;" width="757">
<tbody>
<tr>
<td><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/MakeaList.png" alt="makealist" width="160" height="70" /></td>
<td><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/ItemList.png" alt="itemlist" width="254" height="122" /></td>
<td><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Number-List.png" alt="number-list" width="194" height="119" /></td>
</tr>
</tbody>
</table>
Listen sind wirklich nützlich für grosse Mengen an Informationen. Jedes Ding in einer Liste hat einen Index, der eine Zahl ist, die Ihnen sagt, wo es in der Liste ist.Das erste Element in einer Liste hat einen Index von 1, das zweite Element in einer Liste hat einen Index von 2 und so weiter. Betrachten wir diese Liste der verschiedenen Früchte:
<table>
<tbody>
<tr>
<td> <img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image33.png" alt="fruit list" width="601" height="118" /></td>
<td>Hier siehst du, wie deine App diese Informationen sieht:

<b>Liste Name: Früchte</b>
<ul>
  <li>Äpfel (Index = 1))</li>
  <li>Bananen (Index = 2)</li>
  <li>Orangen (Index = 3)</li>
</ul>
</td>
</tr>
</tbody>
</table>
Du kannst eine Sache aus einer Liste erhalten, anstatt die ganze Liste zu benutzen. Wenn du nur die Zeichenfolge "Bananen" in eine Textbox statt der gesamten Liste setzen möchtest, musst du sagen, die App soll auf Index 2 in dieser Liste nachsehen. Hier ist, wie du „Bananen" in ein Textfeld mit dem App-Inventor setzen würdest.

&nbsp;

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image25.png" width="516" height="60" />

Du kannst auch Dinge in Listen hinzufügen, entfernen und ersetzen. Angenommen, du hast vergessen, "Kiwis" und "Trauben" zu Ihrer Obstliste hinzuzufügen. Du kannst sie wie folgt hinzufügen:
<table>
<tbody>
<tr>
<td> <img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image37.png" alt="add to list" width="588" height="148" /></td>
<td>Nun wird deine App deine Liste wie folgt sehen:<b>Liste Name: Früchte</b>
<ul>
  <li>Äpfel (Index = 1)</li>
  <li>Bananen (Index = 2)</li>
  <li>Orangen (Index = 3)</li>
  <li>Kiwis (Index = 4)</li>
  <li>Trauben (Index = 5)</li>
</ul>
</td>
</tr>
</tbody>
</table>
Du solltest Listen verwenden, wenn du mehrere Informationen hast, die du unter demselben Variablennamen einfügen möchtest. Zum Beispiel, wenn du die Top Ten Highscores für ein Spiel anzeigen möchten, kannst du zehn Variablen mit Namen wie HighScore1, HighScore2, HighScore3 und so weiter einfügen, bis du HighScore10 erhältst.

Der einfachste Weg, dies zu tun wäre, eine Liste namens HighScores zu erstellen, die die zehn High-Scores enthält und sie dann mit ihren Indizes anzeigen. Das Benutzen einer Liste würde es dir auch ermöglichen, High-Scores einfacher zu ersetzen oder hinzuzufügen und ersparst dir eine Menge Zeit!
<table>
<tbody>
<tr>
<td><img class="" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image05.png" alt="highscore1" width="274" height="185" /></td>
<td><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Arrow.png" alt="arrow" width="48" height="34" /></td>
<td><img class="" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image31.png" alt="highscore2" width="441" height="179" /></td>
</tr>
</tbody>
</table>
Sieh dir die MIT-Website für Informationen über Listen an: <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/lists.html" target="_blank">Listen</a>

<em>Note: In many programming languages, lists are called arrays, and indexes start at 0, not at 1. Make sure to check the rules when learning a new programming language!</em>
<h3 id="databases">Datenbanken</h3>
Variablen sind ideal für die Speicherung von Informationen, während ein Benutzer deine App verwendet, aber was ist, wenn du Informationen zwischen den Zeiten, wenn ein Benutzer deine App öffnet und schliesst, speichern möchtest? Du kannst dies mit einer <b>Datenbank</b> tun. Datenbanken können Informationen für spätere Verwendung speichern, auch wenn die App geschlossen ist! Du kannst Datenbanken als Speicherort für Informationen sehen, die du später wiederherstellen kannst. Hier einige Beispiele für Datenbanken, die du täglich verwenden kannst:
<ul>
  <li>Kontaktliste - du speicherst die Telefonnummern Ihres Freundes, damit du diese später verwenden kannst</li>
  <li>Nachrichten App - speichert Verlauf der Nachricht</li>
  <li>Notebook - du schreibst die Dinge und liest sie später</li>
</ul>
n App Inventor kannst du mit der Komponente <b>TinyDB</b> Daten auf dem Telefon ihres Benutzers speichern, die bei jeder Anmeldung in Ihrer App vorhanden sein werden. Es ist wichtig zu wissen, dass TinyDB nur erlaubt, Daten <i>lokal zu speichern</i>. Das bedeutet, dass zwei Benutzer keine Daten mit TinyDB teilen können. Wenn ein Benutzer Daten in TinyDB speichert, ist es nur auf ihrem Telefon verfügbar, und niemand anderem. Du erfährst, wie du Informationen zwischen Telefonen teilst in <a href="/?p=17673" target="_blank"> Codierungseinheit 4.</a>

Um TinyDB zu verwenden, ziehst du es in der <i>Designer-Seite</i> vom App-Inventor auf Ihren Bildschirm. Es erscheint als nicht sichtbare Komponente und wird wie folgt aussehen:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image36.png" alt="TinyDB" width="282" height="105" />

Du kannst mit deinem TinyDB sprechen, indem du ihn anrufst. Wenn du einen Anruf tätigst, kannst du Dinge speichern und Dinge aus ihm erhalten. Die Weise, in der du Daten in TinyDB speicherst, ist, indem du ihm ein Tag gibst. Der Tag ist ein Name, den du verwendest, um die Daten abzurufen. Es ist viel wie ein Variablenname. Wenn du denselben Tag-Namen verwendest, um Daten zweimal zu speichern, überschreibt oder ersetzt die Datenbank die alten Daten mit den neuen Daten. Dies kann nützlich sein, wenn du aktualisieren musst, was in deiner Datenbank ist, aber du solltest darauf achten, nie Tag-Namen irgendwo anders zu wiederholen! So rufst du TinyDB an:
<table style="height: 140px;" width="894">
<tbody>
<tr>
<td><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image04.png" alt="TinyDB store global fruits" width="444" height="100" /></td>
<td><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-09-23-at-3.24.29-PM.png" alt="screen-shot-2016-09-23-at-3-24-29-pm" width="385" height="105" /></td>
</tr>
</tbody>
</table>
Der erste Block zeigt, wie die Werte in TinyDB gespeichert werden. In diesem Fall haben wir unsere Früchteliste mit dem Tag „Food" gespeichert. Der zweite Block zeigt, wie die Fruchtliste aus der Datenbank abgerufen werden kann. Das Tag muss genau so eingegeben werden, wie wenn die Daten gespeichert wurden, einschliesslich aller Grossbuchstaben.

Um dies besser zu verstehen, gehen wir durch ein Beispiel. Nehmen wir an, du müsstest drei Dinge in einer Datenbank für die spätere Verwendung speichern. Eine ist unsere Früchteliste vom letzten Abschnitt, eine ist dein Alter, und das andere ist eine Liste der Dinge, die du am Liebsten machst. Du hast drei Aufrufe an die Datenbank wie folgt gemacht:
<table>
<tbody>
<tr>
<td> <img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image04.png" alt="TinyDB store global fruits" width="465" height="105" /></td>
<td> <img class="" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image00-1.png" alt="Tiny DB my age" width="558" height="150" /></td>
<td> <img class="" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image24.png" alt="TinyDB store favorites list" width="551" height="147" /></td>
</tr>
<tr>
<td style="text-align: left;" colspan="3">Du hast nun drei Einträge in deiner Datenbank und so sehen sie aus:</td>
</tr>
<tr>
<td>Tag-Name: „Essen”

Daten:
<ul>
  <li>„Äpfel” (index = 1)</li>
  <li>„Bananen” (index =2)</li>
  <li>„Orangen” (index = 3)</li>
</ul>
</td>
<td>Tag-Name: „Mein Alter”

Daten:
<ul>
  <li>16</li>
</ul>
</td>
<td>Tag-Name: „Favorit”

Daten:
<ul>
  <li>„Codieren lernen” (index = 1)</li>
  <li>„Besuch Familie”(index = 2)</li>
  <li>„Musik hören“ (index =3)</li>
</ul>
</td>
</tr>
</tbody>
</table>
Nun, wenn du deine Lieblings-Dinge wiederfinden möchtest, machst du folgende Schritte:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image26.png" alt="TinyDB favorites value not tagged" width="371" height="98" />

Wenn du diesen Block verwendest, erhältst du "Erlernen, wie man „besuche Familie - Musik hören“ codiert. Jetzt willst du dein Alter abrufen, also gibst du ein:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image12.png" alt="TinyDB my age value tag if not there" width="351" height="96" />

Wenn du diesen Block verwendest, erhältst du nur einen leeren String: " ". Das liegt daran, dass das Tag „myage" nicht in deiner Datenbank vorhanden ist! Das Tag „MyAge" existiert jedoch. Da deine Datenbank das Tag nicht erkannt hat, wird standardmäßig der Block neben „valueIfTagNotThere" angezeigt, der eine leere Zeichenfolge ist. Du kannst dieser Zeichenfolge sagen, was du willst. Du kannst es eine Fehlermeldung an Ihren Benutzer.

Wenn du eine App mit mehreren Bildschirmen erstellst, können Komponenten, Daten und Variablen nicht zwischen jedem Bildschirm miteinander sprechen. Du musst ein TinyDB verwenden, um Informationen von einem Bildschirm Ihrer App auf den anderen zu übertragen. Besuche diese Seite für weitere Informationen: <a href="http://appinventor.mit.edu/explore/ai2/concepts.html#Screens" target="_blank">MIT Screens</a>

Herzlichen Glückwunsch zum Abschluss aller Inhalte in dieser Einheit. Es war eine Menge Information, so ist es okay, wenn du nicht alles verstehst! Du kannst jederzeit auf dieses Gerät zurückgreifen, wenn du deine App erstellst. Die Coding-Challenge ist dazu gedacht, alles zu integrieren, was du bisher gelernt hast, also probiere es aus!
<h2 id="challenge">Code Challenge # 2: Mache eine To-Do List App</h2>
Beschreibung: Erstelle eine To-Do List, die es Benutzern ermöglicht, Elemente einzugeben und zu entfernen. Deine App sollte sich jedes Mal, wenn der Benutzer die App öffnet, die Artikel merken. Du kannst erlernen, wie man ein <a href="http://ai2.appinventor.mit.edu/reference/components/userinterface.html#ListView" target="blank">ListView</a> benutzt, bevor man die Challenge versucht!

Versuche dein Bestes, diese Challenge auf eigene Faust zu schaffen, bevor du die Anweisungen liest. Denke daran, diese Anweisungen sind nur eine Möglichkeit, wie die Challenge gelöst werden kann! Du kannst unsere Beispiel-App auch im Google Play Store herunterladen. Glückliche Codierung!

Lade die Beispiel-App hier herunter: <a href="https://play.google.com/store/apps/details?id=appinventor.ai_alliec.ToDoList">Technovation Challenge #2</a>

<em>Siehe Anleitung:</em>

Kommt ihr nicht weiter? Ladet hier unseren Beispiel-Quellcode herunter: <a href="https://drive.google.com/open?id=0B9HV58UviqU_a2lTVFdUb0hGbGM">https://drive.google.com/open?id=0B9HV58UviqU_a2lTVFdUb0hGbGM</a>

Hier findet ihr Anleitungen, wie ihr Quellcodes herunterlädt und verwendet: <a href="http://appinventor.mit.edu/explore/ai2/share.html">Source Code Anweisungen</a>
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="reflect">Lernpunkte</h3>
In dieser Lektion haben wir viel abgedeckt! Ihr habt etwas über die verschiedenen Datentypen und die verschiedenen Möglichkeiten diese zu speichern und zu organisieren. Hier sind einige Reflexionsfragen für euch, die ihr mit eurem Mentor diskutieren könnt:

<strong>Q1:</strong> Wie haben die Informationen, die ihr in dieser Lektion gelernt habt, eure Sicht auf die Apps, die ihr im Alltag braucht, verändert?

<strong>Q2:</strong> Was sind einige Dinge aus dieser Lektion, von denen ihr denkt, sie werden bei der Erstellung eurer App nützlich sein?

In diesem Abschnitt habt ihr folgende Schlüsselwörter gelernt:
<ul>
  <li>Daten - Informationen, die eure App verwendet</li>
  <li>Datentyp - Die Art in der Daten kategorisiert werden</li>
  <li>Number - Ein Datentyp, der eine Zahl ist</li>
  <li>String - Ein Datentyp, der Text ist</li>
  <li>Boolean - Ein Datentyp, der Richtig oder Falsch ist</li>
  <li>Variable - Ein Name für ein Datenelement, das sich ändern kann</li>
  <li>Globale Variable - Eine Variable, die an jedem Punkt in eurem Code verwendet werden kann</li>
  <li>Lokale Variable - Eine Variable, die nur in einem bestimmten Codeabschnitt verwendet wird</li>
  <li>Liste - Eine Möglichkeit, mehrere Daten zu organisieren</li>
  <li>List Index - Eine Zahl, die angibt, wo sich Daten in einer Liste befinden</li>
  <li>Datenbank - Ein Platz zum Speichern und Organisieren von Informationen</li>
</ul>
<h3>Zusätzliche Ressourcen</h3>
Hier sind einige zusätzliche Ressourcen über Datenbanken. Ihr könnt diese jetzt nutzen oder dann, wenn ihr Hilfe beim Erstellen eurer App benötigt!
<ul>
  <li style="font-weight: 400;"><a style="color: white;" href="https://drive.google.com/a/iridescentlearning.org/file/d/0B3rEYL3DkWfAd003UmM2cl9ITDg/view" target="_blank">TinyDB101</a></li>
  <li style="font-weight: 400;"><a style="color: white;" href="https://drive.google.com/a/iridescentlearning.org/file/d/0B3rEYL3DkWfAZUVQVGxPZzdXTXc/view" target="_blank">TinyDB102</a></li>
</ul>
</div>
