<h1><span style="font-weight: 400;">Кодування 6</span></h1>
<h2><span style="font-weight: 400;">Планування вашого коду</span></h2>
<span style="font-weight: 400;">Зміст</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Псевдокод (</span><a href="http://www.technovationchallenge.org/curriculum/code-6/#pseudo"><span style="font-weight: 400;">Pseudocode</span></a><span style="font-weight: 400;">)</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Завдання</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Блок-схеми (</span><a href="http://www.technovationchallenge.org/curriculum/code-6/#flow"><span style="font-weight: 400;">Flowcharts</span></a><span style="font-weight: 400;">)</span></li>
  <li style="font-weight: 400;"><a href="http://www.technovationchallenge.org/curriculum/code-6/#activity2"><span style="font-weight: 400;">З</span></a><span style="font-weight: 400;">авдання</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Парне програмування</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Управління часом (</span><a href="http://www.technovationchallenge.org/curriculum/code-6/#time"><span style="font-weight: 400;">Time Management</span></a><span style="font-weight: 400;">)</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Підсумки</span></li>
</ul>
&nbsp;
<h3><span style="font-weight: 400;">Цілі:</span></h3>
<span style="font-weight: 400;">В цьому розділі ви дізнаєтесь…</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Як запланувати те, що ви будете кодувати</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Шляхи управління вашим проектом і часом </span></li>
</ul>
<h3><span style="font-weight: 400;">Планування кодування</span></h3>
<span style="font-weight: 400;">В розділі </span><a href="http://www.technovationchallenge.org/curriculum/code-5/"><span style="font-weight: 400;">Кодування 5</span></a><span style="font-weight: 400;"> ви планували, який матиме вигляд ваш додаток і як користувачі будуть з ним взаємодіяти. В цьому розділі ви дізнаєтесь про дві техніки, які допоможуть вам планувати ваше кодування і подумати про те, як ваш додаток насправді буде працювати. Планування — дуже важлива частина процесу створення додатку, адже ви можете визначити, чи потребуєте додаткових знань і подумати над тим, як будуть працювати ті чи інші речі перед тим, як братись безпосередньо за програмування.  </span>
<h5><span style="font-weight: 400;">Псевдокод (Pseudocode)</span></h5>
<span style="font-weight: 400;">Написання псевдокоду — це невід'ємний етап процесу планування вашого додатку. Псевдокод використовує просту мову, змішану з кодом, щоб пояснити, що ваш додаток робить. Варто використовувати терміни програмування, які ви знаєте (такі як цикли чи умовні), а також будь-які складові, компонентиApp Inventor, які ви б хотіли використовувати (такі як ListView чи кнопки). Щодо написання псевдокоду немає аж так багато правил. Одна ціль — це вловити ідею того, як ваш додаток буде працювати перед тим, як його програмувати.   </span>

&nbsp;

<span style="font-weight: 400;">Давайте поглянемо на приклад з розділу </span><a href="http://www.technovationchallenge.org/curriculum/code-3/"><span style="font-weight: 400;">Code 3</span></a><span style="font-weight: 400;">. В цьому додатку користувач може здійснювати пошук по базі даних жінок-науковиць. Додаток відображає імені в ListView і користувач може вибрати науковицю і дізнатись про неї більше. </span>

&nbsp;

<span style="font-weight: 400;">Кнопка пошуку (Search Button)</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Коли користувач натискає пошук (search)</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додаток використовує for loop для пошуку в базі імені і описів, які зберігаються в  TinyDB</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Якщо є збіг</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додаток додає ім'я науковиці до порожнього списку змінних, який називається searchResults</span></li>
</ul>
</li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Якщо searchResults порожній, цикл закінчується</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додаток повідомляє користувача, що відсутні збіги</span></li>
</ul>
</li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Інше (Else)</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додаток відображає searchResults в ListView</span></li>
</ul>
</li>
</ul>
<span style="font-weight: 400;">Вибір науковиць</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Коли користувач обирає з ListView1</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додаток відкриває Screen2</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додаток підтягує опис і ім'я з TinyDB</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додаток відображає опис і ім'я науковиці</span></li>
</ul>
<h3><span style="font-weight: 400;">Завдання</span></h3>
<span style="font-weight: 400;">Напишіть псевдокод для двох обробників подій в вашому додатку. Якщо у вас проблеми з тим, як обробник подій у вашому додатку працюватиме, ви можете запитати ваших подруг по команді або ментора допомогти!</span>

<span style="font-weight: 400;">Запитайте себе:</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Яка з подій починає цей код? </span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Чи ваш додаток буде використовувати завантажені значення?</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Якщо так, де значення будуть зберігатись?</span></li>
</ul>
</li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Чи ваш додаток потребує інших змінних? Якщо так, то добре було б дати їм назву, щоб відслідковувати потім. </span></li>
</ul>
&nbsp;
<h3><span style="font-weight: 400;">Блок-схеми (Flowcharts)</span></h3>
<span style="font-weight: 400;">Блок-схема — це діаграма, яка представляє алгоритм. Вона використовує форми і стрілки, щоб показати, як дані рухаються в програмі. Завжди читається з верху до низу. Програмісти використовують різні форми, щоб представити різні речі, які стаються з даними. Ось кілька прикладів алгоритмів, щоб зрозуміти, чому у когось болить живіт.  </span>

<span style="font-weight: 400;">Овал показує, де алгоритм починається і закінчується. В прикладі, що наведений вище, є три різних місця, де алгоритм може закінчуватись, якщо людина потребує їжі, відпочинку чи потребує відвідати лікаря. Вони називаються закінчення, термінал (terminal). </span>

<span style="font-weight: 400;">Ромб зображає, де повинне бути прийняте рішення. Вони як "розвилка на дорозі". Це значить, що змінна має бути визначена як правдива чи неправдива (true, false). Дві стрілки повинні виходити з рішення: одна для правдивого, а інша — для неправдивого. Зауважте, як стрілки відходять від ромба в прикладі вище.   </span>

&nbsp;

<span style="font-weight: 400;">Ось інший приклад блок-схеми:</span>

<span style="font-weight: 400;">Ця діаграма використовує прямокутники, які представляють процес. Процес — це будь-що, що має ваш код зробити. Він може розбудити користувача, додати два числа, встановити позначку, щоб щось сказати. </span>

<span style="font-weight: 400;">Ця блок-схема показує while loop. Змінна і процес буде повторюватись до того часу, поки змінна не буде такою, яка задовольняє. Є інший тип циклу, який ви вивчили в </span><a href="http://www.technovationchallenge.org/curriculum/code-3/"><span style="font-weight: 400;">Code 3</span></a><span style="font-weight: 400;">: for loop. Змінна в for loop має перевіряти, чи рахунок достатньо виріс. Тоді процес буде повторювати набір чисел доки не виконає умову. </span>

<span style="font-weight: 400;">Остання форма, про яку вам варто знати, - це паралелограм. Його можна використовувати тоді, коли вам потрібно отримати дані від користувача або десь-інде, до прикладу, веб-сайту. Паралелограм призначений для входу (inputs).</span>
<h3><span style="font-weight: 400;">Завдання</span></h3>
<span style="font-weight: 400;">В цьому завданні ви перетворите ваш псевдокод у блок-схему. Використовуйте той псевдокод, який ви розробили раніше, і слідуйте наступним крокам.</span>
<ol>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Покладіть овал навколо початку і кінця вашого обробника подій. Це називається термінал. Досить часто є більше одного завершення в блок-схемі. В пошуковій кнопці, приклад якої вище, обробник подій закінчується або зображення результатів пошуку в listview, або повідомленням користувача, що немає збігів.</span></li>
</ol>
<ol>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Покладіть ромб навколо тих рішень, які потрібно прийняти. Тобто, коли додаток має вирішити, що є правдою чи хибою для змінної. Пам'ятайте, змінні можуть вести до більш як однієї можливості закінчення.  </span></li>
</ol>
<ol>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Додайте паралелограм навколо inputs в вашому коді чи в місці, де ви плануєте отримати дані з іншого місця чи від користувача.</span></li>
</ol>
<ol>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Покладіть прямокутник навколо всіх процесів вашого коду, коли дія, яку виконує ваш додаток, не підпадає під жодні з категорій, які зазначені вище. Це може бути додавання речей до списку, відсилання повідомлення користувачу. </span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">З'єднайте все разом стрілками! Зверніть увагу на те, як ви малюєте стрілки для циклів і змінних і перегляньте приклади вище, вони вам допоможуть. </span></li>
</ol>
&nbsp;

<span style="font-weight: 400;">Сфотографуйте одну з ваших блок-схем і вкладіть її до подання, щоб заробити бали! Не переживайте, якщо він не зовсім правильний. Це завдання покликане допомогти в плануванні і ви навчились чогось нового! Все добре, якщо ваш код не буде відповідати тому, що вказано в блок-схемі, після того, як ви завершите створення вашого додатку. Вам не потрібно потім оновлювати блок-схему!</span>
<h3><span style="font-weight: 400;">Парне програмування (Pair Programming)</span></h3>
<span style="font-weight: 400;">Парне програмування — це коли два програмісти ділять одне робоче поле (один екран, клавіатуру чи мишку) для спільної роботи — водіння і навігації. В цьому сценарії, людина, яка сидить за клавіатурою чи тачскріном — водій, а інша — навігатор. Навігатор також активно залучений в задачу з програмування, але він зосереджений більше на загальному, відповідає на запитання, які виникають у водія, пильнує код, щоб вловити проблеми та недоробки. Водій і навігатор міняються ролями часто.  </span>

<span style="font-weight: 400;">В парному програмуванні є наступні переваги:</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Краща якість коду, так як навігатор може перевірити роботу водія.</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Краща комунікація між членами команди, тому що водій надає швидкі коментарі щодо того, що вона робить (або ж програмує голосно), а навігатор може відповідати або задавати запитання, що відбувається, коли водій мовчить.   </span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Отриманими знаннями можна ділитись та передавати в команді, особливо, якщо одна людина тільки початківець, а інша — вже просунута.</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Це може допомогти вашій командній роботі більше, тому що водій може бути залучений до владнання неполадок, в той час як навігатор продовжує фокусуватись на задачі і допомагає триматись сфокусованими потім. </span></li>
</ul>
&nbsp;

<span style="font-weight: 400;">Поради для парного програмування:</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Не бійтесь сказати, “Давай спробуємо твою ідею першою!” Деколи, коли ви керуєте, вам потрібно знати, коли слухати вашого навігатора. Ціль полягає в тому, щоб випробувати найкращі ідеї і прийти до них через спільну роботу, уникнути помилок.   </span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Ось </span><a href="https://www.thoughtworks.com/insights/blog/10-ways-improve-your-pairing-experience"><span style="font-weight: 400;">десять п</span></a><span style="font-weight: 400;">ропозицій </span><span style="font-weight: 400;">щодо покращення навичок.</span></li>
</ul>
&nbsp;

<span style="font-weight: 400;">“Ніхто з нас не настільки розумний, як всі ми."</span>

<span style="font-weight: 400;">– Кен Бланшард (Ken Blanchard, автор та експерт з менеджменту</span>

&nbsp;

<span style="font-weight: 400;">Управління (Management)</span>

<span style="font-weight: 400;">Зараз у вас можуть виникнути наступні питання:</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Як працювати ефективно для досягнення мети і встигати до кінцевих термінів (дедлайн)?</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Хто буде випробовувати цифровий прототип і коли?</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Як дізнатись, коли подати на розгляд ваш робочий цифровий прототип?</span></li>
</ul>
<span style="font-weight: 400;">Щоб допомогти відслідковувати рух у вашому процесі з розробки додатку, давайте проглянемо основні етап розробки програмного забезпечення.</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Користувачі, їхні потреби, MVP визначено (з </span><a href="http://www.technovationchallenge.org/curriculum/code-5/"><span style="font-weight: 400;">Code 5</span></a><span style="font-weight: 400;">)</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Дії, які отримає користувач у додатку, зображені в блок-схемі. </span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Програма створена</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Відбувається користувацьке випробовування, помилки виявлені</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Помилки виправлені і команда переконується, що додаток не містить жодних помилок більше</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Якщо додаток працює без будь-яких збоїв на мобільному пристрої і команда задоволена результатом, тоді продукт готовий до того, щоб ним ділитись </span></li>
</ul>
<span style="font-weight: 400;">Поради:</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Розробіть розклад (графік)</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Ви можете створити Gantt Chart, що допоможе вам створити графік того, коли які речі мають бути зроблені і чи щось залежить від інших дій. Ось приклад, як Gantt Chart використовували для розробки програмного забезпечення </span><a href="http://www.dreamincode.net/forums/topic/60048-creating-a-gantt-chart/"><span style="font-weight: 400;">dreamincode</span></a><span style="font-weight: 400;">.</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Визначте завдання для всіх членів команди, встановіть дедлайни і цілі, нагадування в ваш календар!</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Якщо ви використовуєте 20-тижневий навчальний план, ваша команда повинна мати близько 8 тижнів для програмування вашого додатку</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Якщо ви використовуєте 12-тижневий навчальний план, ваша команда має мати 5 тижнів для програмування додатку</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Переконайтесь, що ваш цифровий прототип готовий до представлення не пізніше, аніж за два дні до дедлайну з подання прототипів на Technovation Challenge -  26 квітня 2017 року. Це зменшить вам переживання у випадку, якщо будуть проблеми зі зв'язком. </span></li>
</ul>
</li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Розділіть і розподіліть завдання </span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Переконайтесь, що всі з команди працюють в парі, вирішують різні завдання. Це може допомогти швидко програмувати.</span></li>
</ul>
</li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Визначайте пріоритети (що найважливіше)</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Переконайтесь, що ваш додаток перш за все функціональний. Вже потім ви можете попрацювати над тим, щоб він мав кращий вигляд. Пам'ятайте, що ви подаєте цифровий прототип і судді захочуть дізнатись, що він працює, що робота зроблена і ним легко користуватись. Ви можете також використовувати демо-відео чи ваш бізнес-план, щоб дати суддям зрозуміти, які ваші плани щодо додатку. Але саме зараз вам варто зосередитись на MVP.</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Запитайте ментора про допомогу, якщо вам важко визначити пріоритети, що найважливіше з завдань.  </span></li>
</ul>
</li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Фокусуйтесь</span>
<ul>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Вимкніть всі пристрої, якщо ви їх не використовуєте під час роботи, зустрічей команди.  Можна також встановити беззвучний режим, щоб нічого не відволікало вас від роботи.</span></li>
  <li style="font-weight: 400;"><span style="font-weight: 400;">Переконайтесь, що ви повністю завершили одне завдання, перед тим, як переходити до наступного. Багатозадачність не завжди економить час. Якщо ви працюєте в парі, навігатор допоможе вам залишатись сфокусованими.  </span></li>
</ul>
</li>
</ul>
&nbsp;

<span style="font-weight: 400;">Ось </span><a href="http://www.technovationchallenge.org/wp-content/uploads/2017/01/Technical-Checklist-2017.pdf"><span style="font-weight: 400;">Technical Checklist </span></a><span style="font-weight: 400;">,</span><span style="font-weight: 400;"> який використовуватимуть судді. Ви можете взяти цей список, щоб оцінити свою роботу і бути в змозі пояснити, які і для чого компоненти ви використовуєте у вашому додатку. Судді захочуть побачити, що ви використовували: поля, числа, змінні, списки, цикли, змінні, бази даних і можливості мобільних пристроїв. Ви також можете отримати додаткові бали, надавши зображення вашої блок-схеми, паперового прототипу і скріншоту додатку.   </span>

<span style="font-weight: 400;">Однозначно хорошою є ідея документувати процес розробки додатку і все зберігати. Ви можете мати доступ до різних версій вашого додатку тоді, блок-схем, паперових прототипів у випадку, якщо щось загубилось. Це зекономить час. Ви також можете використовувати всі дані під час обговорень всіх перешкод, які стоять перед вами, а також краще обгрунтовувати питання під час розмови з ментором.  </span>
<h1><span style="font-weight: 400;">Підсумки</span></h1>
<span style="font-weight: 400;">Вітання! Ви на шляху до створення додатку, який буде готовим до подання в Technovation. Якщо ви маєте складнощі з кодування, перевірте наступний розділ, в якому є багато порад щодо налагодження роботи додатку. Успіхів вам зі створення цифрового прототипу! Ми в Technovation в захопленні, що ви так далеко дійшли!</span>
<h3><span style="font-weight: 400;">Додаткові джерела</span></h3>
<ul>
  <li style="font-weight: 400;"><a href="http://ai2.appinventor.mit.edu/reference/other/testing.html"><span style="font-weight: 400;">MIT Testing Documentation</span></a></li>
</ul>
&nbsp;
