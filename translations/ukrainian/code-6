<ul>
 	<li><a href="#pseudo">Псевдокод</a></li>
 	<li><a href="#activity1">Завдання</a></li>
 	<li><a href="#flow">Блок-схеми</a></li>
 	<li><a href="#activity2">авдання</a></li>
 	<li><a href="#pair">Парне програмування</a></li>
 	<li><a href="#time">Управління часомt</a></li>
 	<li><a href="#reflect">Підсумки</a></li>
</ul>
<h3>Цілі:</h3>
В цьому розділі ви дізнаєтесь…
<ul>
 	<li style="font-weight: 400;">Як запланувати те, що ви будете кодувати</li>
 	<li style="font-weight: 400;">Шляхи управління вашим проектом і часом</li>
</ul>
<h3><b>Планування кодування</b></h3>
В розділі <a href="http://www.technovationchallenge.org/curriculum/code-5/" target="blank"><span style="font-weight: 400;">Кодування 5</span></a>ви планували, який матиме вигляд ваш додаток і як користувачі будуть з ним взаємодіяти. В цьому розділі ви дізнаєтесь про дві техніки, які допоможуть вам планувати ваше кодування і подумати про те, як ваш додаток насправді буде працювати. Планування — дуже важлива частина процесу створення додатку, адже ви можете визначити, чи потребуєте додаткових знань і подумати над тим, як будуть працювати ті чи інші речі перед тим, як братись безпосередньо за програмування.
<h3 id="pseudo">Псевдокод (Pseudocode)</h3>
Написання псевдокоду — це невід'ємний етап процесу планування вашого додатку. Псевдокод використовує просту мову, змішану з кодом, щоб пояснити, що ваш додаток робить. Варто використовувати терміни програмування, які ви знаєте (такі як цикли чи умовні), а також будь-які складові, компонентиApp Inventor, які ви б хотіли використовувати (такі як ListView чи кнопки). Щодо написання псевдокоду немає аж так багато правил. Одна ціль — це вловити ідею того, як ваш додаток буде працювати перед тим, як його програмувати.

<span style="font-weight: 400;">Давайте поглянемо на приклад з розділу </span><a href="/?p=21279&amp;lang=uk" target="blank"><span style="font-weight: 400;">Code 3</span></a><span style="font-weight: 400;">. В цьому додатку користувач може здійснювати пошук по базі даних жінок-науковиць. Додаток відображає імені в ListView і користувач може вибрати науковицю і дізнатись про неї більше. </span>

<i>Кнопка пошуку (Search Button)</i>
<ul>
 	<li style="font-weight: 400;">Кнопка пошуку (Search Button)</li>
 	<li style="font-weight: 400;">Додаток використовує for loop для пошуку в базі імені і описів, які зберігаються в TinyDB</li>
 	<li style="font-weight: 400;">Якщо є збіг
<ul>
 	<li style="font-weight: 400;">Додаток додає ім'я науковиці до порожнього списку змінних, який називається searchResults</li>
</ul>
</li>
 	<li style="font-weight: 400;">Якщо searchResults порожній, цикл закінчується
<ul>
 	<li style="font-weight: 400;">Додаток повідомляє користувача, що відсутні збіги</li>
</ul>
</li>
 	<li><b>Інше (Else)</b>
<ul>
 	<li>Додаток відображає searchResults в ListView</li>
</ul>
</li>
</ul>
<i>Вибір науковиць</i>
<ul>
 	<li style="font-weight: 400;">Коли користувач обирає з ListView1</li>
 	<li style="font-weight: 400;">Додаток відкриває Screen2</li>
 	<li style="font-weight: 400;">Додаток підтягує опис і ім'я з TinyDB</li>
 	<li style="font-weight: 400;">Додаток відображає опис і ім'я науковиці</li>
</ul>
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="activity1">Завдання</h3>
Напишіть псевдокод для двох обробників подій в вашому додатку. Якщо у вас проблеми з тим, як обробник подій у вашому додатку працюватиме, ви можете запитати ваших подруг по команді або ментора допомогти!

Запитайте себе:
<ul>
 	<li style="font-weight: 400;">Яка з подій починає цей код?</li>
 	<li style="font-weight: 400;">Чи ваш додаток буде використовувати завантажені значення?
<ul>
 	<li style="font-weight: 400;">Якщо так, де значення будуть зберігатись?</li>
</ul>
</li>
 	<li style="font-weight: 400;">Чи ваш додаток потребує інших змінних? Якщо так, то добре було б дати їм назву, щоб відслідковувати потім.</li>
</ul>
</div>
<h3 id="flow"><b>Блок-схеми (Flowcharts)</b></h3>
Блок-схема — це діаграма, яка представляє алгоритм. Вона використовує форми і стрілки, щоб показати, як дані рухаються в програмі. Завжди читається з верху до низу. Програмісти використовують різні форми, щоб представити різні речі, які стаються з даними. Ось кілька прикладів алгоритмів, щоб зрозуміти, чому у когось болить живіт.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-1.png" alt="flowchart-1" width="426" height="434" />

&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/terminal.png" alt="terminal" width="139" height="41" />
<p style="text-align: left;">Овал показує, де алгоритм починається і закінчується. В прикладі, що наведений вище, є три різних місця, де алгоритм може закінчуватись, якщо людина потребує їжі, відпочинку чи потребує відвідати лікаря. Вони називаються закінчення, термінал (terminal).</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision.png" alt="decision" width="139" height="76" /></p>
<p style="text-align: left;">Ромб зображає, де повинне бути прийняте рішення. Вони як "розвилка на дорозі". Це значить, що змінна має бути визначена як правдива чи неправдива (true, false). Дві стрілки повинні виходити з рішення: одна для правдивого, а інша — для неправдивого. Зауважте, як стрілки відходять від ромба в прикладі вище.</p>
Ось інший приклад блок-схеми:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-2-1.png" alt="flowchart-2" width="124" height="281" />

&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process.png" alt="process" width="139" height="41" />

Ця діаграма використовує прямокутники, які представляють процес. Процес — це будь-що, що має ваш код зробити. Він може розбудити користувача, додати два числа, встановити позначку, щоб щось сказати.

Ця блок-схема показує while loop. Змінна і процес буде повторюватись до того часу, поки змінна не буде такою, яка задовольняє. Є інший тип циклу, який ви вивчили в <a href="/?p=21279&amp;lang=uk" target="_blank" rel="noopener">Code 3</a>:for loop. Змінна в for loop має перевіряти, чи рахунок достатньо виріс. Тоді процес буде повторювати набір чисел доки не виконає умову.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-3-1.png" alt="flowchart-3" width="424" height="314" />

&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/input-1.png" alt="input" width="145" height="41" />

Остання форма, про яку вам варто знати, - це паралелограм. Його можна використовувати тоді, коли вам потрібно отримати дані від користувача або десь-інде, до прикладу, веб-сайту. Паралелограм призначений для входу (inputs).
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="activity2">Завдання</h3>
В цьому завданні ви перетворите ваш псевдокод у блок-схему. Використовуйте той псевдокод, який ви розробили раніше, і слідуйте наступним крокам.
<ol>
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-16outline.png" alt="terminal oval" width="112" height="36" />
Покладіть овал навколо початку і кінця вашого обробника подій. Це називається термінал. Досить часто є більше одного завершення в блок-схемі. В пошуковій кнопці, приклад якої вище, обробник подій закінчується або зображення результатів пошуку в listview, або повідомленням користувача, що немає збігів</li>
</ol>
<ol start="2">
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision_1outline.png" alt="conditional diamond" width="112" height="36" />
Покладіть ромб навколо тих рішень, які потрібно прийняти. Тобто, коли додаток має вирішити, що є правдою чи хибою для змінної. Пам'ятайте, змінні можуть вести до більш як однієї можливості закінчення.</li>
</ol>
<ol start="3">
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-28outline.png" alt="input" width="112" height="36" />
Додайте паралелограм навколо inputs в вашому коді чи в місці, де ви плануєте отримати дані з іншого місця чи від користувача.</li>
</ol>
<ol start="5">
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process_1outline.png" width="112" height="36" />
Покладіть прямокутник навколо всіх процесів вашого коду, коли дія, яку виконує ваш додаток, не підпадає під жодні з категорій, які зазначені вище. Це може бути додавання речей до списку, відсилання повідомлення користувачу.</li>
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/arrow_1outline.png" alt="arrow" height="36" />
З'єднайте все разом стрілками! Зверніть увагу на те, як ви малюєте стрілки для циклів і змінних і перегляньте приклади вище, вони вам допоможуть.</li>
</ol>
Сфотографуйте одну з ваших блок-схем і вкладіть її до подання, щоб заробити бали! Не переживайте, якщо він не зовсім правильний. Це завдання покликане допомогти в плануванні і ви навчились чогось нового! Все добре, якщо ваш код не буде відповідати тому, що вказано в блок-схемі, після того, як ви завершите створення вашого додатку. Вам не потрібно потім оновлювати блок-схему!

</div>
<h3 id="pair"><b>Парне програмування (Pair Programming)</b></h3>
Парне програмування — це коли два програмісти ділять одне робоче поле (один екран, клавіатуру чи мишку) для спільної роботи — водіння і навігації. В цьому сценарії, людина, яка сидить за клавіатурою чи тачскріном — водій, а інша — навігатор. Навігатор також активно залучений в задачу з програмування, але він зосереджений більше на загальному, відповідає на запитання, які виникають у водія, пильнує код, щоб вловити проблеми та недоробки. Водій і навігатор міняються ролями часто.

В парному програмуванні є наступні переваги:
<ul>
 	<li style="font-weight: 400;">Краща якість коду, так як навігатор може перевірити роботу водія.</li>
 	<li style="font-weight: 400;">Краща комунікація між членами команди, тому що водій надає швидкі коментарі щодо того, що вона робить (або ж програмує голосно), а навігатор може відповідати або задавати запитання, що відбувається, коли водій мовчить. .</li>
 	<li style="font-weight: 400;">Отриманими знаннями можна ділитись та передавати в команді, особливо, якщо одна людина тільки початківець, а інша — вже просунута.</li>
 	<li style="font-weight: 400;">Це може допомогти вашій командній роботі більше, тому що водій може бути залучений до владнання неполадок, в той час як навігатор продовжує фокусуватись на задачі і допомагає триматись сфокусованими потім.</li>
</ul>
Поради для парного програмування:
<ul>
 	<li style="font-weight: 400;">Не бійтесь сказати, “Давай спробуємо твою ідею першою!” Деколи, коли ви керуєте, вам потрібно знати, коли слухати вашого навігатора. Ціль полягає в тому, щоб випробувати найкращі ідеї і прийти до них через спільну роботу, уникнути помилок.</li>
 	<li style="font-weight: 400;">Ось <a href="https://www.thoughtworks.com/insights/blog/10-ways-improve-your-pairing-experience" target="_blank" rel="noopener">десять п</a> fропозицій щодо покращення навичок.</li>
</ul>
<div style="background-color: #421b41; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<blockquote>
<p style="text-align: center;">“Ніхто з нас не настільки розумний, як всі ми."</p>
</blockquote>
&nbsp;
<p align="right">– Кен Бланшард (Ken Blanchard, автор та експерт з менеджменту</p>

</div>
<h3 id="time">Управління (Management)</h3>
Зараз у вас можуть виникнути наступні питання:
<ul>
 	<li>Як працювати ефективно для досягнення мети і встигати до кінцевих термінів (дедлайн)?</li>
 	<li>Хто буде випробовувати цифровий прототип і коли?</li>
 	<li>Як дізнатись, коли подати на розгляд ваш робочий цифровий прототип?</li>
</ul>
Щоб допомогти відслідковувати рух у вашому процесі з розробки додатку, давайте проглянемо основні етап розробки програмного забезпечення.
<ul>
 	<li>Користувачі, їхні потреби, MVP визначено (з <a href="http://www.technovationchallenge.org/curriculum/code-5/" target="_blank" rel="noopener">Code 5</a>)</li>
 	<li>Дії, які отримає користувач у додатку, зображені в блок-схемі</li>
 	<li>Програма створена&lt;</li>
 	<li>Відбувається користувацьке випробовування, помилки виявлені</li>
 	<li>Помилки виправлені і команда переконується, що додаток не містить жодних помилок більше</li>
 	<li>IЯкщо додаток працює без будь-яких збоїв на мобільному пристрої і команда задоволена результатом, тоді продукт готовий до того, щоб ним ділитись</li>
</ul>
Поради:
<ul>
 	<li>Розробіть розклад (графік)
<ul>
 	<li>Визначте завдання для всіх членів команди, встановіть дедлайни і цілі, нагадування в ваш календар!</li>
 	<li>Якщо ви використовуєте 12-тижневий навчальний план, ваша команда має мати 5 тижнів для програмування додатку</li>
 	<li>Переконайтесь, що ваш цифровий прототип готовий до представлення не пізніше, аніж за два дні до дедлайну з подання прототипів на Technovation Challenge. Це зменшить вам переживання у випадку, якщо будуть проблеми зі зв'язком.</li>
</ul>
</li>
 	<li>Розділіть і розподіліть завдання
<ul>
 	<li>Переконайтесь, що всі з команди працюють в парі, вирішують різні завдання. Це може допомогти швидко програмувати.</li>
</ul>
</li>
 	<li>Визначайте пріоритети (що найважливіше)
<ul>
 	<li>Переконайтесь, що ваш додаток перш за все функціональний. Вже потім ви можете попрацювати над тим, щоб він мав кращий вигляд. Пам'ятайте, що ви подаєте цифровий прототип і судді захочуть дізнатись, що він працює, що робота зроблена і ним легко користуватись. Ви можете також використовувати демо-відео чи ваш бізнес-план, щоб дати суддям зрозуміти, які ваші плани щодо додатку. Але саме зараз вам варто зосередитись на MVP.</li>
 	<li>Запитайте ментора про допомогу, якщо вам важко визначити пріоритети, що найважливіше з завдань.</li>
</ul>
</li>
 	<li>Фокусуйтесь
<ul>
 	<li>Вимкніть всі пристрої, якщо ви їх не використовуєте під час роботи, зустрічей команди.  Можна також встановити беззвучний режим, щоб нічого не відволікало вас від роботи.</li>
 	<li>Переконайтесь, що ви повністю завершили одне завдання, перед тим, як переходити до наступного. Багатозадачність не завжди економить час. Якщо ви працюєте в парі, навігатор допоможе вам залишатись сфокусованими.</li>
</ul>
</li>
</ul>
Here is the <a href="/?p=20244" target="_blank" rel="noopener">Code Checklist </a>який використовуватимуть судді. Ви можете взяти цей список, щоб оцінити свою роботу і бути в змозі пояснити, які і для чого компоненти ви використовуєте у вашому додатку. Судді захочуть побачити, що ви використовували: поля, числа, змінні, списки, цикли, змінні, бази даних і можливості мобільних пристроїв. Ви також можете отримати додаткові бали, надавши зображення вашої блок-схеми, паперового прототипу і скріншоту додатку.

Однозначно хорошою є ідея документувати процес розробки додатку і все зберігати. Ви можете мати доступ до різних версій вашого додатку тоді, блок-схем, паперових прототипів у випадку, якщо щось загубилось. Це зекономить час. Ви також можете використовувати всі дані під час обговорень всіх перешкод, які стоять перед вами, а також краще обгрунтовувати питання під час розмови з ментором.
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h1 id="reflect">Підсумки</h1>
Вітання! Ви на шляху до створення додатку, який буде готовим до подання в Technovation. Якщо ви маєте складнощі з кодування, перевірте наступний розділ, в якому є багато порад щодо налагодження роботи додатку. Успіхів вам зі створення цифрового прототипу! Ми в Technovation в захопленні, що ви так далеко дійшли
<h3>Додаткові джерела</h3>
<ul>
 	<li style="font-weight: 400;"><a style="color: yellow;" href="http://ai2.appinventor.mit.edu/reference/other/testing.html" target="_blank" rel="noopener">MIT Testing Documentation</a></li>
</ul>
</div>
