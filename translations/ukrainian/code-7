<ul>
 	<li><a href="#tips">Поради щодо налагодження роботи</a></li>
 	<li><a href="#testdata">Використання тестових даних (Test Data)</a></li>
 	<li><a href="#notifer">Використання сповіщень (Notifer)</a></li>
 	<li><a href="#collapse">Вимкнення та колапсинг блоків (Collapsing and Disabling Blocks)</a></li>
 	<li><a href="#comments">Додавання коментарів</a></li>
 	<li><a href="#version">Версія контролю</a></li>
 	<li><a href="#reflect">Підсумки</a></li>
</ul>
<h3><strong>Цілі</strong>:</h3>
В цьому розділі ви дізнаєтесь про…
<ul>
 	<li>Поради щодо налагодження вашого коду</li>
</ul>
<h3 id="tips"><strong><span lang="UK">Поради щодо налагодження</span></strong></h3>
У вас були ідеї і ви їх реалізували в код. Але ж на цьому шляху було і є багато проблем і несправностей!

Ми настільки звикли до різних додатків, програм, що тепер навіть не уявляємось собі життя без них. В багатьох випадках, програми роблять наше життя легшим: ми пишемо листи, спілкуємось з друзями через Facebook, граємо в ігри, шукаємо інформацію в Google. Програми повсюди, і ми навіть можемо не знати, що їх використовуємо, до прикладу, в машинах, чи коли мова йде про світлофори, телебачення, пральні машини. Ми настільки звикли до програм, що переконані — вони працюватимуть завжди!

А якщо ні? Чому ми поклали несправності на перше місце? Бо написання програми — не так то і просто. Це не фізичний продукт, ми не можемо просто взяти і подивитись на нього, зрозуміти, чи він справний чи ні.

Налагодження роботи (Debugging) — це назва процесу, яку кодери використовують, щоб дізнатись, чому їх код не працює. Коли ви робили завдання з кодування (Code Challenge), ви вже проходили через багато процесів, які змушували вас повертатись і повертатись до вашого коду, щоб визначити, де саме була допущена помилка. Це і є суттю дебагінгу і далі буде кілька порад як зробити дебагінг легким для вас.

Деколи ви можете одразу знати, як щось кодувати, але все ж це забирає багато часу. Великі кодери так само роблять помилки, навіть якщо точно знають, що роблять. Тому дуже важливо мати набір інструментів для дебагінгу, які допоможуть вам, коли ви не знаєте, не певні, що ж не спрацювало. Є багато різних методів і кожен використовує свій, в залежності від коду. І ви знайдете свій метод, коли попрактикуєтесь. Дебагінг забирає дуже багато часу, тому одразу варто залишити для цього етапу розробки додатку достатньо часу.

Перегляньте відео, щоб дізнатись більше про помилки, які можна зробити, коли кодите, і як App Inventor допомагає їх виявляти!

<center><iframe src="https://www.youtube.com/embed/IlFAwSj-YsQ" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></center>&nbsp;

Якщо у вас є специфічні питання до App Inventor під час дебагінгу, ось форум App Inventor , до якого можна доєднатись <a href="https://groups.google.com/forum/#!forum/mitappinventortest" target="_blank" rel="noopener">тут</a>, а потім там ставити свої запитання. Незважаючи на те, що App Inventor спільнота переважно дуже дружня, намагається допомогти і відповідати на запиатння, спробуйте спершу пошукати на форумі, чи хтось вже не ставив подібні запитання і чи нема там відповідей. Це дійсно збереже вам час.
<h5 id="testdata"><span lang="UK"><strong>Використання тестових даних</strong> (test data)</span></h5>
Якщо у вас дійсно багато складних даних для вашого додатку, добре було б використати тестові дані (test data). Тестові дані — це простіший набір даних, який ви використовуватиме виключно для тестування вашого додатку, щоб переконатись, що він працює правильно.

Як приклад, уявімо, що ви створюєте додаток, який показуватиме користувачеві найближчі ресторани. Ви захочете використати таблиці (fusion tables), щоб зберігати назви ресторанів, локаційні дані, номери телефонів. Щоб почати розробку додатку, вам не потрібно повний список даних у ваших таблицях (fusion tables). Ви можете просто додати один чи два ресторани і запустити свій додаток перед тим, як додавати справжні дані.
<div style="background-color: #421b41; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<blockquote>
<p style="text-align: center;">“Досить важко знайти помилку в коді, коли ти її шукаєш. Ще важче, коли ти думаєш, що твій код без помилок.”</p>
</blockquote>
&nbsp;
<p align="right">–Стів Макконел (Steve McConnell), експерт з програмування, автор</p>

</div>
<h5 id="notifer"><span lang="UK"><strong>Використання сповіщень</strong> (Notifer)</span></h5>
Припустимо, ваш додаток перестав працювати і ви не знаєте, чому. Ви можете використовувати сповіщення, щоб відмітити, коли код зламався. Щоб поставити сповіщення (notifier) у ваш додаток, потягніть його з user interface palette. Він з'явиться як невидимий компонент:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image00-1.png" alt="image00" width="289" height="120" />

Ви можете ці сповіщення, щоб отримувати повідомлення, де додаток не спрацював. До прикладу, якщо ви використовували if statement в додатку, щоб відбулась певна процедура. Коли ви обираєте Option 1 і очікуєте, що Procedure1 станеться. Однак, коли ви тестували додаток, нічого не сталось. Тоді ваш код має такий вигляд:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image17.png" alt="image17" width="635" height="285" />

Ви не певні, чи проблема з Procedure1, чи з conditional statement, який ви встановили. Проблема може також бути з елементами в spinner! Є багато чого, що треба перевірити. Тому використання сповіщень (notifier) може допомогти звузити пошуки, де може бути помилка. Ви додаєте сповіщення до кожної частини вашого conditional statement ось так:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image19.png" alt="image19" width="662" height="452" />

Коли ви випробували додаток, ви отримуєте сповіщення “This app isn’t doing anything!” (“Цей додаток нічого не робить!”). Тепер ви знаєте, що проблема з conditional statement, а не Procedure1. Сonditional statement виконує код в іншій секції замість секції <strong>if</strong>.  Зараз ви можете перевірити ваш conditional statement і побачити, чи там нема помилок під час набору чи нема помилок в елементах вашого spinner.

Якщо ви випробували додаток, то отримаєте сповіщення “This app is doing option1” (“Додаток виконує option1”). Тоді ви знатимете, що conditional statement працює правильно і що помилка з Procedure1. Ви можете тепер перевірити код в Procedure1. Ось кілька сценаріїв:
<ul>
 	<li>Щоб вирішити проблеми з циклом, який застряг
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/ForLoop.png" alt="forloop" width="395" height="160" /></li>
</ul>
<ul>
 	<li>Щоб перевірити, чи екран завантажується, чи підвис
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/ScreenInitalize.png" alt="screeninitalize" width="355" height="111" /></li>
</ul>
&nbsp;
<h5 id="collapse"><span lang="UK"><strong>Колапс і вимкнення блоків</strong> (Collapsing and Disabling Blocks)</span></h5>
Дві речі можуть допомогти вам вимкнути блоки, які ви не використовуєте. Якщо ви натиснете справа на блок App Inventor дасть вам можливість collapse чи disable блок:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image11.png" alt="image11" width="442" height="216" />

Колапсинг блоку стисне його до одного рядку на вашому екрані: <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image16.png" alt="image16" width="236" height="40" />

Це може допомогти, коли у вас великий код на екрані і непотрібно бачити окремі його частини, над чим ви не працюєте. Щоб розгорнути блок знову, вам потрібно клікнути правою мишкою на нього.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image04.png" alt="image04" width="397" height="178" />

Ви також можете вимкнути блоки. Вони залишаться на екрані, але нічого не виконуватимуть. Це може бути корисним, якщо у вас є шматок коду, який не працює і ви хочете випробувати ваш додаток без нього. Ви можете також зробити це, якщо у вас є блок сповіщень (notifier block), який ви використовували тільки з метою випробування, але не хочете ще його видаляти. Вимкнений блок має такий вигляд:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image18.png" alt="image18" width="415" height="143" />

Щоб увімкнути блоки знову, клікніть правою мишкою на них і оберіть “Enable Block”.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image12-1.png" alt="image12" width="433" height="200" />
<h5 id="comments"><span lang="UK"><strong>Коментарі</strong> (Comments)</span></h5>
Хороший програміст часто залишає коментарі до коду, де пояснює, що він робить. Коментарі можуть допомогти іншим людям, які читають ваш код (члени команди, ментори, судді). Коментарі також допомагають, якщо ви повертаєтесь до коду пізніше і забули, що його частини роблять. Щоб залишити коментар в App Inventor, клікніть правим кліко на блок і виберіть “add comment”:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image11.png" alt="image11" width="387" height="189" />

Після цього блакитний знак запитання з'явиться в кутку блоку і ви можете додати туди текст. Ви можете бачити коментар, натиснувши на знак запитання.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image14.png" alt="image14" width="423" height="226" />
<blockquote>
<p style="text-align: center;">“Навчаючись створювати технології, дівчата навчаються, як висловлювати свою думку."</p>
</blockquote>
<p align="right">–Регіна Агіар (Regina Agyare), засновниця Soronko Solutions</p>

<h3 id="version"><span lang="UK"><strong>Версійний контроль</strong> (Version Control)</span></h3>
Припустимо, одна частина вашого додатку розроблена і працює. Коли ви створювали і випробовували другу частину, все припинило працювати, включно з тією частиною, яка працювала до того! Ви намагаєтесь видалити блоки, які щойно додали, але весь додаток просто не працює. Тепер ви не впевнені, що пішло не так і хочете, щоб була якась  "undo" кнопка.

Щоб уникнути таких сценаріїв, добре було б створити різні версії вашого додатку. Ці різні версії збережуть код, тому якщо ви зміните код, а там буде помилка і ви не матимете змоги її виправити, ви можете повернутись до останньої версії вашого додатку, який працював, і яку треба зберегти. Ви можете також використати версійний контроль, якщо експериментуєте з функціоналом вашого додатку і не певні, чи хочете їх залишити. Є два різних способи, щоб зберегти різні версії в App Inventor, використовуючи “save as” і “checkpoint”.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image13.png" alt="save as" width="452" height="316" />

Можливість “save project as” дозволяє створити копію коду, над яким ви працюєте і зберегти його під новим іменем.

До прикладу, якщо ваш проект називається “test”, ви можете зберегти його версія як “test_version2” і продовжувати додавати код до нього. Якщо щось піде не так, ви зможете повернутись до проекту під назвою “test”.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image09.png" alt="checkpoint" width="1000" height="700" />

Опція “checkpoint” дозволяє зберегти код як він є під новими іменем.

До прикладу, якщо проект, над яким ви працюєте, носить назву “test”, сheckpoint збереже нинішню версію вашого коду як проект, який називається “test_checkpoint1”. Тоді ви можете продовжувати працювати і якщо виникнуть проблеми, ви можете повернутись до проекту, який називається “test_checkpoint1”.

Перегляньте це відео, щоб дізнатись більше про те, як зберігати версії в App Inventor.

<center>
<iframe src="https://www.youtube.com/embed/HNM5Mxf7eZU" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></center>
<div style="background-color: #006667; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h1 id="reflect" style="color: white;"><strong><span lang="UK">Підсумки</span></strong></h1>
Вітання! Ви майже завершили створення вашого додатку, який можна подати до Technovation. Робота вашої команди була важкою, але ви це зробили!

Якщо це перший раз, коли ви створюєте додаток чи пишете код, ви точно дізнались дуже багато і подолали страх перед кодуванням! Деякі команди навіть подолали мовні бар'єри, бар'єри обмежених ресурсів, які не давали почати програмувати.

Ми гордимось вами і сподіваємось, що ви гордитесь собою, результатами вашої роботи! Ви наполегливо і важко працювали, а також багато навчились одна від одної, від ваших менторів! Ви — джерело натхнення для нас і багатьох інших.

&nbsp;
<h3 style="color: white;"><strong><span lang="UK">Додаткові ресурси</span></strong></h3>
<ul>
 	<li><a style="color: #eae46f;" href="http://ai2.appinventor.mit.edu/reference/other/testing.html" target="_blank" rel="noopener">MIT Testing Documentation</a></li>
 	<li style="font-weight: 400;">А ось ще одне відео, яке допоможе тобі з дебагінгом: <a style="color: #eae46f;" href="https://www.youtube.com/watch?v=itCnknI5PlY" target="_blank" rel="noopener">Debugging Video</a></li>
</ul>
</div>
