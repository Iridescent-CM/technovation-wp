<ul>
 	<li><a href="#conditions">Умови</a></li>
 	<li><a href="#ifelse">If/Else оператори</a></li>
 	<li><a href="#act1">Завдання</a></li>
 	<li><a href="#elseif">Else/If оператори</a></li>
 	<li><a href="#act2">Завдання</a></li>
 	<li><a href="#andop">AND оператор</a></li>
 	<li><a href="#orop">OR оператор</a></li>
 	<li><a href="#notop">NOT оператор</a></li>
 	<li><a href="#act3">Завдання</a></li>
 	<li><a href="#forloop">For цикли</a></li>
 	<li><a href="#foreach">For each цикли</a></li>
 	<li><a href="#whileloop">While цикли</a></li>
 	<li><a href="#codechal">Завдання з кодування #3</a></li>
</ul>
<h3><strong>Цілі</strong>:</h3>
В цьому розділі ви:
<ul>
 	<li>Дізнаєтесь про оператори умов і як їх прописувати</li>
 	<li>Вивчите, як використовувати логічні оператори у вашому коді</li>
 	<li>Дізнаєтесь, як і як довго використовувати цикли</li>
 	<li>Створите додаток, який здійснюватиме пошук в базі даних</li>
</ul>
Вітаємо з тим, що ви пройшли це довгий шлях і вже знаєте багато того, що потрібно для розробки вашого додатку. Цей блок містить останнє завдання з кодування, і це також останній розділ, який вчить вас основам кодування. Після цього ви дізнаєтеся про додаткові ресурси для того, щоб почати планувати свій додаток! Не зациклюйтесь на тому, що ви не розумієте, тому що ви завжди можете повернутися пізніше до тих розділів!
Давайте пригадаємо те, що ми дізнались в розділах з кодування 1,2:
<ul>
 	<li><b>Алгоритми</b> це інструкції крок за кроком для вашого додатку.</li>
 	<li><b>Логічні дані (Booleans)</b> тип даних з двома значеннями: true (правда) і false (неправда).</li>
 	<li><b>Обробник подій</b> каже вашому додатку, що робити, коли щось станеться.</li>
 	<li><b>Змінні</b> назва частини даних, які можуть змінюватись.</li>
</ul>
Спробуйте пограти в цю гру, перш ніж приступити до роботи. Це допоможе вам ознайомитись з поняттями, які заплановані в цьому розділі. Якщо ви не розібратись з усіма п'ятьма рівнями, поверніться до гри після того, як ви пройшли розділ!
<p style="text-align: center;">
<a href="https://www.madewithcode.com/projects/robots" target="_blank">Made With Code Robot</a></p>

<h2 id="conditions"><strong>Умови</strong></h2>
Ви вже достатньо використовували обробники! Під час останніх завдань з кодування, коли користувач натискав кнопку, ваш додаток зробив щось. Наприклад, в вашому додатку щодо списку справ кнопка enter додавала елементи в список справ. Подією в цьому випадку було натискання користувачем "<strong>enter</strong>" і додаток на це зреагував шляхом додавання тексту користувача в список справ. Код для вашого додатку працював так:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/Enter-Pressed1-533x1024.png" alt="enter-pressed1" width="99" height="189" />

Ви могли помітити, в нашому прикладі або в ваш власний додаток "списку справ" дозволяє користувачеві додати порожній рядок в список. Через це, користувач може мати дуже довгий список з порожніми комірками!

Припустимо, що ви не хочете, щоб ваш користувач міг додавати порожні комірки в свій список справ. Таким чином, ви прописуєте код так, щоб кожен раз, коли користувач натискає “enter”, ваш додаток запитує "користувач ввів текст"? Якщо відповідь так, то додаток додає текст в список справ. Якщо відповідь ні, то програма не додає його. Тепер ваш код має наступний вигляд:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed2-352x1024.png" alt="enter-pressed2" width="142" height="411" />

Це відмінний спосіб, щоб вирішити проблему, але пам'ятайте, що комп'ютери не можуть думати самі за себе. Ви не можете задавати їм питання, яке можна поставити людині. При кодуванні, коли ви хочете запитати вашу програму, ви запрограмовуєте його, щоб перевірити умову. Умовою є те, що комп'ютер визначає як істинне (true) або хибне (false).

Для перевірки умови під час програмування може бути тільки два можливих результати: true означає так, це умова істинна, і false значить те, що умова хибна. Ви можете запрограмувати ваш додаток робити різні речі в залежності від того, якщо умова є істинною або хибною. До прикладу:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed3-343x1024.png" alt="enter-pressed3" width="152" height="455" />

Чи пам'ятаєте ви логічні дані з Розділу 2: Дані і змінні? Логічні дані — це тип даних, які можуть бути true чи false. Коли ваш додаток обчислює умови, він виводить логічні дані (boolean)!
<h2><strong>Оператори умови</strong> (conditional statements)</h2>
<h5 id="ifelse">If/Else <strong>оператори</strong></h5>
Отож тепер ви знаєте, що таке умова. Але як її використовувати в кодуванні? В кодуванні, ви запитуєте комп'ютер обчислити умови, пишучи операторів умов (conditional statements). Оператори умови — це те, як комп'ютер приймає рішення. Вони завжди мають частку if (якщо), яка каже додатку, що робити, коли умова правдива (так, істинна). Оператори умови також переважно мають частину else (інше), яка говорить додатку, що робити, якщо умова неправдива (ні, хибна). Якщо не брати до уваги частину else, то ваш додаток не робитиме нічого, коли умова хибна. Тепер ваш код після натискання “enter” матиме такий вигляд:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed4-550x1024.png" alt="enter-pressed4" width="262" height="488" />

Ось який вигляд мають оператори умов на App Inventor:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-12.05.58-PM.png" alt="screen-shot-2016-11-01-at-12-05-58-pm" width="254" height="161" />

Ось як працюють ці блоки. Ви берете умову і прописуєте її біля if. Прописуєте код, що ваш додаток має робити, якщо ця умова правдива (true) біля then (тоді) і що ви хочете, щоб ваш додаток робив, якщо умова хибна (false) біля else (інше). Якщо умова правдива (true), тільки код then запуститься і код else буде проігнорований. I якщо ваша умова false (хибна), код then буде проігнорований і тільки код else буде запущений.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/if-statement.png" alt="if-statement" width="463" height="243" />

Ось приклад. Такий вигляд мають оператори умови після додавання коду.
При цьому, коли користувач натискає на кнопку "еnter", додаток буде оцінювати цей стан: "довжина рядка, введеного в текстовому полі не дорівнює нулю". Якщо ця умова правдива (true) (довжина рядка не дорівнює нулю), це означає, що користувач ввів текст, так що додаток буде додати текст в список. Якщо умова хибна (довжина рядка дорівнює нулю), то додаток ігнорує весь код, який знаходиться біля "then" і дозволяє перейти до "else" частини, яка попереджає користувача про необхідність введення тексту.
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="act1"><strong>Завдання</strong></h3>
Подумайте про деякі оператори умов, які допомагають вам зробити вибір кожного дня. Ось кілька прикладів:
<ul>
 	<li>Якщо йде дощ, то візьміть з собою парасольку</li>
 	<li>Якщо ви зголодніли, то з'їжте бутерброд</li>
 	<li>Якщо ваша собака скиглить, її потрібна прогулянка</li>
 	<li>Якщо на вулиці холодно, візьміть з собою куртку</li>
 	<li>Якщо ваше волосся заплуталося, його потрібно розчесати</li>
 	<li>Якщо ви захворіли, то йдіть до лікаря</li>
 	<li>Якщо ваш телефон розрядився, то зарядіть його</li>
 	<li>ElseIf оператори</li>
</ul>
</div>
<h5 id="elseif">If/Else <strong>оператори</strong></h5>
Else if оператори дозволяють додавати інші умови до оператора. Ця друга умова буде обчислюватись після першої умови і тільки у випадку, якщо перша умова хибна (false). Якщо друга умова теж хибна (false), тоді додаток за замовчуванням перейде до else або нічого не робтиме. Ось діаграма, яка допоможе вам розібратись в цьому.
<table>
<tbody>
<tr>
<td style="text-align: center;" width="50%">Оператор умови з можливими двома рішеннями</td>
<td style="text-align: center;">Оператор умови з можливими трьома рішеннями. Умова 2 обраховується тільки тоді, коли Умова 1 хибна.</td>
</tr>
<tr>
<td style="vertical-align: top;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition-1024x664.png" alt="condition" width="246" height="159" /></td>
<td style="vertical-align: top;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image04-1-1024x851.png" alt="image04" width="314" height="261" /></td>
</tr>
</tbody>
</table>
Ось як це відбувається на App Inventor:
<table>
<tbody>
<tr>
<td style="vertical-align: top;" width="25%"> <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image29.png" alt="image29" width="150" height="230" /></td>
<td style="vertical-align: top;"> <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image19.gif" alt="how to use the if else block" width="640" /></td>
</tr>
</tbody>
</table>
Ваша перша умова переходить до if, а друга — до else if. Ось приклад:

Ви розробляєте додаток, який передбачений виключно для користувачів віком від 13 до 18. і ви хочете, щоб додаток давав користувача зрозуміти, чи вони не занадто старі чи молоді для того, щоб ним користуватись У вас є три рішення:
<ol>
 	<li>Користувач надто молодий</li>
 	<li>Користувач надто старий</li>
 	<li>Користувач правильного віку</li>
</ol>
Коли користувач вводитиме свій вік в додатку, то вік буде змінною “age” (вік). Ось як ви можете використати оператори if/else if/else , щоб переконатись, що користувач правильного віку.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image08-1-1024x457.png" alt="if/else else/if response blocks" width="633" height="283" />

Перша умова перевіряє, чи є користувач молодше 13. Якщо так, то додаток попереджає його, що людина занадто молода. Якщо ні, додаток потім перевіряє, чи він не старший 18 років. Якщо так, то додаток попереджає людину, що вона занадто стара. Якщо вона не старша 18 років, то додаток говорить їй, що вона правильного віку.

Ви можете додати стільки умов, скільки хочете, до вашого оператору умов за допомогою else if, але важливо мати на увазі порядок, в якому додаток оцінює умови. Ваш код завжди буде починатися з першої умови, а потім продовжуватиме до тих пір, поки не знайде умову, яке є правдивою (true). Коли він знайде цю умову, він виконає код, який прописаний під цією умовою. Якщо жодна з умов не буде правдивою, він буде виконувати код в частині else.

Ось дещо, що варто запам'ятати, коли ви використовуєте оператори If/ Else/ Else If
<ul>
 	<li>Ви можете перевірити стільки умов, скільки хочете</li>
 	<li>Оператор працює зверху вниз, так що ставте умову, яку ви хочете, щоб була випробувана спершу, у верхній частині оператора</li>
 	<li>Тільки одна дія буде відбуватися, і це буде для першої умови, що є правдивою (true)</li>
</ul>
Для того, щоб більше дізнатись про умови, <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/control.html" target="_blank">прогляньте сайт MIT</a>.
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="act2"><strong>Завдання</strong></h3>
Визначити те, які умови ваш додаток повинен опрацьовувати, складно! Ви можете знати, що саме хочете, щоб додаток зробив, але буде складно дізнатись умови для перевірки. Давайте спробуємо написати кілька умов, які додаток має вирахувати.

Вхід в обліковий запис в соціальних медіа:
<ul>
 	<li>Умови для перевірки:</li>
 	<li>Ім'я користувача правильне</li>
 	<li>Пароль правильний</li>
 	<li>Користувач спробував ввійти в запис не більше 5 разів</li>
</ul>
Прописаний оператор умов переводить умову, яку ви маєте на увазі, в те, що ваш додаток здатний зрозуміти. У наведеному вище прикладі ми перевірили вік користувача, спочатку створивши змінну, яка дорівнюватиме віку користувача. Не завжди вдається створити умову, це потребує практики! Ось питання, які допоможуть правильно встановити умову:
<ol>
 	<li>Чи ваша умова залежить від інформації, яку користувач вводить?</li>
 	<li>Чи вам потрібно встановити будь-яку змінну?
<ol type="a">
 	<li>Якщо так, то якого типу змінну? Число, список чи текст?</li>
</ol>
</li>
 	<li>Чи можете ви користуватись математичними операторами, такими як менше ніж (&lt;) , більше ніж (&gt;), дорівнює (=), не дорівнює (≠) у вашій умові?</li>
 	<li>Чи вам потрібно порівнювати значення чогось зі значенням в базі даних?</li>
 	<li>Чи вам потрібно порівнювати значення чогось з даними з іншого ресурсу (вебсайт тощо) (Про це буде детальніше в Кодування. Розділ 4)</li>
 	<li>На які типи даних ваша умова опирається? Чи є якісь дії для цих типів даних, які можуть вам допомогти?
<ol type="a">
 	<li>Приклад: Порівняння двох рядків, знаходження довжини нитки, додавання справ до списку, порівняння двох списків тощо.</li>
 	<li>Випробуйте функції App Inventor, щоб побачити, чи може він вам допомогти.</li>
</ol>
</li>
</ol>
Час для практики! Спробуйте перекласти один чи два приклади, які наведені вище в код.

</div>
<h2 id="andop"><strong>Логіка</strong></h2>
Ви вже навчились, як зробити так, щоб додаток робив різні речі, використовуючи оператори умов. Тепер ви дізнаєтесь про декілька логічних операторів. Логічні оператори використовують логічні дані як для вводу, так і для виводу інформації (рішення). Так як ваш додаток сприймає умови як правдиві (true) або хибні (false), ви можете використовувати умови для вводу логічних даних. Ось три основних логічних функції, про які піде далі мова: AND (і), OR (чи) і NOT (ні).
<h5>AND <strong>оператор</strong></h5>
Функція AND (і) має дві умови, які обидві повинні бути правдивими (true), щоб вхід був правдивим (true). Якщо одна з умов хибна, ваш код вирахує все як хибне (false). Ось кілька можливих виходів, коли ви використовуєте функцію AND.
<p style="text-align: center;">True <strong>and</strong> True = True</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image34.png" alt="true/true blocks" width="318" height="62" /></p>
<p style="text-align: center;">True <strong>and</strong> False = False</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image24-1.png" alt="true/false blocks" width="336" height="61" /></p>
<p style="text-align: center;">False <strong>and</strong> True = False</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image38.png" alt="false/true blocks" width="331" height="60" /></p>
<p style="text-align: center;">False <strong>and</strong> False = False</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image07-1.png" alt="false/false blocks" width="353" height="66" /></p>
<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition3-1024x608.png" alt="condition3" width="407" height="242" />

Примітка: Використання оператора AND відмінне від використання оператора else if , адже обидві умови оцінюються одночасно, замість того, щоб оцінюватись одна за одною. Вони обидві повинні бути правдивими (true), щоб додаток зрозумів, що умова правдива true).
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h5><strong><span style="color: #ffffff;">Приклади</span></strong></h5>
Вам потрібно використовувати оператор AND , коли ви хочете, щоб дві умови були правдивими (true) для того, щоб щось сталось. Ось кілька прикладів, де можна використовувати оператор AND у вашому додатку!
<ul>
 	<li>Вхід в обліковий запис в соціальних медіа:
<ul>
 	<li>Якщо (if) (ім'я користувача правильне) AND (пароль правильний) → тоді (then) дозволити користувачу увійти</li>
</ul>
</li>
 	<li>Виграш у грі
<ul>
 	<li>Якщо (іf) (гравець долає відстань) AND (час менше, аніж 3 хвилини) → тоді (then) користувач виграє</li>
</ul>
</li>
 	<li>Пошук магазину:
<ul>
 	<li>Якщо (If) (магазин відкритий) AND (близько до користувача) → тоді (then) показати всі результати пошуку</li>
</ul>
</li>
 	<li>Публікація картинки:
<ul>
 	<li>Якщо (If) (користувач обрав картинку) AND (користувач натиснув підтвердження) → тоді дозволити користувача опублікувати картинку</li>
</ul>
</li>
</ul>
Можете запропонувати ще якісь приклади?

</div>
<h5>OR <strong>оператор</strong></h5>
Оператор OR бере два вхідних повідомлення і тільки один з них повинен бути правдивими “true” , щоб ввід був правдивим. Якщо ні одна з умов не “true”, ваг код буде вважати все повідомлення як хибне “false”. Ось всі можливі виходи (рішення), коли використовується функція OR.
<p style="text-align: center;">True <b>or</b> True = True</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image33-1.png" alt="true or true blocks" width="284" height="53" /></p>
<p style="text-align: center;">True <strong>or</strong> False = True</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image57.png" alt="true or false blocks" width="299" height="58" /></p>
<p style="text-align: center;">False <strong>or</strong> True = True</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image26-1.png" alt="false or true blocks" width="299" height="63" /></p>
<p style="text-align: center;">False <strong>or</strong> False = False</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image49.png" alt="false or false blocks" width="313" height="61" /></p>
<img class="aligncenter" src="http://technovationchallenge.org/wp-content/uploads/2016/09/Condition4-3.png" alt="" width="408" height="239" />

Примітка: Оператор OR може також здатись подібним до оператора else if. Оператор OR відрізняється. Тому що обидві умови вираховуються одночасно, а не одна за одною. Оператор OR краще використовувати, коли у вас дві умови мають мати однаковий вихід, якщо вони правдиві “true”.
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">

<strong>Приклад</strong>
<ul>
 	<li>Програш в грі:
<ul>
 	<li>(Якщо час вийшов) OR (гравець втрачає життя) → тоді (then) гравець програє</li>
</ul>
</li>
 	<li>Показ результатів пошуку
<ul>
 	<li>(Якщо заголовок співпадає) OR (опис співпадає) → показати результати пошуку</li>
</ul>
</li>
 	<li>Рекомендацію користувачу відео для перегляду
<ul>
 	<li>(Якщо користувач дивився в минулому) OR (це подібне до того, що користувач вподобав) → рекомендувати це користувачу</li>
</ul>
</li>
</ul>
Чи можете запропонувати ще приклади?

</div>
<h5 id="notop">NOT <strong>оператор</strong></h5>
Оператор NOT складний для розуміння. Він витягує логічні дані, які є протилежними до запитуваних.
<p style="text-align: center;"><b>not</b> true = false</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image13-1.png" alt="not true blocks" width="167" height="52" /></p>
<p style="text-align: center;"><b>not</b> false = true</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image43.png" alt="not false blocks" width="178" height="44" /></p>
Деколи легше встановити умову, яку можна перевірити з протилежного. Для цього сценарію краще використовувати оператор NOT.
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition5-1024x825.png" alt="condition5" width="283" height="228" /></p>

<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h5><strong><span style="color: #ffffff;">Приклади</span></strong></h5>
<ul>
 	<li>Ви хочете перевірити, чи текст вписаний в полі для тексту. Але це легше перевірити, чи воно не порожнє. Тому варто використовувати оператор NOT.
<ul>
 	<li>Якщо NOT(поле для тексту = “ ”) → зробити це</li>
</ul>
</li>
 	<li>Ви хочете вилучити результати про тваринок, але легше показати результати, які містять тваринок. Тому легше використовувати оператор NOT.
<ul>
 	<li>Якщо NOT(стаття містить слово тваринки) → показати результат</li>
</ul>
</li>
 	<li>Ви можете поєднати логічні оператори, щоб робити більше. Ось як ви можете виключати пошук щодо тваринок, але залишити інформацію про котиків.
<ul>
 	<li>Якщо NOT(стаття містить слово тваринки) AND (стаття містить слово котик) → показати результат</li>
</ul>
</li>
</ul>
</div>
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="act3">Завдання</h3>
Чи знаєте ви, що можна використовувати оператори AND, OR чи NOT в пошуку google? Це потрібно для того, щоб звузити чи розширити пошук, коли ви шукаєте щось. Спробуйте! Переконайтесь, що AND, OR і NOT великими літерами. Перевірте приклади:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image45.png" alt="image45" width="482" height="331" />

Пошук для 2017 AND Technovation надасть вам результати і для 2017 і для technovation
Пошук для 2017 OR Technovation дасть вам результати, які містять або 2017, або Technovation

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image25-1.png" alt="image25" width="481" height="313" />

</div>
<h2 id="forloops"><strong>Цикли</strong></h2>
Комп'ютери роблять чудові речі і переважно без помилок. Ви можете скористатись ними, використовуючи цикли. Цикл — це блок коду, який повторюється раз за разом.

Є два типи циклів - while loops і for loops. While loops продовжуватиметься до того часу, поки якась з умов більше не правдива, і for loops зробить щось конкретну кількість разів.
For loops
For loops буде повторювати блок коду певну кількість разів. Він називається for loops (цикл), тому що ви можете сказати додатку, скільки разів ви хочете, щоб повторювався для коду for. Уявіть, що ви кажете додатку: “for 14 разів повторіть це”чи “for 5 разів, повторіть це”.

For loops використовує змінні, які вираховують скільки разів код повторюється, і називається лічильник (counter). Ви контролюєте, скільки разів цикл повторюється, встановлюючи, коли лічильник counter починається і закінчується. ВИ також можете встановити, наскільки counter піднімається щоразу, як код повторюється. В більшості сценаріїв ви хотітимете, щоб лічильник counter зростав на 1 щоразу, як цикл повторюється.

В App Inventor, for loops має наступний викгляд:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image21.png" alt="for loop block" width="276" height="153" />

Частина number це лічильник counter. Зараз counter називається number, але ви можете змінити назву. Number почнеться в 1 і зупиниться в 5. Щоразу код всередині циклу повторюватиметься, а number збільшиться на 1. Отож цей цикл повториться всередині коду 5 разів. Зараз цикл не робить нічого, так як do частина порожня. Давайте проглянемо приклад:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image41-1024x449.png" alt="image41" width="431" height="189" />

Ми нічого не змінили в змінній number, але додали код до частини циклу do. Кожен раз, коли цей цикл запускається, додаток повідомить користувачу “hello”, отож користувач отримає повідомлення 5 разів. Ось як додаток пройде цей цикл:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-2.00.15-PM.png" alt="screen-shot-2016-11-01-at-2-00-15-pm" width="448" height="414" />

Цей цикл буде корисним, якщо ви хочете, щоб користувач отримав повідомлення “hello” 5 разів. Це може здатись не таким корисним, адже важко вкласти 5 блоків в ряд, де записано “hello”. А якщо ви хочете, щоб користувачу повідомлення надійшло 100 разів? Легше це зробити завдяки циклу і потім викласти 100 блоків в ряд!

Інший шлях для for loops — це використання змінної лічильника (counter variable) в вашому коді. Кожного разу, коли проходить цикл, counter variable матиме різні значення і це буде дуже зручно. Ось приклад.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image27-1-1024x402.png" alt="image27" width="464" height="182" />

В цьому циклі ми використовуємо змінну number в коді, пов'язавши її зі словом “hello”. Number збільшуватиметься на 1 щоразу, отож додаток видаватиме різні результати, щоразу, як працює. Ось як додаток працює протягом цього циклу:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-2.04.17-PM.png" alt="screen-shot-2016-11-01-at-2-04-17-pm" width="445" height="381" />
<h5 id="foreach">For each <strong>цикл</strong></h5>
Інший корисний тип for loop , який ви можете використовувати в App Inventor:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image16-1.png" alt="image16" width="219" height="88" />

Ось counter variable, яка називається item і буде повторюватись для числа в списку. Ці цикли дуже корисні, коли вам потрібно щось зробити зі списком. Ось приклад.

Припустимо. У вас перелік чисел, які ви хочете додати і зберегти у змінній, яка називається sum. Ось як це можна зробити з циклом for each.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/listofnumbers.png" alt="listofnumbers" width="404" height="94" />

<b><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/numberlist.png" alt="numberlist" width="500" height="106" /></b>

Щоразу, як цикл запускається, змінна sum братиме дані з numberList , додаючи їх. Цикл автоматично зупиниться, коли всі числа будуть додані!

Примітка: Ви помітили, що counter variables в цій секції подібні до local variables, які ви вивчали в Кодування. Розділ 2! Так само, як і локальні змінні, ви можете їх використовувати тільки всередині циклу.
<h5 id="whileloop">While <strong>цикли</strong></h5>
While loops — це цикли, які повторюються до того часу, поки умова не перестане бути правдивою. Уявіть, що цей цикл каже вашому додатку “поки (while) це відбувається, повторюй цю дію” чи “поки (while) це не змінилось, повторюй цю дію”.
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h5><strong><span style="color: #ffffff;">Приклад</span></strong></h5>
У вас вечірка і ви хочете, щоб музика грала, поки гості не розійдуться. Ви можете описати вашу вечірку як цикл:
<ul>
 	<li>Поки while (кількість людей на вечірці &gt; 0)</li>
 	<li>Дія do: музика продовжує грати</li>
</ul>
А що, якщо ви хочете, щоб музика також припинила грати після опівночі? Тоді вам потрібно запрограмувати while loops до кінця і тепер цикл грунтуватиметься на множинній умові, використовуючи logic оператора. Тепер ви можете описати свою вечірка як цикл.
<ul>
 	<li>Поки While (кількість людей на вечірці &gt; 0) OR (час &lt; північ)</li>
 	<li>Дія do: музика продовжує грати</li>
</ul>
У цьому випадку музика гратиме до того часу, поки не піде останній учасник вечірки або не настане північ.

</div>
Для використання while loop циклу вам потрібно встановити, щоб перша умова була правдивою true. Якщо ваша умова починається з false, тоді ваш цикл ніколи не запуститься. Цикл перевірятиме умову щоразу перед тим, як повторюється, щоб переконатись, що умова досі залишається правдивою true.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/StartLoop-Arrow3-436x1024.png" alt="startloop-arrow3" width="169" height="397" />

Ось який while loops має вигляд на App Inventor:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp- content/uploads/2016/09/image35.png" alt="while loop block" width="159" height="105" />

З while loops циклами можливо отримати помилки! Якщо ви використовуєте умову, яка ніколи не буде хибною false, тоді ваш цикл ніколи не закінчиться. Це називається безкінечний цикл infinite loop. Ось приклад.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image52.png" alt="image52" width="389" height="156" />

Так як 1 завжди буде рівне 1, ця умова ніколи не буде хибною false! Коли ви запускаєте код на App Inventor ваш телефон завмре і ви не зможете нічого зробити. Ви також можете отримати повідомлення від App Inventor Companion, що додаток припинив роботу.
<h2 id="codechal">Завдання з кодування #3</h2>
Створіть додаток, що дозволяє користувачеві шукати інформацію в базі даних і переглядати результати. База даних повинна містити імена та описи відомих людей, місць, фільмів, музики, подій або що-небудь, що ви хочете. Переконайтеся, що у вас є принаймні три записи в базі даних.

Постарайтеся розв'язати завдання, не звертаючи уваги на інструкції. Інструкції показують лише один із способів, як ця проблема може бути вирішена.
<p style="text-align: center;"><strong><a href="http://www.technovationchallenge.org/curriculum/code-3-challenge/" target="_blank">
Перегляньте інструкції
</a></strong>
<a href="https://play.google.com/store/apps/details?id=appinventor.ai_alliec.DatabaseSearch" target="_blank">
<strong> Завантажити наш приклад програми</strong>
</a></p>

<div style="background-color: #006667; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h2><strong><span style="color: #ffffff;">Підсумки</span></strong></h2>
Вітаємо! Ви завершили цей розділ! Було багато чого нового, щоб ви змогли створити ваш додаток! Не забувайте переглядати цей розділ, якщо щось не зрозуміло.

Ключові слова:
<ul>
 	<li><strong>Логічні дані (Booleans)</strong> типи даних, які можуть бути правдивими true або хибними false</li>
 	<li><strong>Умови (Conditions)</strong> щось, що додаток визначає як true чи false</li>
 	<li><strong>Оператори умов (Conditional Statement)</strong> кажуть додатку, що зробити після обчислення умов</li>
 	<li><strong>AND оператор</strong> визначає як true, якщо всі введення true</li>
 	<li><strong>OR оператор</strong> визначає як true, якщо одне із введень true</li>
 	<li>NOT оператор визначає як протилежне інформацію, яка введена</li>
 	<li><strong>Цикл (Loop)</strong> блок коду, який повторюється</li>
 	<li><strong>For Loop</strong> повторює блок коду певну кількість разів</li>
 	<li><strong>For Each Loop</strong> повторює блок коду для переліку в списку</li>
 	<li><strong>White Loop</strong> повторює блок коду, поки умова true</li>
</ul>
</div>
