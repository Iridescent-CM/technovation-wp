<h1>Desafío de Programación 3</h1>
<em>*recursos con * están en inglés</em>
<h1>Buscando una Base de Datos</h1>
<ul>
 	<li><a href="#design">Diseñando una pantalla </a></li>
 	<li><a href="#data">Agregando Datos a una Base de Datos</a></li>
 	<li><a href="#list">Creando una Lista de Nombres y Valores </a></li>
 	<li><a href="#check1">Check Point 1</a></li>
 	<li><a href="#search">Programación de Botón de Búsqueda </a></li>
 	<li><a href="#check2">Check Point 2</a></li>
 	<li><a href="#newscreen">Mostrando los Resultados de Búsqueda</a></li>
 	<li><a href="#finalcheck">Check Point </a><a href="#finalcheck">Final</a></li>
</ul>
<h3>Descripción</h3>
Crear una aplicación que le permita al usuario buscar en una base de datos de información y ver sus resultados. La base de datos debe contener nombres y descripciones de personas famosas, lugares, películas, música, eventos o cualquier otra cosa que desee. Asegúrete de tener al menos tres entradas en tu base de datos.

Vea nuestra aplicación de ejemplo aquí: <a href="https://play.google.com/store/apps/details?id=appinventor.ai_alliec.DatabaseSearch">Technovation Challenge # 3</a>

Intenta averiguar cómo completar el desafío por tu cuenta antes de ver las instrucciones. Las instrucciones muestran solo una forma de cómo se puede resolver este desafío. ¡Feliz codificación!
<h3>Overview</h3>
Decidimos abordar este desafío de programación almacenando nombres y descripciones de mujeres científicas en un TinyDB. Usamos el nombre de la científica como el nombre de la etiqueta para almacenar la descripción de tu trabajo. Después de eso hicimos dos listas, una con el nombre de la persona y otra con las descripciones de tu trabajo. El usuario ingresará texto y la aplicación buscará cada elemento en ambas listas para una coincidencia. Si hay una coincidencia, el nombre de la científica aparecerá en una vista de lista. El usuario puede seleccionar a qué científica quiere obtener más información y se abrirá una nueva pantalla con la descripción de tu trabajo. Para esta aplicación, tuvimos que usar un TinyDB para almacenar los datos para poder usarlos en pantallas separadas.

&nbsp;
<table>
<tbody>
<tr>
<td style="text-align: right"><b>Nombre (Tag)</b></td>
<td><b>Discripción</b></td>
</tr>
<tr>
<td style="text-align: right">Ada Lovelace</td>
<td>Ada era una matemática y escritora inglesa, que vivió en la década de 1800 y es conocida por su trabajo en la computadora mecánica de propósito general temprana de Charles Babbage, el Motor Analítico. A menudo se acredita a Ada como la primera programadora porque escribió el primer algoritmo destinado a ser llevado a cabo por una máquina.</td>
</tr>
<tr>
<td style="text-align: right">Marie Curie</td>
<td>Marie era una física y una química que nació en Varsovia, Polonia en 1867. Con su esposo Pierre, descubrió dos nuevos elementos radiactivos. Marie ganó el premio Nobel de física en 1903. También descubrió que el gas de radio podría usarse para el tratamiento del cáncer.</td>
</tr>
<tr>
<td style="text-align: right">Alice Ball</td>
<td>Alice era una química nacida en Seattle en 1892. Ella fue la primera afroamericana y la primera mujer en graduarse de la Universidad de Hawai. Con solo 23 años, Alice desarrolló una cura para la lepra, que antes de su trabajo parecía una enfermedad sin esperanza.</td>
</tr>
<tr>
<td style="text-align: right">Sau Lan Wu</td>
<td>Sau Lan es un físico de partículas que nació a principios de la década de 1940 durante la ocupación japonesa de Hong Kong. Obtuvo su doctorado en Harvard. Ella dirigió al equipo que descubrió el <a href="https://es.wikipedia.org/wiki/Gluon">gluón</a>. Ella es una de las físicas de partículas más importantes en su campo y ha realizado muchos descubrimientos innovadores.</td>
</tr>
<tr>
<td style="text-align: right">Patricia Bath</td>
<td>Patricia es una oftalmóloga e inventora que nació en 1942 en Harlem, Nueva York. Terminó la escuela secundaria en solo 2 años y medio y sabía que quería ser doctora. En 1985 terminó una invención que elimina las cataratas y restaura la vista de las personas en todo el mundo.</td>
</tr>
</tbody>
</table>
<h3>Diseñando la Pantalla</h3>
Nuestros usuarios necesitan ingresar texto para buscar, entonces vamos a agregar un cuadro de texto para que el usuario ingrese su búsqueda y un botón para que ellos hagan clic una vez que hayan terminado. Sabemos que vamos a almacenar nuestros datos en una base de datos, por lo que arrastramos un <strong>TinyDB</strong> a la pantalla. También sabemos que utilizaremos listas, por lo que agregamos una vista de <strong>lista a la pantalla (listview). </strong>
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image17-1024x553.png" alt="image17" width="1024" height="553" /></h1>
<h3>Agregando Datos a su Base de Datos</h3>
Decidimos agregar el nombre de la científica como la etiqueta y la descripción de su trabajo como el valor de la base de datos. Agregamos la información a la base de datos de esta manera:
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image37-1024x580.png" alt="image37" width="497" height="282" /></h1>
Agregamos esta información a la base de datos cuando la pantalla se inicializa, por lo que es lo primero que hace nuestra aplicación. Necesitamos usar una base de datos para compartir información entre pantallas. En App Inventor, las dos únicas formas de pasar datos entre pantallas es mediante el uso de una base de datos o el bloque startValue. Verá cómo funcionan ambos métodos en estas instrucciones. Puedes leer más sobre esto <a href="http://appinventor.mit.edu/explore/ai2/concepts.html#Screens">aquí</a>.
<h3>Creación de listas de nombres de etiquetas y valores de base de datos</h3>
Creamos una lista para almacenar los nombres de las etiquetas. Primero creamos una lista vacía llamada "TagNames". A continuación, agregamos bloques para agregar cada uno de nuestros nombres de etiquetas a esta lista. Nos aseguramos de que los nombres de las etiquetas que se agregaban a la lista coincidieran exactamente con los nombres de las etiquetas en la base de datos, incluidas todas las letras mayúsculas.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image58-1024x548.png" alt="image58" width="849" height="455" />

Ahora que tenemos una lista completa con todos nuestros nombres de etiquetas, necesitamos crear otra lista que contenga todos los valores en la base de datos. Es importante que estén en el mismo orden que los nombres de las etiquetas. Primero, creamos una lista vacía para contener todos los valores de la base de datos llamados "databaseValues". A continuación, agregamos cada valor a la lista en el mismo orden que la etiqueta que le corresponde utilizando un ciclo for. Para cada elemento en la lista "tagNames", agregamos el valor de la base de datos a la lista "databaseValues". Luego agregamos esto para el ciclo al controlador de eventos cuando <strong>Screen1.Initialize.</strong>
<h1><img src="http://technovationchallenge.org/wp-content/uploads/2016/11/DBvar.png" alt="" width="419" height="42" /></h1>
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image42-1024x314.png" alt="image42" width="600" height="184" /></h1>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image50-1024x470.png" alt="image50" width="650" height="298" />
<h3>Check point #1</h3>
En este punto, debe tener todos sus datos en su base de datos, así como una lista con sus nombres de etiquetas y una lista con los valores de su base de datos. ¡Asegúrese de que cada una de sus listas contenga los valores que desea! Como su aplicación aún no hace nada, puede verificar su trabajo mostrando sus listas en su ListView y asegurándose de que todo esté allí. Agregue este bloque a su código debajo de su ciclo for en su controlador de eventos <strong>Screen1.Initialize</strong> para verificar que su lista "tagNames" sea precisa.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image00-1024x90.png" alt="image00" width="418" height="37" />

Agregue este bloque a tu código debajo de su ciclo <strong>for</strong> dentro de tu controlador de eventos <strong>cuando Screen1.Initialize</strong>  para verificar que tu lista "databaseVales" sea precisa.
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image48-1024x78.png" alt="image48" width="456" height="35" /></h1>
¡Después de asegurarse de que sus listas sean precisas, asegúrese de eliminar estos bloques!
<h3>Programando el botón de búsqueda</h3>
Queremos que nuestro usuario pueda buscar en nuestra base de datos ingresando texto en el cuadro de texto y presionando el botón "buscar". Para ello, vamos a colocar un controlador de eventos en el botón de búsqueda que examinará cada elemento tanto en la lista "tagName" como en la lista "databaseValues" para cadenas que coincidan con lo que el usuario ingresó en el cuadro de texto. Si hay una coincidencia, agregaremos el nombre del científico a la vista de lista. Así es como lo hicimos.

Primero, creamos una lista vacía llamada "searchResults".

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image03-1-1024x88.png" alt="image03" width="439" height="38" />

A continuación, agregamos un manejador de eventos al botón de búsqueda. En su interior, agregamos un bloque para volver a establecer los resultados de búsqueda como una lista vacía. Esto se debe a que cada vez que el usuario acceda a "buscar", deseamos borrar los elementos que se hayan agregado a "searchResults" en la última búsqueda.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image02-1024x183.png" alt="image02" width="441" height="79" />

A continuación, configuramos un ciclo <strong>for</strong> que busca cada elemento en la lista "tagName" y en la lista "databaseValue". No usamos el <strong>para cada</strong> (<strong>for each)</strong> ciclo porque estamos buscando a través de dos listas y queríamos usar la variable de conteo en el ciclo <strong>for</strong> para hacerlo. Iniciamos el ciclo <strong>for</strong> en "1" y lo terminamos en la cantidad de elementos en la lista tagNames. Cambiamos el nombre de la variable a índice, ya que se usará como índice con cada una de las listas.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image54-1024x383.png" alt="image54" width="519" height="194" />

Este es el bloque que utilizamos para comparar el texto que el usuario buscó en el cuadro de texto para mostrar elementos en "tagNames". La variable "índice" aumenta en 1 cada vez que se repite el ciclo, por lo que eventualmente comparará el texto del cuadro de texto con cada elemento de la lista "tagNames". Elegimos hacer que todo se reduzca para que la búsqueda no distinga entre mayúsculas y minúsculas. El bloque "contiene texto" devuelve verdadero si la pieza aparece en el texto y falso si no lo hace.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image28-1024x172.png" alt="image28" width="508" height="85" />

Para comparar la búsqueda del usuario con "databaseValues", usamos los mismos bloques excepto para cambiar el nombre de la lista.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image51-1024x161.png" alt="image51" width="585" height="92" />

<em>Nota: el índice es la variable de contador, por lo que es una variable local que solo se puede usar dentro del ciclo <strong>for</strong>. Para que aparezca en el menú desplegable de variables disponibles, deberá colocar el bloque dentro del ciclo for. No te preocupes donde colocas los bloques, siempre puedes moverlos después.</em>

Queremos mostrarle al usuario las mujeres científicas cuyo nombre o descripción coincide con la búsqueda del usuario. Para hacer esto utilizó una operación <strong>or</strong> de condicional lógica.
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image05.png" alt="image05" width="215" height="93" /></h1>
Así es como se ve con el código con el operador <strong>or</strong> ingresado:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image10-1024x223.png" alt="image10" width="1024" height="223" />

Queremos que nuestro código agregue el nombre de las mujeres científicas a la lista "searchResults" si su nombre o su descripción coinciden con los términos de búsqueda del usuario. Para hacer esto, cuando hay una coincidencia, agregamos el nombre de tagNames usando la variable de ciclo "index". No agregamos ningún otro elemento a nuestra declaración condicional porque si el nombre o la descripción no coinciden, queremos que nuestro código no haga nada. Luego agregamos los elementos en la lista "searchResults" a ListView. Como este bloque está fuera del ciclo for, nuestro código solo actualiza el ListView después de que el ciclo haya finalizado.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image39-1024x302.png" alt="image39" width="1024" height="302" />
<h3><b>Check Point #2</b></h3>
¡Acabas de escribir un montón de código! Verifica tu código para asegurarte de que puedes buscar algo. Intenta buscar un nombre, como "Alicia" o una ocupación como "químico". ¡Asegúrate de obtener los resultados que esperabas obtener antes de continuar!
<h3>Mostrar los resultados de búsqueda en una nueva pantalla</h3>
Decidimos que nuestra aplicación sería mejor si el usuario seleccionara a las científicas que aparece  en los resultados de búsqueda para obtener más información sobre ella. Para hacer esto, cuando el usuario escogió algo de la lista, abrimos una nueva pantalla con un startValue de la selección del usuario. Recuerde, las únicas dos maneras de pasar datos entre pantallas es usando una base de datos o un bloque <strong>startValue</strong>.
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image31.png" alt="image31" width="597" height="108" /></h1>
Diseñamos nuestra segunda pantalla con dos etiquetas. Uno para mostrar el nombre del científico y otro para mostrar su descripción. También agregamos un botón Atrás para volver a la Pantalla1. ¡No olvides que también necesita agregar un TinyDB a esta pantalla!

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image56-1024x509.png" alt="image56" width="1024" height="509" />

Dado que el valor de inicio es el nombre de la científica, mostramos el valor de inicio en Label1 y también lo usamos para recuperar la descripción de la científica de la base de datos para mostrarla en Label2. Puedes encontrar el bloque de valor de inicio en la categoría de <em>control</em>.
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image06.png" alt="image06" width="636" height="175" /></h1>
¡No olvides programar tu botón Atrás (Back) para regresar a la primera pantalla!
<h1><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/image11-1024x198.png" alt="image11" width="471" height="91" /></h1>
Cuando el usuario regresa, Screen1 se inicializa de nuevo y todo vuelve a empezar.

&nbsp;
<h3>Punto Final</h3>
¡Asegúrate de que todo en tu aplicación esté funcionando! ¿La selección de un elemento en el ListView lo lleva a la Pantalla2 y muestra el nombre de la etiqueta y el valor de la base de datos?

¿Todavía estancada? Descargue nuestro código fuente Aquí hay <a href="http://appinventor.mit.edu/explore/ai2/share.html">instrucciones</a> sobre cómo descargar y usar códigos fuente.

<a href="https://drive.google.com/file/d/0B9HV58UviqU_YXU1eTBKMDN1ZVE/view">Descargue el código fuente</a>

<a role="button" href="https://drive.google.com/file/d/0B9HV58UviqU_YXU1eTBKMDN1ZVE/view" target="_blank" rel="noopener"> </a>
