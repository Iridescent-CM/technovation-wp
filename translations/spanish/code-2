<h1>
		Code 2<br />
	</h1>
<h1>
		Data and Variables<br />
	</h1>
<ul>
<li>
			<a href="#data">Data</a>
		</li>
<li>
			<a href="#types">Data Types</a>
		</li>
<li>
			<a href="#variables">Variables</a>
		</li>
<li>
			<a href="#localglobal">Local and Global Variables</a>
		</li>
<li>
			<a href="#lists">Lists</a>
		</li>
<li>
			<a href="#databases">Databases</a>
		</li>
<li>
			<a href="#challenge">Code Challenge</a>
		</li>
<li>
			<a href="#reflect">Reflect</a>
		</li>
</ul>
<h2><b>Learning Objectives:</b></h2>
<p>In this module, you will...</p>
<ul>
<li style="font-weight: 400;">Learn about data and different data types</li>
<li style="font-weight: 400;">Learn how to use variables and databases</li>
<li style="font-weight: 400;">Learn to organize data into lists</li>
<li style="font-weight: 400;">Create a to-do list app that connects to a database</li>
</ul>
<p>This unit contains a lot of information, and it is okay if you don’t understand it all right now. The best way to understand coding concepts is by working through the Code Challenges to see them in action! You can always refer back to this unit anytime you get stuck building your final app.</p>
<h3>Data</h3>
<p>At some point in your life, you’ve probably heard the word <b>data. </b>Data can mean a lot of things, but in computer science, <b>data</b> is the information that your app needs in order to work. To better understand this, let’s think about some apps and some of the information that they need in order to work.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image10.png" alt="WhatsApp logo" width="46" height="46" /></p>
<p style="text-align: center;"><strong>WhatsApp</strong></p>
<p style="text-align: center;">This social app can message and call contacts. The data it needs is:</p>
<ul>
<li>Your username</li>
<li>Your friends' usernames</li>
<li>Messages you want to send</li>
<li>The time</li>
<li>Your location</li>
</ul>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image32.jpg" alt="Angry Birds logo" width="46" height="46" /></p>
<p style="text-align: center;"><strong>Angry Birds</strong></p>
<p style="text-align: center;">In this game app you shoot birds at pigs to defeat them. The data it needs is:</p>
<ul>
<li style="text-align: left;">Your score</li>
<li style="text-align: left;">How many points each object is worth</li>
<li style="text-align: left;">What levels you've completed</li>
<li style="text-align: left;">How many birds you get in each level</li>
</ul>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/cropped-R-fullcolor-1.png" alt="Technovation logo" width="46" height="46" /></p>
<p style="text-align: center;"><strong>Slideshow Challenge App</strong></p>
<p style="text-align: center;">This is the app you made in the <a href="http://www.technovationchallenge.org/curriculum/coding-unit-1/" target="_blank">Code 1 Challenge</a>. The data it needs is:</p>
<ul>
<li style="text-align: left;">Your favorite images</li>
</ul>
<p>The programmer needs to set up ways for the app to get all the information it needs. <i>Remember</i>, computers can’t do anything on their own without instructions. Here are a few ways that apps in App Inventor can get data to use:</p>
<ol>
<li>The <strong>programmer</strong> put the information in:
<ul>
<li>In your slideshow app, you (the programmer) entered in your favorite images.</li>
<li>In Angry Birds, the programmer entered in how many birds the player gets on each level.</li>
</ul>
</li>
<li>The <strong>user</strong> enters the information:
<ul>
<li>In WhatsApp, the user needs to tell the app what she wants to send and who she wants to send it to.</li>
</ul>
</li>
<li>The <strong>app</strong> connects to another place to get information:
<ul>
<li>WhatsApp connects to your phone to get the time so it knows what time you sent a message.</li>
</ul>
</li>
</ol>
<p>Sometimes an app will save information the user put in. For example, WhatsApp saves message history which allows you to see the last message you sent to a friend. To do this in, the programmer uses a <strong>database</strong><i>, </i>which you will learn about in this lesson.  You will learn more about how to connect to other places to get information later.</p>
<h3>Thought Exercise</h3>
<p>If you were using an app that helps you find the nearest grocery store, what data do you think the app needs to have?</p>
<h3>Data Types</h3>
<p>As you saw in the section above, data can be a lot of things! To make it easier for computers to understand what to do with the data they are given, data is put into categories. This is known as a <b>data type.</b> Programming languages revolve around three major data types: numbers, strings, and booleans. App Inventor also lets you use more complex data types such as colors and images. You don’t need to do anything with data types you'll learn about in this section but it will be good to keep them in mind as you code more.</p>
<h5>Numbers</h5>
<p>A number data type is just what you think it is! In App Inventor,  you can use numbers by clicking on going to Math in <i>blocks.</i></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image30.png" width="712" height="40" /></p>
<p>You will use Math blocks whenever you need to use numbers. Here are some examples of when you might use a number data type in your app.</p>
<ul>
<li style="font-weight: 400;">Calculating a player’s score in a game</li>
<li style="font-weight: 400;">Counting how many times a user has tried to log in</li>
<li style="font-weight: 400;">Counting how many times you want your app to do something</li>
<li style="font-weight: 400;">Checking to see if your user is a certain age</li>
</ul>
<p>To learn more about all the things you can do with math blocks check out MIT’s website: <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/math.html" target="_blank">Math blocks</a></p>
<h5>Strings</h5>
<p>A string data type is text. In App Inventor, you can create a string by going to Text in <i>Blocks.</i> Here are some the text blocks you can use.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image20.png" width="815" height="100" /></p>
<p>You should use a string anytime you want to add a text field to your code.  Here are some examples of when you might use a string data type in your app.</p>
<ul>
<li style="font-weight: 400;">Allowing the the user to enter a password or username</li>
<li style="font-weight: 400;">Having the app speak words to the user</li>
<li style="font-weight: 400;">Showing a message or an alert to the user</li>
<li style="font-weight: 400;">Programming the app to open a new screen by giving it the screen name</li>
</ul>
<p>Before moving on check out MIT’s website to see all the things you can do with text: <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/text.html#string" target="_blank">Text blocks</a></p>
<h5>Booleans</h5>
<p>A boolean can be one of two values: true or false. True basically means “yes” and false basically means “no”. To get a boolean, go to logic in the built in functions and grab one of these blocks: </p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image27.png" width="347" height="39" /></p>
<p>For now, there is not much to do with booleans other than keep them in mind. Booleans and logic will be covered in more detail in <a href="/?p=17114" target="_blank">Code 3: Logic, Loops and Conditionals</a>.</p>
<h3>Variables</h3>
<p>One of the most important concepts in coding is a <b>variable</b>. A variable is a name for a piece of data that can change in value. An easy way to remember this is that a <i>variable</i> can <i>vary, </i>or <i>change</i> in value. There’s lots of information that is important to you every day that changes value. Here are some examples:</p>
<ul>
<li style="font-weight: 400;">Your age</li>
<li style="font-weight: 400;">Your height</li>
<li style="font-weight: 400;">Your location </li>
<li style="font-weight: 400;">Today’s date</li>
</ul>
<p>To better understand variables and how to use them in App Inventor, let’s walk through an example. Imagine you are creating a game where the user can earn and lose points. You want to have a score for the player to see in a text box. At the start of the game, the player has zero points so you added a block like this to the game.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image16.png" width="316" height="56" /></p>
<p>The player sees zero in the textbox that contains her score. However, the player’s score will change as she plays the game. Each time she gains or loses points you have to update the text box. When she gets more points, you add a block like this.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image22.png" width="326" height="43" /></p>
<p>That works, but now what about the next time the player earns 10 points?  You’ll have to update the text again to say 20. Then what if the player loses points? You will have to change her score to 15. What if she gains points again? This can get confusing really fast.</p>
<p>In scenarios like this, you can create a <b>variable </b>to keep track of the player’s score<b>.</b> You can create a variable called <i>score</i> that always has the value of the player’s current score. As she plays the game, you can add and subtract points from <i>score</i> and you won’t need to worry about keeping track of what the her current score actually is. Here’s how it would work in App Inventor. First you would grab this block from the variables section.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image13.png" width="245" height="65" /></p>
<p>This block tells the app that there will be a variable and asks you to give the variable a name and a value. Here’s what the block would look like for a game where the player's score started at zero.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image28.png" width="284" height="51" /></p>
<p>With this block, you are telling the app that there will be a piece of data called <i>score </i>and that it will change value as the game is played. Every time the app starts up, it is going to create a variable called <i>score</i> and set it zero. Now you can do what’s called “set” and “get” your <i>score</i> variable. “Get” will allow you to see what the value of the score is. Here’s how you would tell your app to display the score in a textbox.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image17.png" width="476" height="45" /></p>
<p>“Set” allows you assign a new value for your user’s score. Every time the player earns points you can tell the app to do this.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image19.png" width="508" height="61" /></p>
<p>This tells your app to change the value of the score to whatever it is now and add ten to it. If the current score is zero, the new score would be 10. If the current score is 25, the new score would be 35. Now you don’t have to worry about reassigning the score every time your player gains or loses points. The app will just take the current score and add 10 to it. </p>
<p>It is okay if you are still confused about variables! They are really hard to understand and the best way to understand them is by using them. You will use them in the coding challenge at the end of this unit and again over the next few coding units.</p>
<h3>Thought Exercise</h3>
<p>Pick one of your favorite apps and identify at least three spots where you think the app creators used variables.</p>
<h3>Local and Global Variables</h3>
<p>You may have noticed in the section above that the variable block said “global”. There are two types of variables, <b>local variables</b> and <b>global variables</b>. When you create variables, you’ll have to think about whether you want to use the variable at multiple places in your code, such as the <i>score</i> variable from above, or if you want to use it in just one place.  </p>
<p><b>Global</b> <b>variables</b> can be used anywhere. Like you saw above, the <i>score</i> variable needed to be used multiple times. You had to use it when the player earned points, when the player lost points, and to display it in the textbox. It could also be used for a high-score table. You can never reuse a name when using a global variable. If you did, your app won’t know which variable to use. Luckily App Inventor won’t allow you to create two variables with the same name.  If you’re in doubt of which variable type to use, use global.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image15.gif" /></p>
<p><b>Local variables</b> can only be used at one spot in your code. If you need a variable to keep track of something in just one place, use a local variable. The local variable will only be able to be used inside the “local variable” block and App Inventor won’t let you use it outside of it. Unlike global variables, you can reuse the names of local variables.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image34.gif" /></p>
<p>In the coding challenge, you’ll see examples of when to use global variables and when to use local variables. To learn more about global and local variables visit MIT’s website: <a href="http://appinventor.mit.edu/explore/ai2/support/concepts/variables.html" target="_blank">Global and Local Variables</a>.</p>
<h3>Lists</h3>
<p>There’s so much information out there in the world, it can get really confusing! Luckily we have ways of organizing data so that we can easily find it and use it. Can you think of any examples of how you organize information and objects in your life? Here are some examples of things you might do to organize things:</p>
<ul>
<li>Put a friend’s phone numbers in a contact list</li>
<li>Put pencils in a pencil box</li>
<li>Put clothes in a closet</li>
</ul>
<p>Programmers uses lists to organize data in their programs.  Lists can hold multiple pieces of data and they’re easy to get data from. You may have made a to-do list or a grocery list before, and lists in programming are very similar. In App Inventor, you can go to blocks and select “lists”. List look like this:</p>
<p>	<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/MakeaList.png" alt="makealist" width="160" height="70" /> <br />
	<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/ItemList.png" alt="itemlist" width="254" height="122" /></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Number-List.png" alt="number-list" width="194" height="119" /></p>
<h3></h3>
<p>Lists are really useful for holding a lot of information. Each thing in a list has an <i>index</i>, which is a number that tells you where it is in the list. The first item in a list will have an index of 1, the second item in a list will have an index of 2 and so on. Here's an example:</p>
<p>				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image33.png" alt="fruit list" itemprop="image"  /></p>
<p>Here is how your app sees this information:</p>
<p><b>List Name: Fruits</b></p>
<ul>
<li>Apples (Index = 1)</li>
<li style="font-weight: 400;">Bananas (Index = 2)</li>
<li style="font-weight: 400;">Oranges (Index = 3)</li>
</ul>
<p>You can get one thing from a list instead of using the whole list. If you wanted to just put the string “bananas” into a textbox instead of the entire list, you would need to tell your app to look at index 2 in this list. Here’s how you would put “bananas” into a textbox using App Inventor, from the list shown above:</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image25.png" width="516" height="60" /></p>
<p>You can also add, remove, and replace things in lists. Let’s say you forgot to add “kiwis” and “grapes” to your fruit list. You could add them like this:</p>
<p>				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image37.png" alt="add to list" itemprop="image"  /></p>
<p>Now your app will see your list like this:</p>
<p><b>List Name: Fruits</b></p>
<ul>
<li style="font-weight: 400;">Apples (Index = 1)</li>
<li style="font-weight: 400;">Bananas (Index = 2)</li>
<li style="font-weight: 400;">Oranges (Index = 3)</li>
<li style="font-weight: 400;">Kiwis (Index = 4)</li>
<li style="font-weight: 400;">Grapes (Index = 5)</li>
</ul>
<p>You should use lists anytime you have multiple pieces of information that you want to include under the same variable name. For example, if you wanted to display the top ten high scores for a game, you could make ten variables with names like HighScore1, HighScore2, HighScore3 and so on until you get to HighScore10.</p>
<p>The easier way to do this would be to make a list called HighScores that contains the ten high scores and then display them by using their indexes. Using a list would also allow you to replace and add more high scores more easily and would save you a lot of time!</p>
<p>				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image05.png" alt="highscore1" itemprop="image"  /><br />
				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Arrow.png" alt="arrow" itemprop="image"  /><br />
				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image31.png" alt="highscore2" itemprop="image"  /></p>
<p>Check out MIT’s website for more information on <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/lists.html#string" target="_blank">lists</a>.</p>
<p><em>Note: In many programming languages, lists are called arrays. and indexes start at 0, not at 1. Make sure to check the rules when learning a new programming language!</em></p>
<h3>Databases</h3>
<p>Variables are great for storing information while your user is using your app, but what if you wanted to store information between the times when your user opens and closes her app? You can do this with a <b>database. </b>Databases can store information for later use, even when the app is closed! You can think of databases as a place to store information you can recall later. Here are some examples of databases you may use every day:</p>
<ul>
<li>Contact list - you store your friend’s phone numbers so you can use them later</li>
<li>Messaging app - most messaging apps automatically store old messages so you can reread them later</li>
<li>Notebook - you write things down and read them later</li>
</ul>
<p>In App Inventor, the component <strong>TinyDB</strong> allows you to save data on your user’s phone that will be there each time she logs into your app. It is important to know that TinyDB only allows you to store data <i>locally</i>. This means that two users cannot share data with the same TinyDB. When a user stores data into TinyDB, it will only be available on her phone, and no one else's. You will learn how to share information between phones in <a href="/?p=17673" target="_blank">Code 4: Using Mobile Features &amp; Connecting to the Web</a>.</p>
<p>To use TinyDB, drag it onto your screen in the <i>designer</i> side of App Inventor. You can find it under the storage menu. It will appear as a non visible component and will look like this:</p>
<p>				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image36.png" alt="TinyDB" itemprop="image"  /></p>
<p>You can talk to your TinyDB by making <i>calls</i> to it. When you make a call, you can <i>store </i>things and <i>get </i>things from it. The way you store data in TinyDB is by giving it a tag. The tag is a name that you will use to retrieve the data. It is a lot like a variable name. If you use the same tag name to store data twice, the database will overwrite, or erase, the old data with the new data. This can be useful if you need to update what’s in your database but you should be careful never to repeat tag names otherwise! Here’s a few examples of how to make calls to TinyDB:</p>
<p>				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image04.png" alt="TinyDB store global fruits" itemprop="image"  /><br />
				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-09-23-at-3.24.29-PM.png" alt="screen-shot-2016-09-23-at-3-24-29-pm" itemprop="image"  /></p>
<p>The first block shows how to store values in TinyDB. In this case we stored our <i>fruits</i> list from earlier with the tag “Food”. The second block shows how to retrieve the <i>fruits</i> list from the database.  The tag needs to be typed exactly as it was when the data was stored, including all capital letters. </p>
<p>To better understand this, let’s walk through an example. Let’s say you needed to store three things in a database for later use. One is our <i>Fruits</i> lists from the last section, one of them is your age, and the other is a list of your favorite things to do. You make three to calls to the database like this:</p>
<p>				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image04.png" alt="TinyDB store global fruits" itemprop="image"  /><br />
				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image00-1.png" alt="Tiny DB my age" itemprop="image"  /><br />
				<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image24.png" alt="TinyDB store favorites list" itemprop="image"  /></p>
<p>You now have three entries in you database, and this what they look like:</p>
<p>Tag Name: “Food”</p>
<p>Data:</p>
<ul>
<li>“Apples” (index = 1)</li>
<li>“Bananas” (index =2)</li>
<li>“Oranges” (index = 3)</li>
</ul>
<p>Tag Name: “My Age”</p>
<p>Data:</p>
<ul>
<li>16</li>
</ul>
<p>Tag Name: “Favorite”</p>
<p>Data:</p>
<ul>
<li>“Learn how to Code” (index = 1)</li>
<li>“Visit Family” (index = 2)</li>
<li>“Listen to Music” (index =3)</li>
</ul>
<p>Now, when you want to retrieve your favorite things to do, so you make a call like this:</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image26.png" alt="TinyDB favorites value not tagged" width="371" height="98" /></p>
<p>When you use this block you will get “Learn how to Code Visit Family Listen to Music”. Now let's say you want to retrieve your age, so you make a call like this:</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image12.png" alt="TinyDB my age value tag if not there" width="351" height="96" /></p>
<p>When you use this block you just get a blank string: “ ”. This is because the tag “myage” does not exist in your database! However, the tag “MyAge” does exists. Since your database did not recognize the tag, it defaulted to show you the block next to "valueIfTagNotThere", which is a blank string. You can make this string say anything you want. You can even make it be an error message to your user.</p>
<p>If you create an app with multiple screens (like your slideshow app), components and variables will not be able to talk to each other between each screen. You will need to use a TinyDB in order to transfer information from one screen of your app to another. Visit this page for more information: <a href="http://appinventor.mit.edu/explore/ai2/concepts.html#Screens" target="_blank">MIT Screens</a>.</p>
<p>Congratulations on completing all of the content in this unit! It was a lot of information, so it’s okay if you don’t understand everything right now. You can always refer back to this unit when you are building your app. The Code Challenge is meant to incorporate everything you’ve learned so far, so give it a try!</p>
<h2>
		Code 2 Challenge: Make a To-Do List<br />
	</h2>
<p>Description: Make a to-do list that allows users to enter in and remove items. Your app should remember the items each time your user opens the app. You may want to learn how to use a <a href="http://ai2.appinventor.mit.edu/reference/components/userinterface.html#ListView" target="_blank">ListView</a> before trying the challenge!</p>
<p>Try your hardest to do this challenge on your own before you read the instructions. Remember, these instructions are just one way the challenge can be solved! You can also download our example app in the Google Play Store. Happy coding!</p>
<p>	<a href="/?p=16947" target="_blank" role="button"><br />
					See the instructions<br />
			</a><br />
	<a href="https://play.google.com/store/apps/details?id=appinventor.ai_alliec.ToDoList&hl=en" target="_blank" role="button"><br />
					Download the example app<br />
			</a></p>
<h3>
		Reflect<br />
	</h3>
<p>In this lesson, we covered a lot! You learned about all different data types and different ways to store and organize them. Here are some reflection questions for you to discuss with your mentor:</p>
<p><strong>Q1:</strong> How does the information you learned in this lesson change the way you see apps you use every day?</p>
<p><strong>Q2:</strong> What are some things from this lesson that you think will be useful in creating your app? </p>
<p>In this section you learned the following keywords:</p>
<ul>
<li style="font-weight: 400;">Data - Information that your app uses</li>
<li style="font-weight: 400;">Data Type - The way data is categorized</li>
<li style="font-weight: 400;">Number - A data type that is a number</li>
<li style="font-weight: 400;">String - A data type that is text</li>
<li style="font-weight: 400;">Boolean - A data type that is true or false</li>
<li style="font-weight: 400;">Variable -  A name for a piece of data that can change</li>
<li style="font-weight: 400;">Global Variable - A variable that can be used at any point in your code</li>
<li style="font-weight: 400;">Local Variable - A variable that is only used in a certain section of code</li>
<li style="font-weight: 400;">List - A way of organizing multiple pieces of data</li>
<li style="font-weight: 400;">List Index - A number that represents where data is in a list</li>
<li style="font-weight: 400;">Database - A place to store and organize information</li>
</ul>
<h3>Additional Resources</h3>
<p>Here are some additional resources on databases. You can use these now or if you need help when building your app!</p>
<ul>
<li style="font-weight: 400;"><a href="https://drive.google.com/a/iridescentlearning.org/file/d/0B3rEYL3DkWfAd003UmM2cl9ITDg/view" target="_blank">TinyDB101</a></li>
<li style="font-weight: 400;"><a href="https://drive.google.com/a/iridescentlearning.org/file/d/0B3rEYL3DkWfAZUVQVGxPZzdXTXc/view" target="_blank">TinyDB102</a></li>
</ul>
