<h1>Programación 6</h1>
<em>Nota: todo los recursos con un * están en inglés*</em>
<h2>Planeando Tu Código</h2>
<ul>
 	<li><a href="#pseudo">Pseudo código</a></li>
 	<li><a href="#activity1">Actividad</a></li>
 	<li><a href="#flow">Díagrama de Flujo </a></li>
 	<li><a href="#activity2">Actividad</a></li>
 	<li><a href="#pair">Programción en Pareja </a></li>
 	<li><a href="#time">Manejo de Tiempo </a></li>
 	<li><a href="#reflect">Reflexión</a></li>
</ul>
<h3>Objetivos de Aprendizaje:</h3>
En esta unidad, aprendarás…
<ul>
 	<li style="font-weight: 400">Cómo planear lo que programarás</li>
 	<li style="font-weight: 400">Maneras de manejar tu proyecto y estructurar tu tiempo</li>
</ul>
<h3><strong>Planificando tu código</strong></h3>
En el capítulo <a href="http://www.technovationchallenge.org/curriculum/code-5/" target="blank"><span style="font-weight: 400;">Programación 5</span></a> planificaste cómo se verá tu aplicación y cómo los usuarios interactuarán con ella. En la siguiente sección, aprenderás dos técnicas para ayudarte a planificar tu código y a pensar en cómo funcionará realmente tu aplicación. ¡Es realmente importante planificar tu código para que puedas descubrir si necesitas aprender algo que no conoces y pensar cómo van a funcionar las cosas antes de llegar a la computadora!

<h3 id="pseudo">Pseudocódigo</h3>
Escribir <strong>pseudocódigo</strong> es una parte importante del proceso de planificación de tu aplicación. El pseudocódigo usa lenguaje sencillo con algún código mezclado para explicar lo que hace tu aplicación. Debes usar los términos de programación que conozcas, como cíclo o condicionales, y cualquier componente de App Inventor que deseas usar, como ListView o botones. No hay muchas reglas sobre cómo escribir pseudocódigos, pero el objetivo es tener una idea de cómo funcionará tu aplicación antes de programarla.

<span style="font-weight: 400;">Veamos un ejemplo del</span> <a href="/?p=25662" target="blank"><span style="font-weight: 400;">Programación 3</span></a>. En esta aplicación, el usuario puede buscar en una base de datos de mujeres científicas. La aplicación muestra los nombres en un ListView y el usuario puede seleccionar una científico para aprender más sobre ella.

<em>Botón de búsqueda</em>
<ul>
 	<li style="font-weight: 400">Cuando el usuario seleciona la búsqueda</li>
 	<li style="font-weight: 400">La aplicación utiliza un cíclo <strong>for</strong> (para) buscar a través de todos los nombres y descripciones almacenados en <strong>TinyDB</strong></li>
 	<li style="font-weight: 400"><strong>Si</strong> hay una coincidencia<b> </b>
<ul>
 	<li style="font-weight: 400">La aplicación agrega el nombre de la científico a una variable de lista vacía llamada <em>searchResults</em></li>
</ul>
</li>
 	<li style="font-weight: 400"><b>Si </b><i>searchResults</i> está vacío después de que termine el ciclo
<ul>
 	<li style="font-weight: 400">La aplicación notifica al usuario que no hay coincidencias</li>
</ul>
</li>
 	<li><b>Else</b>
<ul>
 	<li>La aplicación muestra <em>searchResults</em> en un <strong>ListView</strong></li>
</ul>
</li>
</ul>
<em>Selección Científica</em>
<ul>
 	<li style="font-weight: 400">Cuando el usuario hace una selección de <b>ListView1</b></li>
 	<li style="font-weight: 400">La aplicación abre una <i>Screen2 (pantalla2)</i></li>
 	<li style="font-weight: 400">La aplicación recupera la descripción y el nombre de la  científico de <b>TinyDB</b></li>
 	<li style="font-weight: 400">La aplicación muestra la descripción y el nombre de la científico</li>
</ul>

<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<h3 id="activity1">Actividad</h3>
	Escribe un pseudocódigo para dos controladores de eventos (<em>event handlers</em>)en tu aplicación. Si tienes problemas para descifrar cómo funcionará un controlador de eventos en tu aplicación, ¡puedes pedir ayuda a sus compañeros de equipo o mentores!

	Preguntas que debe hacerse:
	<ul>
	 	<li style="font-weight: 400">¿Cuál es el evento que comienza este código?</li>
	 	<li style="font-weight: 400">¿Tu aplicación necesitará usar algun valor almacenado?
	<ul>
	 	<li style="font-weight: 400">Si es así, ¿dónde se almacenarán los valores?</li>
	</ul>
	</li>
	 	<li style="font-weight: 400">¿Tu aplicación necesitará usar alguna variable? Si es así, ayuda a darles un nombre para hacer un seguimiento de ellos.</li>
	</ul>
</div>
<h3 id="flow"><strong>Diagramas de flujo</strong></h3>
Un diagrama de flujo es un diagrama que representa un algoritmo. Utiliza formas y flechas para mostrar cómo los datos se mueven a través del programa. Siempre se lee de arriba abajo. Los programadores usan diferentes formas para representar diferentes cosas que pueden sucederle a los datos. Aquí hay un ejemplo de un algoritmo para descubrir por qué duele el estómago de alguien:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-1.png" alt="flowchart-1" width="426" height="434" />
&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/terminal.png" alt="terminal" width="139" height="41" />

<p style="text-align: left;">Un <strong>óvalo</strong> muestra dónde comienza y termina el algoritmo En el ejemplo anterior, hay tres lugares diferentes donde el algoritmo puede finalizar, ya sea que la persona necesite comer algo, necesite descansar o necesite ver a un médico. Estos se llaman <strong>terminales</strong></p>.

&nbsp;

<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision.png" alt="decision" width="139" height="76" /></p>

&nbsp;

<p style="text-align: left;"><strong>Un</strong> <strong>diamante</strong> muestra dónde se debe tomar <strong>una</strong> <strong>decisión</strong>. Son como "tenedores en el camino". Esto es siempre que un condicional necesita decidir verdadero o falso para una condición. Dos flechas deberían salir de una decisión, una para verdadero y otra para falso. Observa cómo las flechas salen del diamante en el ejemplo anterior, uno sale del fondo y el otro del lado.</p>

Aquí hay otro ejemplo de diagrama de flujo:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-2-1.png" alt="flowchart-2" width="124" height="281" />

&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process.png" alt="process" width="139" height="41" />

Este diagrama usa <strong>un rectángulo</strong>, que representa un <strong>proceso</strong>. Un proceso es lo que sea que tienes a tu código haciendo. Podría alertar a un usuario, configurar una etiqueta para decir algo o agregar dos números.

Este diagrama de flujo muestra un <strong>ciclo mientras (while)</strong>. La condición y el proceso (en este caso, acceder a una entrada) se repetirán hasta que se cumpla la condición. Hay otro tipo de ciclo que aprendiste en la <a href="http://www.technovationchallenge.org/curriculum/code-3/" target = "_blank"><strong>Programación 3</strong></a>: un ciclo <strong>para (for)</strong>. La condición en un ciclo para (for) es comprobar si el contador ha alcanzado lo suficiente, por lo que el proceso se repetirá un número determinado de veces hasta que se cumpla la condición.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-3-1.png" alt="flowchart-3" width="424" height="314" />

&nbsp;

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/input-1.png" alt="input" width="145" height="41" />

La última forma que debes tener en cuenta es el <strong>paralelogramo</strong>. Debe usar esta forma cada vez que necesite obtener datos de un usuario o de otro lugar, como un sitio web. El paralelogramo es para <strong>entradas (inputs)</strong>.

<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<h3 id="activity2">Actividad</h3>
	En esta actividad, convertirás tu pseudocódigo en un diagrama de flujo. Use el pseudocódigo que creó para la actividad anterior y siga estos pasos.

	&nbsp;
	<ol>
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-16outline.png" alt="terminal oval" width="112" height="36" />Pon un óvalo alrededor del principio y del final de tu controlador de eventos. Esto se llama terminal. A menudo hay más de un final para un diagrama de flujo. En el ejemplo del botón de búsqueda anterior, el controlador de eventos finaliza mostrando los resultados de búsqueda en una <strong>vista de lista (listview)</strong> o notificando al usuario que no hay coincidencias.</li>
	 </ol>
	 <ol start="2">	
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision_1outline.png" alt="conditional diamond" width="112" height="36" />Coloque un diamante donde se debe tomar una decisión. Esto ocurre cuando la aplicación necesita decidir si es verdadera o falsa para una condición. Recuerda, los condicionales pueden conducir a más de una posibilidad para el final.</li>
	</ol>
	<ol start="3">
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-28outline.png" alt="input" width="112" height="36" />
	Agregue un paralelogramo alrededor de todas las entradas en su código o en los lugares donde obtiene datos del usuario u otro lugar, como un sitio web o una base de datos local.</li>
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process_1outline.png" width="112" height="36" /> Pon un rectángulo alrededor de todos los procesos en tu código. Esto ocurre cuando su aplicación está haciendo algo que no está dentro de las categorías anteriores. Esto podría ser agregar elementos a una lista o enviar una alerta al usuario.</li>
	</ol>
	<ol start="5">
	 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/arrow_1outline.png" alt="arrow" height="36" />
	¡Conecta todo junto con flechas! Preste especial atención a la forma en que dibuja las flechas para bucles y condicionales y consulte los ejemplos anteriores si necesita ayuda.</li>
	</ol>
	Tome una fotografía de uno de sus diagramas de flujo e inclúyalo con su presentación para ganar <strong>un</strong> <strong>punto</strong>. ¡No se preocupe si no es exactamente exacto, todo el propósito es ayudar a planificar y aprender algo nuevo! Está bien si su código no coincide con su diagrama de flujo al final de compilar su aplicación, no necesita actualizar su diagrama de flujo.
</div>
<h3 id="pair"><b>Pair Programming</b></h3>
<strong>La programación en pareja</strong> o<em> pair programming</em> se produce cuando dos programadores comparten una única estación de trabajo (una pantalla, teclado y mouse entre el par) y trabajan juntos o se turnan para "conducir" y "navegar". En este escenario, la persona sentada en el teclado o la pantalla táctil es el conductor, y la otra persona es el navegador. El navegador también participa activamente en la tarea de programación, pero se enfoca más en la imagen más grande, responde las preguntas que tiene el conductor y vigila el código para detectar errores. El controlador y el navegador intercambian roles cada cierto tiempo.

Existen ventajas para emparejar la programación, como:
<ul>
 	<li style="font-weight: 400;">Mejor calidad de código ya que el navegador puede verificar el trabajo del controlador.</li>
 	<li style="font-weight: 400;">Mejor comunicación entre los miembros del equipo porque el conductor está proporcionando un comentario continuo sobre lo que está haciendo (o programando en voz alta), y el navegador puede responder o preguntar qué sucede si el controlador está en silencio.</li>
 	<li style="font-weight: 400;">El conocimiento se pu ede compartir y transferir en su equipo, especialmente si una persona es más principiante y otras más avanzadas.</li>
 	<li style="font-weight: 400;">Puede ayudarlo a hacer que su trabajo en equipo sea más eficiente porque el conductor puede ayudar a corregir un error mientras el navegador puede concentrarse en la tarea y ayudar a recuperar el enfoque después.</li>
</ul>
Consejos para la programación de pares:
<ul>
 	<li style="font-weight: 400;">No tengas miedo de decir: "¡Primero probemos tu idea!". A veces, cuando conduces, debes saber cuándo escuchar a tu navegador. El objetivo es utilizar las mejores ideas y llegar a ellas a través de la colaboración y evitar errores.</li>
 	<li style="font-weight: 400;">Aquí hay <a href="https://www.thoughtworks.com/insights/blog/10-ways-improve-your-pairing-experience" target="_blank" rel="noopener"><strong>diez sugerencias*</strong></a> para mejorar la experiencia.</li>
</ul>
<div style="background-color: #421b41; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<blockquote>
	<p style="text-align: center">“Ninguno de nosotros es tan inteligente como todos nosotros."</p>
	</blockquote>
	&nbsp;
	<p align="right">–Ken Blanchard, autor y experto en gestión</p>
</div>
<h3 id="time"> Gestión del tiempo</h3>
En este punto, es posible que tengas preguntas, tales como:
<ul>
 	<li>¿Cómo puedo trabajar de manera eficiente para alcanzar este objetivo y cumplir con la fecha límite?</li>
 	<li>¿Quién probará el prototipo digital y cuándo?</li>
 	<li>¿Cómo voy a saber cuándo tengo un prototipo digital en funcionamiento para enviar?</li>
</ul>
Para ayudarte a lograr que la parte de programación de tu proyecto siga su curso, revisemos las etapas del proceso de desarrollo de software.
<ul>
 	<li>Los usuarios, sus necesidades y un MVP han sido identificados (del <a href="http://www.technovationchallenge.org/curriculum/code-5/" target="_blank" rel="noopener"><strong>Programación</strong> 5)</a></li>
 	<li>Las acciones que los usuarios tomarán en su aplicación se han diseñado con un diagrama de flujo</li>
 	<li>El software es creado</li>
 	<li>Las pruebas de usuario suceden, se identifican errores</li>
 	<li>Los errores se reparan y el equipo se asegura de que la aplicación no contenga errores</li>
 	<li>Si la aplicación funciona sin fallas en un dispositivo móvil y el equipo está satisfecho con el resultado final, entonces está listo para ser compartido</li>
</ul>
Consejos:
<ul>
 	<li>Establecer un horario
<ul>
 	<li>Puedes crear un Diagrama de Gantt para ayudarte a crear un cronograma de cuándo se deben hacer las cosas, y saber si algo depende de que suceda algo más. Aquí hay un ejemplo de cómo se usa un diagrama de Gantt para el desarrollo de software a partir de <a href="http://www.dreamincode.net/forums/topic/60048-creating-a-gantt-chart/" target = "_blank">dreamincode</a>.</li>
</ul>
</li>
 	<li>¡Asigna tareas a los miembros del equipo y establece plazos y recordatorios de objetivos en tus calendarios!
<ul>
 	<li>Si estás utilizando el plan de estudios de 20 semanas, su equipo debería dedicar unas 8 semanas a programar su aplicación</li>
 	<li>Si está utilizando el plan de estudios de 12 semanas, su equipo debería dedicar unas 5 semanas a programar su aplicación</li>
 	<li>Asegúrete de que tu prototipo digital esté listo y listo para ser compartido a más tardar dos días antes de la fecha límite para la presentación de Technovation Challenge, que será el <em><strong>FECHA POR DEFINIR</strong></em>. Esto te ahorrará mucho estrés en caso de que haya problemas.</li>
</ul>
</li>
 	<li>Rompe las tareas en partes más pequeñas y divídelas
<ul>
 	<li>Haga que todos en el equipo trabajen juntos en parejas y aborden diferentes tareas al mismo tiempo. Esto puede ayudar a mover el aspecto de codificación del proyecto más rápido.</li>
</ul>
</li>
 	<li>Priorizar
<ul>
 	<li>Asegúrate de que tu aplicación sea funcional primero, y luego se puede hacer que se vea mejor después. Recuerda, estas enviando un prototipo digital y los jueces estarán interesados ​​en saber que funciona, hace el trabajo y es fácil de usar. Puedes utilizar tu video de demostración y tu plan de negocios para informar a los jueces cuáles son sus planes futuros para la aplicación en términos de las nuevas características que agregaría. En este momento debes enfocarte en MVP.</li>
 	<li>Pídale a tu mentor que te ayude si tienes problemas para priorizar tus tareas</li>
</ul>
</li>
 	<li>Focus
<ul>
 	<li>Apague todos los dispositivos que no estés utilizando activamente durante la reunión de tu equipo o tu tiempo de programación. También puedes silenciar notificaciones y cualquier cosa que te distraiga.</li>
 	<li>Asegúrete de terminar una tarea antes de pasar a la siguiente. La multitarea <em>(multi-taking)</em> no suele ahorrar tiempo. Si trabajas en parejas, el navegador puede ayudarlo a mantenerte enfocada.</li>
</ul>
</li>
</ul>
Aquí está la <a href="http://www.technovationchallenge.org/wp-content/uploads/2017/01/Technical-Checklist-2017.pdf" target = "_blank">Lista de verificación técnic</a>a que los jueces usarán. Puedes usar esto para marcar y explicar los componentes que utilizaste en tu aplicación y asegurarte de obtener los puntajes más altos posibles. Esta parte de la rúbrica del jurado asciende a 10 puntos y los jueces querrán ver que utilizaste cosas como: <em>strings</em>, números, variables, listas, bucles, condicionales, bases de datos y funciones para dispositivos móviles. También puedes obtener puntos por proporcionar imágenes de tu diagrama de flujo, prototipo de papel y capturas de pantalla de la aplicación. Definitivamente es una buena idea documentar tu proceso y guardar todo. Podrás acceder a cosas como las diferentes versiones de tu aplicación, tu diagrama de flujo o tu prototipo en papel en caso de que se pierda algo, para que no pierdas tiempo. También puedes usarlos cuando debata cualquier obstáculo que encuentre para exponer con mayor claridad el problema con tu mentor.
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<h1 id="reflect">Reflexión</h1>
	¡Felicidades! Estás en camino de crear tu aplicación para que estes lista para enviarla a Technovation. Si te ves atorada mucho al codificar tu aplicación, consulte la siguiente unidad de codificación para obtener sugerencias sobre cómo depurar. ¡Buena suerte con tu prototipo digital y en Technovation estamos muy contentas de que hayas llegado tan lejos!
	<h3>Recursos adicionales</h3>
	<ul>
	 	<li style="font-weight: 400"><a style="color: yellow;" href="http://ai2.appinventor.mit.edu/reference/other/testing.html" target="_blank" rel="noopener">MIT Testing Documentation*</a></li>
	</ul>
</div>
