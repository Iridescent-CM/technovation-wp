<h1>Code 3</h1>
<h2>Logic, Loops, and Conditionals</h2>
<ul>
<li><a href="#conditions">Conditions</a></li>
<li><a href="#ifelse">If/Else Statements</a></li>
<li><a href="#act1">Activity 1</a></li>
<li><a href="#elseif">Else/If Statements</a></li>
<li><a href="#act2">Activity 2</a></li>
<li><a href="#andop">Logic: And Operator</a></li>
<li><a href="#orop">Logic: Or Operator</a></li>
<li><a href="#notop">Logic: Not Operator</a></li>
<li><a href="#act3">Activity 3</a></li>
<li><a href="#forloop">For Loops</a></li>
<li><a href="#foreach">For Each Loops</a></li>
<li><a href="#whileloop">While Loops</a></li>
<li><a href="#codechal">Code Challenge</a></li>
</ul>
<h3>სასწავლო ამოცანები:</h3>
<p>ამ თავში, თქვენ ...</p>
<ul>
<li>ისწავლით პირობითი განაცხადის წერის სპეციფიკებს</li>
<li>ისწავლეთ როგორ გამოიყენოთ ლოგიკური ოპერატორები თქვენს კოდში</li>
<li>ისწავლეთ როგორ გამოიყენოთ for და while loops</li>
<li>შექმენით აპლიკაცია, რომელიც ეძებს მონაცემთა ბაზას</li>
</ul>
<p>გილოცავთ, და ქებას იმსახურებთ ბეჯითად შრომისთვის რაც აქამდე გაწიეთ! ეს მართლაც<br />
დიდი თავია, მაგრამ ის შეიცავს ბევრ და მნიშვნელოვან კოდირების კონცეფციებს, რომლებიც აუცილებელია თვენი აპლიკაციის დაპროგრამებისთვის. არ ინერვიულოთ, თუ რაიმე გაუგებარია, რადგან ყოველთვის მოგეცემათ უკან დაბრუნების და ხელახლა გადახედვის საშუალება!</p>
<p>სანამ დაიწყებდეთ ამ თავს, მოდით გადავხედოთ კოდირების წინა თავებში დაფარულ<br />
კონცეფციებს, რომლებიც ამ თავშიც დაგჭირდებათ:</p>
<ul>
<li>ალგორითმები ისეთი ინსტრუქციებია, რომლებსაც ნაბიჯ-ნაბიჯ უნდა მიყვეთ თქვენი<br />
აპლიკაციისთვის</li>
<li>ლოგიკური მონაცემთა ტიპები, ისეთი მონაცემებია, რომლებსაც ორი მნიშვნელობა<br />
აქვს: ჭეშმარიტი ან მცდარი</li>
<li>ღონისძიებების ელფოსტა ეუბნება თქვენს აპს რა უნდა გააკეთოს,<br />
როდესაც რაღაც ხდება.</li>
<li>ცვლადები არის მონაცემების გარკველი ნაწილი, რომელიც შეიძლება შეიცვალოს.</li>
</ul>
<p>სცადეთ ითამაშოთ ეს გასართობი თამაში, ვიდრე ამ თავის შესწავლას შეუდგებოდეთ <a href="https://www.madewithcode.com/projects/robots">Made</a><br />
<a href="https://www.madewithcode.com/projects/robots">With Code Robot</a> . ეს დაგეხმარებათ იმ კონცეფციების აღქმაში, რომელიც უნდა შეისწავლოთ. თუ ამ ეტაპზე ყველა ხუთი დონის გავლა ვერ მოახერხეთ, ხელახლა მიუბრუნდით თამაშს მას მერე, რაც ამ თავს დაასრულებთ!</p>
<h2>პირობები</h2>
<p>თქვენ უკვე იყენებთ ღონისძიებების ელფოსტას! ბოლო ორი კოდირების<br />
გამოწვევაზე, როდესაც თქვენმა მომხმარებელმა დააჭირა ღილაკს, თქვენმა აპლიკაციამ<br />
რაღაც რეაგირება მოახდინა. მაგალითად, აპლიკაციაში, რომელიც მე-2 კოდის გამოწვევაში<br />
გააკეთეთ, enter-ის ღილაკის დაჭერით ტექსტი დაემატა დავალებების სიას. ამ შემთხვევაში<br />
ღონისძიება იყო მომხმარებლის დაწკაპუნება “enter” ღილაკზე, რომლის მეშვეობითაც<br />
აპლიკაციამ დაამატა მომხმარებლის ტექსტი გასაკეთებელ სიას. თქვენი აპლიკაციის კოდმა<br />
ასე იმუშავა:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/Enter-Pressed1-533x1024.png" alt="enter-pressed1" width="99" height="189" /></p>
<p>შენიშნავდით ალბათ, რომ ჩვენი მაგალითის აპლიკაციაში ან თქვენი საკუთარი<br />
,,გასაკეთებელი სიის’’ აპლიკაციაში, მომხმარებელს შეეძლო ცარიელი გრაფის დამატება<br />
სიაში. ამის გამო, მომხმარებელს შეეძლო ჰქონოდა მართლაც გრძელი და ცარიელი სია!</p>
<p>ვთქვათ, არ გინდოდათ, რომ თქვენს მომხმარებელს შეეძლო ცარიელი გრაფის დაამატება<br />
თავიანთი დავალებების სიაზე. ასე რომ, ყოველ ჯერზე, როდესაც მომხმარებელი დააჭერს<br />
enter- ს თქვენ წერთ კოდს, რათა ჰკითხოთ თქვენს აპლიკაციას "მომხმარებლმა შეიყვანა<br />
ტექსტი"? თუ პასუხია- დიახ, მაშინ აპლიკაცია დაამატებს ტექსტს, ,,გასაკეთებელ სიას’’. თუ<br />
პასუხია-არა, მაშინ აპლიკაცია არ დაამატებს ტექსტს. ახლა თქვენი კოდი ასე გამოიყურება:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed2-352x1024.png" alt="enter-pressed2" width="142" height="411" /></p>
<p>ამ შემთხვევაში, "do this" ნიშნავს "დაამატე ტექსტი" და "do that" ნიშნვს "არ დაამატო<br />
არაფერი". ეს პრობლემის მოგვრების კარგი გზაა, მაგრამ გახსოვდეთ, რომ კომპიუტერებს<br />
ფიქრის უნარი არ გააჩნიათ. ასე, რომ ისინი ვერ უპასუხებენ თქვენს ნებისმიერ პირდაპირ<br />
შეკითხვას ისე, როგორც ჩვეულებრივ ადამიანს დაუსვამდით.</p>
<p>კოდირების დროს, როდესაც გსურთ, რომ რაიმე შეკითხვა დაუსვათ თქვენს აპლიკაციას,<br />
თქვენ აპროგრამებთ მას პირობის შესამოწმებლად. პირობას განსაზღვრავს კომპიუტერი<br />
ჭეშმარიტია იგი თუ მცდარი. როდესაც კომპიუტერი პასუხობს, ,,ჭემარიტი’’ ნიშნავს-,,დიახ’’-ს და ,,მცდარ’’ იგივეა, რაც ,,არა’’. თქვენ შეგიძლიათ უთხრათ თქვენს აპლიკაციას სხვადასხვა ბრძანების შესრულება, რაც დამოკიდებულია იმაზე, პირობა ჭეშმარიტია თუ მცდარი. აქ მოცემულია ნიმუში, თუ როგორ ჰკითხოთ თქვენს აპლიკაციას შეიყვანა თუ არა მომხმარებელმა ტექსტი პირობის გამოყენებით:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed3-343x1024.png" alt="enter-pressed3" width="152" height="455" /></p>
<p>გახსოვთ, ლოგიკური ტიპის მონაცემები კოდირების მე-2 თავიდან- მონაცემები (<a href="http://www.technovationchallenge.org/curriculum/coding-unit-2/" target="_blank" rel="noopener">Code 2: Data and Variables</a>) და ცვლადები? ცვლადები არის მონაცემების ტიპი, რომელიც შეიძლება იყოს ჭეშმარიტი ან მცდარი. როდესაც თვენი აპლიკაცია აფასებს პირობას, შედეგი ლოგიკური გამოდის.</p>
<h2>პირობითი განაცხადები</h2>
<h5>"თუობითი" განაცხადები</h5>
<p>ახლა თქვენ იცით, რას ნიშნავს პირობა , მაგრამ როგორ გამოგიყენებთ მას კოდირებისას?<br />
კოდირებისას, თქვენ ეკითხებით თქვენს კომპიუტერს, შეაფასოს პირობები, პირობითი<br />
განაცხადების საშუალებით. პირობითი განაცხადების მეშვეობით, კომპიუტერებს შეუძლიათ გადაწყვეტილებების მიღება. პირობითი განაცხადები ყოველთვის შედგებიან ,,თუ’’ ნაწილით, რომელიც ეუბნება აპლიკაციას თუ რა უნდა გავაკეთოს, როდესაც პირობა არის ჭეშმარიტი. პირობით განაცხადებს ასევე, როგორც წესი, აქვთ ,,სხვა’’ ნაწილი, რომელიც ეუბნება აპს თუ რა უნდა გააკეთოს, როდესაც პირობა მცდარია. თუ გამოტოვებთ ,,სხვა’’ ნაწილს სადაც პირობა მცდარია, მაშინ თქვენი აპლიკაცია არაფერს გააკეთებს. ახლა თქვენი კოდი enter ღილაკზე დაჭერისას ასეთი იქნება:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed4-550x1024.png" alt="enter-pressed4" width="262" height="488" /></p>
<p>აქ ნაჩვენებია, თუ როგორ გამოიყურება პირობითი განაცხადი App Inventor-ში:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-12.05.58-PM.png" alt="screen-shot-2016-11-01-at-12-05-58-pm" width="254" height="161" /></p>
<p>აქ კი ნაჩვენებია თუ როგორ მუშაობს ეს ბლოკები. თქვენ შეგყავთ პირობა if-ის გვერდით .<br />
თქვენ შეგყავთ კოდი, თუ რა უნდა გააკეთოს თქვენმა აპლიკაციამ, თუ პირობა ჭეშმარიტია<br />
then-ის გვერდით. და რისი გაკეთება გსურთ თქვენი აპლიკაციით, თუ პირობა მცდარია else- ის გვერდით. თუ პირობა ჭეშმარიტია, მხოლოდ იმ კოდს შეუძლია მუშაობა, რომელიც then-ის გვერდითაა და ყველა სხვა დანარჩენი კოდი else -ის შემდეგ იგნორირებული იქნება. თუ პირობა მცდარია, კოდი, რომელიც then-ის შემდეგაა, გაუქმებული იქნება და else-ის გვერდით მყოფი კოდი იმუშავებს. იფიქრეთ იმაზე, თუ რას გულისხმობს " If this condition is true then do this, else do this".-,, თუ პირობა ჭეშმარიტია, მაშინ გააკეთე ეს, კიდევ გააკეთე ეს’’.</p>
<p>მოდით დავუბრუნდეთ უკან მაგალითს, რომელიც <a href="http://www.technovationchallenge.org/curriculum/code-2-challenge/">Code Challenge 2</a> -ში გამოიყენეთ. აქ<br />
ნაჩვენებია თუ როგორ გამოიყურება შევსებული სახით პირობები.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/if-statement.png" alt="if-statement" width="463" height="243" /><br />
აქ, როდესაც მომხმარებელი აჭერს ღილაკს "enter", აპლიკაცია შეაფასებს ამ პირობას:<br />
"შეყვანილი ტექსტის სიგრძე textbox-ში არ არის ნულის ტოლი". თუ ეს პირობა ჭეშმარიტია<br />
(ტექსტის სიგრძე ნულის ტოლი არ არის), ეს ნიშნავს, რომ მომხმარებელმა შეიყვანა ტექსტი,<br />
ასე რომ, აპლიკაცია ამ ტექსტს სიაში დაამატებს. თუ პირობა მცდარია (ტექსტის სიგრძე<br />
უდრის ნულს), მაშინ აპლიკაცია იგნორირებას უკეთებს ყველა იმ კოდს, რომელიც then-ის<br />
შემდეგაა და გამოტოვს else, რომელიც აცნობებს მომხმარებელს: "შეიყვანეთ ტექსტი!"</p>
<h2>აქტივობა 1</h2>
<p>შეგიძლიათ მოიფიქროთ რამდენიმე პირობით დამოკიდებული წინადადება, რომელსაც<br />
ყოლევდღიური გადაწყვეტილებების მიღებისას იყენებთ? აქ მოცემულია რამდენიმე ნიმუში, რომელიც მოფიქრებაში დაგეხმარებათ:</p>
<ul>
<li style="font-weight: 400">თუ წვიმს, ქოლგა წაიღე.</li>
<li style="font-weight: 400">თუ გშია, ცოტა წაიხემსე, დანარჩენი მოგვიანებით მიირთვი.</li>
<li style="font-weight: 400">თუ გარეთ ცივა, პიჯაკი მოიტანე.</li>
<li style="font-weight: 400">თუ ავად ხარ, ჯერ ექიმთან წადი და მერე სკოლაში.</li>
</ul>
<h5>თუობითი წინადადებები</h5>
<p>თქვენ უკვე ისწავლეთ როგორ უნდა დაწეროთ პირობითი განაცხადი, რომელიც შეაფასებს<br />
ერთ პირობას და აქვს ორი შესაძლო შედეგი. ამ სექციაში თქვენ გაიგებთ, თუ როგორ უნდა<br />
დაწეროთ პირობითი განაცხადები, რომელიც შეაფასებს ერთზე მეტ პირობას და აქვს ორი<br />
შესაძლო შედეგი.</p>
<p><strong>Else if</strong> საშუალებას გაძლევთ დაამატოთ სხვა პირობა თქვენს პირობით განაცხადს. ეს მეორე<br />
პირობა შეფასდება პირველი პირობის შემდეგ და მხოლოდ იმ შემთხვევაში, თუ პირველი<br />
პირობა მცდარია. თუ მეორეც ასევე მცდარია, მაშინ აპლიკაცია ვერ აღიქვამს <strong>Else</strong> და<br />
ბრძანებას ვერ შეასრულებს. ქვემოთ მოცემულ დიაგრამაში პირობები ლურჯი ფერისაა და<br />
შესაძლო შედეგები- მეწამული.</p>
<table>
<tbody>
<tr>
<td style="text-align: center" width="50%">პირობითი წინადადებები ერთი პირობით<br />
და ორი შესაძლო შედეგით.</td>
<td style="text-align: center">პირობითი წინადადებები ორი პირობით<br />
და სამი შესაძლო შედეგით. პირობა 2<br />
მხოლოდ მაშინ ფასდება, როცა პირობა 1<br />
მცდარია.</td>
</tr>
<tr>
<td style="vertical-align: top"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition-1024x664.png" alt="condition" width="246" height="159" /></td>
<td style="vertical-align: top"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image04-1-1024x851.png" alt="image04" width="314" height="261" /></td>
</tr>
</tbody>
</table>
<p>აქ ნაჩვენებია, თუ როგორ გამოიყურება ბლოკები App Inventor-ში:</p>
<table>
<tbody>
<tr>
<td style="vertical-align: top" width="25%"> <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image29.png" alt="image29" width="150" height="230" /></td>
<td style="vertical-align: top"> <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image19.gif" alt="how to use the if else block" width="640" height="480" /></td>
</tr>
</tbody>
</table>
<p>თქვენი პირველი პირობა მიდის if -ის გვერდით, თქვენი მეორე პირობა კი- else if - ის .<br />
გვერდით. მოდი შევხედოთ მაგალითს:</p>
<p>თქვენ ქმნით აპს, რომელიც მხოლოდ 13-18 წლამდე ასაკის მოზარდებისთვისაა<br />
განსაზღვრული. თქვენ კი გსურთ თქვენმა აპლიკაციამ, შეატყობინოს მომხმარებლებს<br />
ასაკობრივად რამდენად პატარები ან დიდები არიან თქვენი აპლიკაციის გამოსაყენებლად.<br />
თქვენ გაქვთ სამი შესაძლო შედეგი:</p>
<ol>
<li style="font-weight: 400">მომხმარებელი მეტისმეტად ახალგაზრდაა</li>
<li style="font-weight: 400">მომხმარებელი მეტისმეტად ასაკოვანია</li>
<li style="font-weight: 400">მომხარებელი შესაფერისი ასაკიასაა</li>
</ol>
<p>თქვენმა მომხმარებლებმა უნდა შეიყვანონ თავიანთი ასაკი აპლიკაციაში და შეინახონ იგი<br />
ცვლადში "ასაკი". აი როგორ შეიძლება გამოიყენოთ <strong>if / else if / else</strong> განაცხადები<br />
მომხმარებლის ასაკის შესამოწმებლად.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image08-1-1024x457.png" alt="if/else else/if response blocks" width="633" height="283" /></p>
<p>პირველი პირობა ამოწმებს მომხმარებლის ასაკი 13 წელზე ნაკლებია თუ არა. თუ ის ჯერ არ<br />
არის 13-ის, მაშინ აპლიკაცია აცნობებს მას, რომ ის მეტისმეტად ახალგაზრდაა<br />
აპლიკაციისთვის. თუ იგი 13 წელზე მეტის არის, მაშინ აპლიკაცია ამოწმებს, მისი ასაკი 18<br />
წელზე მეტის არის თუ არა. თუ ის არის, მაშინ აპლიკაია აცნობებს მას, რომ იგი მეტისმეტად უფროსია. და თუ ის არ არის 18 წელზე მეტის, მაშინ მას აპლიკაცია ატყობინებს, რომ მისი ასაკი შესაფერისია აპლიკაციისთვის.</p>
<p>else if - ის გამოყენებით თქვენ შეგიძლიათ დაამატოთ იმდენი პირობა, რამდენიც გსურთ<br />
თქვენს პირობით წინადადებას. მაგრამ მეტად მნიშვნელოვანია პირობების რიგითობის დაცვა, რათა აპლიკაციამ შესაბამისად შეაფასოს პირობები. თქვენი კოდი ყოველთვის დაიწყება პირველი პირობით და შემდეგ გაგრძელდება რიგის მიხედვით, სანამ არ მოძებნის პირობას, რომელიც ჭეშმარიტია. როდესაც აპლიკაცია პოულობს ჭაშმარიტ პირობას, ის განახორციელებს კოდს ამ პირობის ქვეშ. თუ არც ერთი პირობაა ჭეშმარიტი, აპლიკაცია დაასრულებს კოდს else - ის ნაწილში.</p>
<p>აქ მოცემულია რამდენიმე რამ, რაც უნდა გვახსოვდეს, როდესაც <strong>if / else / else if</strong> წინადადებებს:</p>
<ul>
<li style="font-weight: 400">თქვენ შეგიძლიათ შეამოწმოთ იმდენი პირობა, რამდენიც გნებავთ</li>
<li style="font-weight: 400">განაცხადი მუშაობს ზემოდან ქვემოთ, ასე რომ, შეიყვანეთ ის პირობა, რომელიც<br />
გსურთ, რომ პირველად შემოწმდეს თქვენი განაცხადის დასაწყისში</li>
<li style="font-weight: 400">ერთადერთი კოდი, რომელიც შესრლდება არის პირველი პირობის ქვეშ და ის<br />
აღმოჩნდება, რომ ჭეშმარიტი კოდია</li>
</ul>
<p>პირობით დამოკიდებულ განაცხადებზე ბევრი ინფორმაციის გასაგებად, შეამოწმეთ აქ: <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/control.html">MIT’s website here</a>.</p>
<h2>აქტივობა 2</h2>
<p>იმის იდენტიფიცირება, თუ რომელი პირობა უნდა შეაფასოს თქვენმა აპლიკაციამ შეიძლება დამაბნევლი იყოს! ზოგჯერ თქვენ იცით, რა გსურთ თქვენმა აპლიკაციამ გააკეთოს, მაგრამ შეიძლება ძნელი იყოს იმის გაგება, თუ რომელი პირობა უნდა შემოწმდეს. მოდით გავივარჯიშოთ რამდენიმე პირობის დაწერა, რომელსაც ფიქრობთ, რომ აპლიკაცია შეამოწმებს გამოყენების დროს. აქ მოცემულია მაგალითი, რომელიც დასაწყისში დაგეხმარებათ! ეცადეთ თუ შეგიძლიათ მეტი მაგალითის მოფიქრება.</p>
<p>სოციალური მედიის ანგარიშზე შესვლა:</p>
<ul>
<li style="font-weight: 400">შესამოწმებელი პირობები:
<ul>
<li style="font-weight: 400">მომხმარებლის სახელი სწორია</li>
<li style="font-weight: 400">პაროლი სწორია</li>
<li style="font-weight: 400">მომხმარებელს ხუთ ჯერზე მეტად არ უცდია ანგარიშზე შესვლა</li>
</ul>
</li>
</ul>
<p>კიდევ ერთი რთული ნაწილი წერილობითი პირობების დაწერისას არის თქვენი პირობის<br />
სწორი თარგანი, რომ აპლიკაციამ ზუსტად გაიგოს თქვენი ჩანაფიქრი. ზემოთ მოყვანილ<br />
მაგალითში ჩვენ შევამოწმეთ მომხმარებლის ასაკი ცვლადის შექმნით, რომელიც<br />
მომხმარებლის ასაკს უდრის. პირობების შექმნა ყოველთვის ინტუიციით არ ხდება და ამას<br />
პრაქტიკა და ვარჯიში ჭირდება! აქ მოცემულია რამდენიმე შეკითხა, რომელთა პასუხის გაცემა დაგეხმარებათ სწორი პირობის შესაქმნელად:</p>
<ol>
<li style="font-weight: 400">არის თუ არა თქვენი პირობა დამოკიდებული მომხმარებლის მიერ შეყვანილ ინფორმაციაზე?</li>
<li style="font-weight: 400">გჭირდებათ რაიმე ცვლადების დაყენება?
<ul>
<li style="font-weight: 400">თუ ასეა, რა ტიპისაა იგი? ეს ნომერია, სია თუ ტექსტი?</li>
</ul>
</li>
<li style="font-weight: 400">შეგიძლიათ გამოიყენოთ მათემატიკის ოპერატორები, როგორიცაა ნაკლები (&lt;), მეტი (&gt;), ტოლი (=), არ ტოლია (≠) თქვენს პირობაში?</li>
<li style="font-weight: 400">გჭირდებათ რაიმე მნიშვნელობის შედარება სხვა მნიშვნელობებთან მონაცემთა ბაზაში?</li>
<li style="font-weight: 400">გჭირდებათ რაიმე მონაცემის შედარება რაღაც სხვა მონაცემებთან, როგორიც არის<br />
ვებსაიტი? (ეს უფრო მეტად იქნება განხილული მე-4 კოდში - <a href="http://www.technovationchallenge.org/curriculum/code-4/" target="_blank" rel="noopener">Code 4</a>)</li>
<li style="font-weight: 400">რა ტიპის მონაცემებზეა დაყრდნობილი თქვენი პირობა? რაიმე ოპერაცია ხომ არ არსებობს იმ ტიპის მონაცემისთვის,რომელიც დაგეხმარებათ?
<ul>
<li style="font-weight: 400">მაგალითი: ორი ტექსტის შედარება, ტექსტის სიგრძის მოძიება, ნივთების სიაში დამატება, ორი სიის შედარება და ა.შ.</li>
<li style="font-weight: 400">თვალი გადაავლეთ ოპერაციებს App Inventor - ში, რადგან შეიძლება ეს დაგეხმაროთ საქმიანობაში.</li>
</ul>
</li>
</ol>
<h2>ლოგიკური ოპერატორები</h2>
<p>თქვენ უკვე შეისწავლეთ თუ როგორ შეუძლია თქვენს აპლიკაციას სხვადახვა რამის გაკეთება პირობითი განცხადებების გამოყენებით. თქვენ ბევრი ახალი პრობლემის მოგვარება შეგიძლიათ რამდენიმე ლოგიკური ოპერატორის მეშვეობით. ლოგიკური ოპერატორები უზრუნველყოფენ მრავალჯერადი ლოგიკის მიწოდებას და გაამარტივების გზით, ისინი გაამთლიანებენ მათ ერთ ლოგიკურ გამოსავალში/შედეგში. იმის გამო, რომ თქვენი აპლიკაცია აღიქვამს პირობებს, როგორც ჭეშმარიტი ან მცდარი, შეგიძლიათ გამოიყენოთ პირობები, როგორც ლოგიკური ოპერატორები. არსებობს სამი ძირითადი ლოგიკური ოპერატორი , რომელსაც ისწავლით ამ ნაწილში: and/ და, or/ან, და no/არა. მიუხედავად იმისა, რომ ისინი შეიძლება უცნაურად მოგეჩვენოთ, ქვემოთ მოცემულია მაგალითები, თუ როგორ დაგეხმარებათ ლოგიკური ოპერატორები თქვენი აპის შექმნაში.</p>
<h5>და ოპერატორი</h5>
<p>იმისათვის, რომ and /და აპერატორის შედეი იყოს ,,ჭეშრიტი’’ მისი ყოველი პორტი<br />
აუცილებლად ,,ჭეშმარიტი’’ უნდა იყოს. თუ მისი ერთ-ერთი პორტირებული პირობა მაინც<br />
მცდარია, თქვენი კოდი მთლიან განაცხადს,,მცარად’’ მიიჩნევს. აქ მოყვანილია ყველა<br />
შესაძლო შედეგი, and ფუნქცის გამოყენებისას.</p>
<p style="text-align: center">True <strong>and</strong> True = True</p>
<p style="text-align: center">ჭეშმარიტი <strong>and</strong> ჭეშმარიტი =ჭეშმარიტი</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image34.png" alt="true/true blocks" width="318" height="62" /></p>
<p style="text-align: center">True <strong>and</strong> False = False</p>
<p style="text-align: center">ჭეშმარიტი <strong>and</strong> მცდარი=მცდარი</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image24-1.png" alt="true/false blocks" width="336" height="61" /></p>
<p style="text-align: center">False <strong>and</strong> True = False</p>
<p style="text-align: center">მცდარი <strong>and</strong> ჭეშმარიტი = მცდარი</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image38.png" alt="false/true blocks" width="331" height="60" /></p>
<p style="text-align: center">False <strong>and</strong> False = False</p>
<p style="text-align: center">მცდარი <strong>and</strong> მცდარი =მცდარი</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image07-1.png" alt="false/false blocks" width="353" height="66" /></p>
<p>აქ ჩანს თუ როგორ შეიძლება <strong>and</strong> ფუნქციის გამოყენება პირობით განაცხადში:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition3-1024x608.png" alt="condition3" width="407" height="242" /></p>
<p><em>შენიშვნა</em>: <strong>and</strong> ოპერატორის გამოყენება განსხვავებულია, <strong>else if</strong> ოპერატორისგან, რადგან<br />
ორივე პირობა ერთსა და იმავე დროს ფასდება და არა ცალ-ცალკე მიყოლებით. ორივე<br />
ოპერატორი ასევე უნდა ,,ჭეშმარიტი’’ იყოს, რათა აპლიკაციამ პირობა ,,ჭეშმარიტად’’<br />
აღიქვას.</p>
<h5>მაგალითები</h5>
<p>თქვენ უნდა გამოიყენოთ <strong>and</strong>, როდესაც გჭირდებათ ორი ,,ჭეშმარიტი’’ პირობა რაიმის<br />
მოსახდენად. აქ მოცემულია რამდენიმე მაგლითი, როდესაც შეგიძლიათ <strong>and</strong> -ის გამოყენება თქვენს აპლიკაციაში!</p>
<ul>
<li style="font-weight: 400">სოციალური მედიის ანგარიშზე შესვლა:
<ul>
<li style="font-weight: 400">თუ (მომხმრებლის სახელი სწორია) და (პაროლი სწორია) → მაშინ ნება მიეცით<br />
მომხმრებელს ანგარიშზე შევიდეს</li>
</ul>
</li>
<li style="font-weight: 400">თამაშის მოგება
<ul>
<li style="font-weight: 400">თუ (მოთამაშე ამთვრებს დონეს) და (დრო ჯერ კიდევ არ ამოწურულა) →მაშინ მომხმარებელი იმარჯვებს</li>
</ul>
</li>
<li style="font-weight: 400">სასურსათო მაღაზიის მოძიება:
<ul>
<li style="font-weight: 400">თუ (მაღაზია ღიაა) და (მაღაზია ახლოსაა მომხმარებელთან) → მაშინ აჩვენეთ საძიებო შედეგები</li>
</ul>
</li>
<li style="font-weight: 400">სურათების განთავსება:
<ul>
<li style="font-weight: 400">თუ (მომხმარებელი აირჩევს სურათს) და (მომხმარებლმა შეიყვანა წარწერა) → საშუალება მიეცი მომხმარებელს გამოაქვეყნოს სურათი</li>
</ul>
</li>
</ul>
<p>შეგიძლიათ კიდევ მეტი მაგალითი მოიფიქროთ?</p>
<h5>ან ოპერატორი</h5>
<p><strong>or</strong> /ან ოპერატორის შედეგი, რომ ,,ჭეშმარიტი’’ იყოს, მხოლოდ ერთი პორტი მაინც უნდა იყოს "ჭეშმარიტი". აქ არის ყველა შესაძლო შედეგი <strong>or</strong> /ან ოპერატორის გამოყენებისას.</p>
<p style="text-align: center">True <b>or</b> True = True</p>
<p style="text-align: center">,,ჭეშმარიტი’’ <strong>ან</strong> ,,ჭეშმარიტი’’=,,ჭეშმარიტი’’</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image33-1.png" alt="true or true blocks" width="284" height="53" /></p>
<p style="text-align: center">True <strong>or</strong> False = True</p>
<p style="text-align: center">,,ჭეშმარიტი’’ <strong>ან</strong>,,მცდარი’’= ,,ჭშმარიტი’’</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image57.png" alt="true or false blocks" width="299" height="58" /></p>
<p style="text-align: center">False <strong>or</strong> True = True</p>
<p style="text-align: center">,,მცდარი’’ <strong>ან</strong> ,,ჭეშმარიტი’’=,,ჭეშმარიტი’’</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image26-1.png" alt="false or true blocks" width="299" height="63" /></p>
<p style="text-align: center">False <strong>or</strong> False = False</p>
<p style="text-align: center">,,მცდარი’’<strong>ან</strong> ,,მცდარი’’=,,მცდარი’’</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image49.png" alt="false or false blocks" width="313" height="61" /></p>
<p>აქ მოყვანილია მაგალითები, თუ როგორ შეიძლება or ოპერატორის გამოყენება პირობით<br />
წინადადებაში:</p>
<p><img class="aligncenter" src="http://technovationchallenge.org/wp-content/uploads/2016/09/Condition4-3.png" alt="" width="408" height="239" /></p>
<p>შენიშვნა : ერთი შეხედვით შეიძლება or ოპერატორი წააგავდეს <strong>else if</strong> ოპერატორს. <strong>Or</strong><br />
ოპერატორი განსხვავებულია, ვინაიდან ორივე პირობა აისახება ერთსა და იმავე დროს, და<br />
არა სათითაოდ. თუ თქვენ ორი პირობა გაქვთ და მათ ორივეს იგივე ანუ ,,ჭეშმარიტი’’ შედეგი აქვს, მაშინ or ოპერატორის გამოყენება უკეთესია.</p>
<h5>მაგალითები</h5>
<ul>
<li style="font-weight: 400">თამაშის წაგება:
<ul>
<li style="font-weight: 400">(თუ დრო ამოიწურება) ან (მოთამაშე კარგავს ყველა სიცოცხლეს) → მაშინ მოთამაშე აგებს</li>
</ul>
</li>
<li style="font-weight: 400">ძიების შედეგების ჩვენება
<ul>
<li style="font-weight: 400">(თუ სათაური ემთხვევა) ან (აღწერა ემთხვევა) → აჩვენე ძიების შედეგებში</li>
</ul>
</li>
<li style="font-weight: 400">რეკომენდებული ვიდეოები მომხმარებლებისთვის
<ul>
<li style="font-weight: 400">(თუ მომხმარებელმა უყურა მას წარსულში) ან (მსგავსია იმის, რაც მომხმარებელს მოეწონა) → რეკომენდაცია გაუწიე მასზე მომხმარებელს</li>
</ul>
</li>
</ul>
<h5>არა ოპერატორი</h5>
<p><strong>not</strong> ოპერატორი უფრო მარტივია! not ოპერატორი ყოველთვის საპირისპიროდ ცვლის<br />
ლოგიკური ღირებულებებს.</p>
<p style="text-align: center"><b>not</b> true = false</p>
<p style="text-align: center"><strong>არა</strong> ,,ჭეშმარიტი’’=,,მცარი’’</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image13-1.png" alt="not true blocks" width="167" height="52" /></p>
<p style="text-align: center"><b>not</b> false = true</p>
<p style="text-align: center"><strong>არა</strong> ,,მცდარი’’=,,ჭეშმარიტი’’</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image43.png" alt="not false blocks" width="178" height="44" /></p>
<p style="text-align: left">ხანდახან ადვილია ისეთი პირობის დაწერა, რომელიც საშუალებას აძლევს თქვენს<br />
აპლიკაციას შეამოწმოს საპირისპირო რამ. ამ სცენარებისთვის შეგიძლიათ გამოიყენოთ <strong>not</strong><br />
ოპერატორი. აი, როგორ შეიძლება მისი გამოყენება პირობითი განაცხადში.</p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition5-1024x825.png" alt="condition5" width="283" height="228" /></p>
<h5>მაგალითები</h5>
<ul>
<li style="font-weight: 400">გსურთ იმის შემოწმება არის თუ არა ტექსტი ტექსტბოქსში, მაგრამ უფრო ადვილია იმის შემოწმება, როცა ტექსტი ცარიელია, ვიდრე როცა რაღაც არსებობს მასში. თქვენ იყენებთ not ოპერატორს, ასე რომ თქვენ შეგიძლიათ შეამოწმოთ, არის თუ არა ტექსტი ცარიელი.
<ul>
<li style="font-weight: 400">თუ <strong>არა</strong> (textbox = "") → გააკეთე ეს</li>
</ul>
</li>
<li style="font-weight: 400">გინდათ, რომ გამორიცხოთ ძიების შედეგები ლეკვების შესახებ, ასე რომ რწმუდებით იმაში, რომ სიტყვა ლეკვი არ მოიძებნა <strong>not</strong> ოპერატორის გამოყენებით.
<ul>
<li style="font-weight: 400">თუ <strong>არა</strong> (სტატიაში გვხვდება სიტყვა ლეკვი) → შედეგების ჩვენება</li>
</ul>
</li>
<li style="font-weight: 400">თქვენ შეგიძლიათ გააერთიანოთ ლოგიკური ოპერატორები ერთმანეთთან უფრო მეტი<br />
ოპერაციის ჩასატარებლად. აი, როგორ შეგიძლიათ ნახოთ ძიების შედეგები, რომელიც<br />
შეიცავს სიტყვა კნუტს და არა ლეკვს.</p>
<ul>
<li style="font-weight: 400">თუ არა (სტატია შეიცავს სიტყვა ლეკვს) და (სტატია შეიცავს სიტყვა კნუტს) → შედეგის ჩვენება</li>
</ul>
</li>
</ul>
<h2>აქტივობა 3</h2>
<p>იცით თუ არა, რომ შეგიძლიათ გამოიყენოთ and, or და not Google ძიებაში? ეს კარგი<br />
საშუალებაა ძებნის შედეგების შემცირებისთვის ან გაფართოებისთვის. აბა, სცადეთ! ოღონდ დარწმუნდით, რომ თქვენ აკრიფოთ "AND", "OR" ან "NOT" ყველა დიდი ასოთი. გადახედეთ ქვემოთ მოყვანილ მაგალითებს:</p>
<p>ძიებამ 2017 AND Technovation მოგვცა ისეთი შედეგი, რომელიც შეიცავს ორივეს: 2017-ს და Technovation-ს:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image45.png" alt="image45" width="482" height="331" /></p>
<p>ძიებამ 2017 OR Technovation მოგვცა შედეგი, რომელიც შეიცავს ან 2017-ს ან<br />
Technovation-ს:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image25-1.png" alt="image25" width="481" height="313" /></p>
<h2>Loops</h2>
<p>წარმოიდგინეთ, რომ თქვენ გთხოვეს თქვენი სახელის დაწერა ზედიზედ ასჯერ. ამის გაკეთება არა მხოლოდ ძალიან მოსაწყენი იქნება, არამედ დიდ დროსაც წაგართმევთ. თუ დაიღლებით, შეიძლება შეცდომითაც კი დაწეროთ! თუ კომპიუტერს მისცემთ ბრძანებას, რომ დაბეჭდოს თქვენი სახელი ასჯერ, ნამდვილად სწრაფად და უშეცდომოდ გააკეთებს ამას! ადამიანებისგან განსხვავებით, კომპიუტერებს შეუძლიათ იგივე საქმის კეთება გაუთავებლად.</p>
<p>ამისგასაკეთებლად loops -ის დახმარება დაგჭირდება. Loop არის კოდის ბლოკი, რომელიც<br />
მეორდება უსასრულოდ.არსებობს ორი სახის loops, while loops და for loops . While<br />
loops განმეორდება იქამდე, სანამ თქვენი პირობა ,,ჭეშმარიტია’’. for loops კი, იმეორებს<br />
ბრძანებას იმ კონკრეტულ რიცხვამდე რამდენჯერაც უნდა შეასრულოს ბრძანება.</p>
<h5>For loops</h5>
<p><strong>For loops</strong> გაიმეორებს კოდის ბლოკს, რათა დააყენოს განმეორების რიცხვი. მიზეზი, თუ<br />
რატომ უწოდებენ მათ for loops, არის ის, რომ შეგიძლიათ ბრძანება მისცეთ აპლიკაციას იმ<br />
რაოდენობის შესახებ რამდენჯერაც გსურთ კოდის გამეორება. შეგიძლიათ წარმოიდგინოთ<br />
for loops -ის ბრძანების გამოყენება თქვენს აპლიკაციაში ამგვარად:“repeat this, <strong>for</strong> 14<br />
times”/,,გაიმეორე 14-ჯერ’’ ან “repeat this, <strong>for</strong> 5 times”/გაიმეორე 5-ჯერ’’.</p>
<p><strong>For loops</strong> იყენებს ცვლადებს იმის დასათვლელად თუ რამდენჯერ განმეორდა კოდი. ამ<br />
ცვლადს <strong>counter</strong> ეწოდება. <strong>for loops</strong>-ით თქვენ აკონტროლებთ განმეორებითობის რიცხვს,<br />
ხოლო <strong>counter</strong> -ი კი განსაზღვრავს დასაწყისს და დასასრულს. თქვენ ასევე შეგიძლიათ<br />
დააყენოთ <strong>counter</strong>-ი ისე, რომ აკონტროლოთ მისი გაზრდის დონე ყოველ ჯერზე, როდესაც<br />
კოდი განმეორდება. უმეტეს სცენარებში თქვენ დაგჭირდებათ,რომ <strong>counter</strong> -ი გაიზარდოს 1<br />
ნიშნულით რამდენჯერაც loop განმეორდება.</p>
<p>App Inventor- ში, <strong>for loops</strong> ასე გამოიყურება:</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image21.png" alt="for loop block" width="276" height="153" /></p>
<p>ის ნაწილი, რომელიც ამბობს რიცხვს <strong>counter</strong> -ია. ამ შემთხვევაში, <strong>counter</strong> -ის სახელი<br />
რიცხვით გამოისახება, მაგრამ შეგიძლიათ მისი შეცვლა. რიცხვი 1-ზე დაიწყება და შეწყდება, როდესაც ის 5 გახდება. ყოველ ჯერზე, როდესაც loop გაიმეორებს შეყვანილ კოდს, რიცხვი 1-ით გაიზრდება. ასე რომ, ეს loop-ი შეყვანილ კოდს 5-ჯერ გაიმეორებს. ახლა, ეს loop-ი არ აკეთებს არაფერს, რადგანაც do/,,გასაკეთებელი ’’ ნაწილი ცარიელია. მოდით გადავხედოთ მაგალითს.</p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image41-1024x449.png" alt="image41" width="431" height="189" /></p>
<p>ჩვენ არ შეგვიცვლია არაფერი ცვლად რ იცხვთან დაკავშირბით, მაგრამ დავამატეთ რამდენიმე კოდი loop-ის do/გასაკეთებელ ნაწილს. ყოველ ჯერზე როდესაც loop იწყებს<br />
ფუნქციონირებას, აპლიკაცია გააფრთხილებს მომხმარებელის ფრაზით -“hello”, "გამარჯობა", ასე რომ მომხმარებელი მიიღებს გაფრთხილებას 5 ჯერ. აქ ნაჩვენებია თუ როგორ მუშაობს აპლიკაცია ამ loop-ის მეშვეობით:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-2.00.15-PM.png" alt="screen-shot-2016-11-01-at-2-00-15-pm" width="448" height="414" /></p>
<p>ეს loop სასარგებლო იქნება იმ შემთხვევაში, თუ გსურთ, რომ მომხმარებელი გააფრთხილოთ “hello” ფრაზით 5-ჯერ. ერთი შეხედვით შეიძლება ეს არც ისე გამოსადეგი ჩანდეს, რადგან რთული არ არის 5 ბლოკის შეყვანა ზედიზედ, რომელშიც წერია “hello”. მაგრამ რა მოხდება მაშინ, როცა ეს გაფრთხილება 100-ჯერ უნდა გაიმეოროთ? ეს ბევრად უფრო ადვილია loop-ის გამოყენებით ვიდრე 100 ბლოკის ზედიზედ შეყვანა!</p>
<p>კიდევ ერთი სასარგებლო თვისება, რომელიც<strong> for loops</strong> გააჩნია არის ის, რომ შეგიძლიათ<br />
<strong>counter variable</strong> -ის გამოყენება თქვენს კოდში. ყოველ ჯერზე, როცა loop იწყებს<br />
ფუნქციონირებას <strong>counter variable</strong> იძენს სხვა მნიშვნელობას, რომელიც მართლაც<br />
სასარგებლოა. იხილეთ მაგალითი.</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image27-1-1024x402.png" alt="image27" width="464" height="182" /></p>
<p>ამ for loop -ის კოდში ჩვენ ვიყენებთ ცვლადს, სახელით ,,რ იცხვი ’ ’, რომელიც კოდზეა მიბმული სიტყვით “hello”. რ იცხვი 1-ით იზრდება ყოველ ჯერზე, ასე რომ აპლიკაცია გააგრძელებს სხვადასხვა რამის ბეჭვდას ყოველ ჯერზე, როცა ის მუშაობს. აქ კი ნაჩვენებია, თუ როგორ იმუშავებს აპლიკაცია ამ loop-ით:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-2.04.17-PM.png" alt="screen-shot-2016-11-01-at-2-04-17-pm" width="445" height="381" /></p>
<h5>For Each Loops</h5>
<p>კიდევ ერთი მეტად გამოსაყენებელი <strong>for</strong> loop ტიპი, რომლითაც შეგიძლიათ App Inventor-ში<br />
ისარგებლოთ არის ეს:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image16-1.png" alt="image16" width="219" height="88" /></p>
<p>აქ უკვე counter variable/საკონტროლო ცვლადს უწოდებენ item-ს /პუნქტს და მისი<br />
საშუალებით გაიმეორებთ სიაში არსებული ელემენტების რაოდენობას. loops ყოველთვის<br />
სასრგებლოა, როდესაც მუშაობთ სიებთან. აქ მოცემულია მაგალითი.</p>
<p>მოდით ვთქვათ, რომ თქვენ გქონდათ ნომრების სია და გსურდათ, ახალი ნომრების დამატება სიაში და მისი შენახვა ცვლადზე სახელად- sum/ჯამი . აქ ნაჩვენებია ის, თუ როგორ გააკეთებდით ამას for each loop - ის მეშვეობით.</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/listofnumbers.png" alt="listofnumbers" width="404" height="94" /></p>
<p><b><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/numberlist.png" alt="numberlist" width="500" height="106" /></b></p>
<p>ყოველ ჯერზე, როცა loop მუშაობას იწყებს, ცვლადი sum იღებს ერთ ერთეულს ნომრების<br />
სიაში დასამატებლად. loop ავტომატურად გაჩერდება მას შემდეგ, რაც ყველა ნომერი სიას<br />
დაემატება!</p>
<p><em>შენიშვნა</em>: თქვენ ალბათ შეინიშნეთ, რომ counter variables/საკონტროლო ცვლადი ამ<br />
სექციაში ძალიან წააგავს local variables/ადგილობრივ ცვლადებს, რომლებზეც უკვე<br />
შევისწავლეთ Code 2 -ში! ისევე, როგორც ადგილობრივი ცვლადები, მათი გამოყენება<br />
შეგიძლიათ მხოლოდ loop-ის შიგნით.</p>
<h5>While Loops</h5>
<p><strong>While loops</strong> ისეთი ტიპისაა, რომელიც გრძელდება მანამ, სანამ პირობა ,,ჭეშმარიტია”.<br />
თქვენ შეგიძლიათ იფიქროთ, როდესაც თქვენი აპლიკაციის მიმართვისას ", როდესაც ეს<br />
მოხდება, გაიმეორეთ ეს" ან "მაშინ, როცა ეს არ შეცვლილა, გაიმეორეთ ეს". იმის მიზეზი თუ<br />
რატომ ქვიათ მათ <strong>while loops</strong> არის ის, რომ კოდი იქამდე განმეორდება, სანამ პირობა ჯერ<br />
კიდევ ,,ჭეშმარიტია’’. თქვენ ასე შეგიძლიათ წარმოიდგინოთ <strong>while loops</strong> როგორც<br />
ბრძანება, რომელსაც აპლიკაციას გადასცემთ “<strong>while this happens, repeat this</strong>”/,,სანამ ხდება, იმეორე’’ან ‘’<strong>while this hasn’t changed, repeat this</strong>”/,,სანამ არ შეცვლილა, გაიმეორე’’.</p>
<h5>მაგალითი</h5>
<p>წვეულებას მართავთ და გინდათ მუსიკა იქამდე იყოს ჩართული, სანამ თქვენი სტუმრები არ დატოვებენ. თქვენ შეგიძლიათ აღწეროთ თქვენი წვეულება, ამ loop-ის სახით:</p>
<ul>
<li style="font-weight: 400"><strong>იმ დროს როცა</strong> (ხალხი წვეულეაზეა &gt; 0)</li>
<li style="font-weight: 400"><strong>გააკეთე</strong>: მუსიკა უკრავდეს</li>
</ul>
<p>რა მოხდება, მაშინ თუ თქვენც გსურთ მუსიკის გამორთვა, როდესაც შუაღამეც გასულია?<br />
თქვენ შეგიძლიათ დააპროგრამოთ <strong>while loops</strong>, რომელიც დასრულდება იმ <strong>loop</strong> -ით ,<br />
რომელიც დაფუძნებულია მრავალ პირობაზე ლოგიკის გამოყენებით. ახლა შეგიძლიათ<br />
აღწეროთ თქვენი წვეულება, ამ loop-ის სახით:</p>
<ul>
<li style="font-weight: 400"><strong>იმ დროს, როცა</strong> (ხალხი წვეულებაზე&gt; 0) და (დრო &lt;შუაღამე)</li>
<li style="font-weight: 400"><strong>გააკეთე</strong>: მუსიკა უკრავდეს</li>
</ul>
<p>ამ შემთხვევაში მუსიკა შეჩერდება, როგორც კი ყველა დატოვს წვეულებას ან თუ უკვე<br />
შუაღამეც გავა.</p>
<p>იმისათვის, რომ გამოიყენოთ <strong>while loop</strong> თქვენ დაგჭირდებათ იმ პირობის<br />
დაყენება, რომელიც იწყება ,,ჭეშმარიტებით’’. თუ თქვენი პირობა იწყება ,,მცდარით’’, მაშინ<br />
თქვენი <strong>loop</strong> ვერ იმუშავებს. <strong>Loop</strong>-ი შეამოწმებს პირობას ყოველ ჯერზე სანამ არ დარწმუნდება, რომ პირობა ისევ ,,ჭეშმარიტია’’.</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/StartLoop-Arrow3-436x1024.png" alt="startloop-arrow3" width="169" height="397" /></p>
<p>აქ მოცემულია <strong>while loops</strong> როგორ გამოიყურება App Inventor-ში:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image35.png" alt="while loop block" width="159" height="105" /></p>
<p><strong>While loops</strong> -ით შესაძლებელია შეცდომების დაშვება! თუ თქვენ აირჩევთ პირობას,<br />
რომელიც არასოდეს იქნება ,,მცდარი’’, მაშინ თქვენი <strong>loop</strong>-იც რასოდეს დასრულდება. ამას<br />
ეწოდება უსასრულო/ <strong>infinite loop</strong> . იხილეთ მაგალითი:</p>
<p><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image52.png" alt="image52" width="389" height="156" /></p>
<p>როგორც 1 ყოველთვის 1-ის ტოლია, ეს პირობა არასოდეს იქნება ,,მცდარი’’! როდესაც ამ<br />
კოდს გავუშვებთ App Inventor-ში, ჩვენი აპლიკაცია ,,გაიყინება’’ და ჩვენ ვერაფრის<br />
გაკეთებას ვერ შევძლებთ. თქვენ შესაძლოა მესიჯიც კი მიიღოთ, App Inventor Companion<br />
App-გან, რომელიც გატყობინებთ, რომ აპლიკაციამ შეწყვიტა მუშაობა.</p>
<h2>Code 3 გამოწვევა: მონაცემთა ბაზების ძიება</h2>
<p>შექმენით აპლიკაცია, რომელიც მომხმარებელს საშუალებას აძლევს მოიძიოს ინფორმაცია და ნახოს მათი შედეგები. მონაცემთა ბაზები უნდა შეიცავდეს ცნობილი ადამიანების სახელებს და მათი ადგილების, ფილმების, მუსიკის ან მოვლენების დახასიათებას ან სხვა რამეს, რომელიც თქვენ გსურთ. დარწმუნდით, რომ თქვენს მონაცემთა ბაზაში სულ მცირე სამი მასალაა</p>
<p>შეეცადეთ გაარკვიოთ, თუ როგორ შეავსოთ კოდირების გამოწვევა დამოუკიდებლად, სანამ<br />
ინსტრუქციებს გადახედავდეთ. გაახსოვდეთ, რომ ინსტრუქციები გამოწვევის მოგვარების<br />
ერთ-ერთი გზაა და არა ერთადერთი.</p>
<p><a role="button" href="http://www.technovationchallenge.org/curriculum/code-3-challenge/" target="_blank" rel="noopener"><br />
See the instructions<br />
</a><br />
<a role="button" href="https://play.google.com/store/apps/details?id=appinventor.ai_alliec.DatabaseSearch" target="_blank" rel="noopener"><br />
download the example app<br />
</a></p>
<h1>რეფლექსია:</h1>
<p>გილოცავთ ამ გაკვეთილის დასრულებას! ეს იყო ვრცელი გაკვეთილი, მაგრამ ძალიან<br />
დაგეხმარებათ, აპლიკაციის შექმნისას! არ უნდა დაგვავიწყდეს, რომ ყოველთვის შეგიძლიათ გადახედოთ ამ მასალებს, თუ ახლა რაიმე გაუგებარია.</p>
<p>ძირითადი ტერმინების მიმოხილვა:</p>
<ul>
<li>Booleans - მონაცემების ტიპი, რომელიც შეიძლება იყოს ჭეშმარიტი ან მცდარი</li>
<li>პირობები - ის, რასაც აპლიკაცია აფასებს ჭეშმარიტია თუ მცდარი</li>
<li>პირობითი განცხადება - ატყობინებს აპლიკაციას რა უნდა გააკეთოს პირობების შეფასების შემდეგ</li>
<li>,,და’’ ოპერატორი - შეაფასებს, როგორც ჭეშმარიტი, თუ ყველა შეყვანილი მონაცემი ჭეშმარიტია</li>
<li>,,ან’’ ოპერატორი - შეაფასებს, როგორც ჭეშმარიტი, თუ ერთი შეყვანილი მონაცემი მაინც</li>
<li>ჭეშმარიტია</li>
<li>,,არ არის’’ ოპერატორი - შეაფასებს, ყოველთვის საპირისპიროდ</li>
<li>Loop - კოდის განმეორებითი ბლოკი</li>
<li>For Loop - იმეორებს ბლოკის კოდს გარკვეული რაოდენობის ელემენტებზე</li>
<li>For Each loop - იმეორებს ბლოკის კოდს იმდენჯერ, რამდენი ელემენტიცაა სიაში</li>
<li>While Loop - იმეორებს ბლოკის კოდს, სანამ პირობა ,,ჭეშმარიტია’’</li>
</ul>
<p>------------------------------------------------------------------------------------</p>
<ul>
<li>Booleans<b> - datatype that can be true or false</b></li>
<li>Conditions - something an app evaluates to be true or false</li>
<li>Conditional Statement - tells the app what to do after evaluating conditions</li>
<li>AND Operator - evaluates as true if all of the inputs are true</li>
<li>OR Operator - evaluates as true if one of the inputs is true</li>
<li>NOT Operator - evaluates as the opposite of the input</li>
<li>Loop - a repeating block of code</li>
<li>For Loop - repeats a block of code a certain number of items</li>
<li>For Each Loop - repeats a block of code for the number of items in a list</li>
<li>While Loop - repeats a block of code while a condition is true</li>
</ul>
