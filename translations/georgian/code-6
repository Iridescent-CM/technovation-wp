კოდი 6

<h1><b>კოდი 6</b></h1>
<h2><b>თქვენი კოდის დაგემვა</b></h2>
<h2><b>სასწავლო ამოცანები:</b></h2>
<p><span style="font-weight: 400">ამ თავში თქვენ ისწავლით…</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">თუ როგორ დაგეგმოთ თქვენი მასალის კოდირება</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">იმ საშუალებებს, თუ როგორ გადაანაწილოთ დრო და მართოთ თქვენი პროექტი</span></li>
</ul>
<h3><b>თქვენი კოდირების დაგეგმა</b></h3>
<p><a href="http://www.technovationchallenge.org/curriculum/code-5/"><span style="font-weight: 400">Code 5</span></a><span style="font-weight: 400"> -ში თქვენ უკვე დაგეგმეთ თუ როგორი იქნებოდა თქვენი აპლიკაცია და როგორ დაამყარებდნენ მომხმარებლები ურთიერთობას მისი საშუალებით. ამ სექციის ფარგლებში თქვენ შეისწავლით ორ ტექნიკურ საშუალებას, რომელთა დახმარებითაც თქვენ შეძლებთ კოდირების დაგეგმვას და აპლიკაციის რეალურ ამუშავებას. ძალიან მნიშვნელოვნია თქვენი კოდირების დაგეგმვა, რადგან ვიდრე კომპიუტერს მიუჯდებოდეთ წინასწარ შეიძლიათ განსაზღვროთ და მოემზადოთ იმის შესასწავლად რაც ჯერ არ იცით!  </span></p>
<h4>ფსევდოკოდი</h4>
<p><b>ფსევდოკოდის</b><span style="font-weight: 400"> წერა არის თქვენი აპლიკაციის დაგეგმვის პროცესის მნიშვნელოვანი ნაწილი. ფსევდოკოდის წერისას ჩვენ ვიყენებთ ჩვეულებრივ ენას და კოდის გარკვეულ ნაწილებს, სადაც ახსნილია თქვენი აპლიკაციის ფუნქციები. თქვენ უნდა გამოიყენოთ პროგრამირების ტერმინები, როგორიცაა: loop ან conditionals ან ნებისმიერი App Inventorი-ს კომპონენტები. ასევე შეგიძლიათ გამოიყენოთ ListView ან ნებისმიერი ღილაკი. ფსევდოკოდის დასაწერად არ არსებობს ბევრი წესი, მაგრამ მისი მიზანია, რომ გადმოსცეს იდეა, აზრი იმის შესახებ თუ როგორ იმუშავებს თქვენი აპლიკაცია დაპროგრამებამდე. </span></p>
<p><span style="font-weight: 400">მოდით შევხედოთ მაგალითს მესამე კოდიდან </span><a href="http://www.technovationchallenge.org/curriculum/code-3/"><span style="font-weight: 400">Code 3</span></a><span style="font-weight: 400">. ამ აპლიკაციაში, მომხმარებელს შეუძლია მოიძიოს მონაცემები ქალი მეცნიერების შესახებ. აპლიკაცია უჩვენებს მათ სახელებს ListView-ში. მომხმარებელს საშუალება აქვს ამოირჩიოს სასურვლი მეცნიერი და შეისწავლოს იგი.</span></p>
<p><i><span style="font-weight: 400">ძიების ღილაკი</span></i></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">როდესაც მომხმარებელი უთითებს ძიებას</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">აპლიკაცია იყენებს </span><b>for loop -ს </b><span style="font-weight: 400">შენახული სახელების და აღწერილობის მოსაძებნად </span><b>TinyDB -ში. </b></li>
<li style="font-weight: 400"><b>თუ</b><span style="font-weight: 400"> შესაბამისობა არსებობს</span>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">აპლიკაცია დაამატებს მეცნიერის სახელს ცარიელ სიას, იგივე ცვლადს სახელწოდებით ,,</span><i><span style="font-weight: 400">searchResults’’</span></i></li>
</ul>
</li>
<li style="font-weight: 400"><b>თუ </b><i><span style="font-weight: 400">searchResults</span></i><span style="font-weight: 400"> ცარიელია loop-ის დასრულების შემდეგ </span>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">აპლიკაცია ატყობინებს მომხმარებელს, რომ შესაბამისობა არ არსებობს</span></li>
</ul>
</li>
<li style="font-weight: 400"><b>Else</b>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">აპლიკაცია აჩვენებს </span><i><span style="font-weight: 400">searchResults-ს</span></i> <b>ListView -ში.</b></li>
</ul>
</li>
</ul>
<p><i><span style="font-weight: 400">მეცნიერის ამორჩევა</span></i></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">როდესაც მომხმარებელი აკეთებს არჩევანს </span><b>ListView1-დან</b></li>
<li style="font-weight: 400"><span style="font-weight: 400">აპლიკაცია ხსნის მეორე ეკრანს/</span><i><span style="font-weight: 400">Screen2</span></i></li>
<li style="font-weight: 400"><span style="font-weight: 400">აპლიკაცია უკან დააბრუნებს მეცნიერის აღწერილობას და სახელს </span><b>TinyDB-დან</b></li>
<li style="font-weight: 400"><span style="font-weight: 400">აპლიკაცია აჩვენებს მეცნიერის აღწერილობას და სახელს ეკრანზე</span></li>
</ul>
<h3>აკვტივობა</h3>
<p><span style="font-weight: 400">თქვენს აპლიკაციაში ჩაწერეთ ფსევდოკოდი ორი event handlers -თვის. თუ დარწმუნებული არ ხართ, თუ როგორ იმუშავებს  event handler თქვენს აპლიკაციაში, შეგიძლიათ დასახმარებლად თქვენს გუნდის წევრს ან მენტორს მიმართოთ! </span></p>
<p><span style="font-weight: 400">დაუსვით შეკითხვები საკუთარ  თავს:</span></p>
<ul>
<li><span style="font-weight: 400">რომელია ის მოქმედება, რომლითაც ეს კოდი იწყება?</span></li>
<li>გამოიყენებს თუ არა თქვენი აპლიკაცია ნებისმიერ შენახულ მნიშვნელობას?
<ul>
<li>თუ ასეა, მაშინ სად შეინახება ეს მნშვნელობები?</li>
</ul>
</li>
<li>გამოიყენებს თუ არა თქვენი აპლიკაცია ნებისმიერ ცვლადს? თუ ასეა, მაშინ მისთვის სახელის მინიჭება დაგეხმარებათ მათ გაკონტროლებაში.</li>
</ul>
<h3><b>Flowcharts</b></h3>
<p><b>flowchart - ი </b><span style="font-weight: 400">არის დიაგრამა, რომელიც წარმოადგენს ალგორითმს. იგი იყენებს ფორმებს და ისრებს, რათა აჩვენოს, თუ როგორ გადადის მონაცემები პროგრამის მეშვეობით. ის ყოველთვის იკითხება ზემოდან ქვემოთ. პროგრამისტები იყენებენ სხვადასხვა ფორმებს, რათა წარმოადგინონ მონაცემების სხვადასხვა ფუნქცია. აქ მოცემულია ალგორითმის ნიმუში, იმის გამოსაკვლევად თუ რატომ აწუხებს ადამიანს კუჭი:</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-1.png" alt="flowchart-1" width="426" height="434" /></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/terminal.png" alt="terminal" width="139" height="41" /></p>
<p><span style="font-weight: 400">მოცემულ მაგალითში ოვალი გვიჩვენებს, ალგორითმის დაწყების და დასრულების ადგილს. ამ შემთხვევაში სამი სხვადასხვა ადგილია, სადაც შეიძლება ალგორითმი დასრულდეს: პირმა უნდა რაღაც ჭამოს; დაისვენოს ან ექიმთან წავიდეს. იმ ადგილებს, სადაც ალგორითმი იწყება ან სრულდება </span><b>ტერმინალები</b><span style="font-weight: 400"> უწოდება.</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision.png" alt="decision" width="139" height="76" /></p>
<p><b>რომბის </b><span style="font-weight: 400">ფორმა გვიჩვენებს, სადაც უნდა მოხდეს </span><b>გადაწყვეტილების</b><span style="font-weight: 400"> მიღება. ისინი ,,გზის გასაყარს’’ წააგავენ. სხვაგვარად, რომ ვთქვათ ეს პირობაა, სადაც გვიწევს ორი ვარიანტიდან ერთ-ერთის არჩევა: </span><b>ჭეშმარიტი</b><span style="font-weight: 400"> ან </span><b>მცდარი</b><span style="font-weight: 400">. ორი ისრიდან უნდა გამომდინარეობდეს გადაწყვეტილება, სადაც ერთი ჭეშმარიტია და მეორე მცდარი. გადახედეთ ზემოთ მოყვანილ მაგალითს, თუ როგორ გამოდიან ისრები რომბის ფორმიდან ერთი ქვემოთ მიმართულებით გრძელდება, მეორე კი გვერდით. </span></p>
<p><span style="font-weight: 400">აქ მოცემულია flowchart-ის სხვა მაგალითი:</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-2-1.png" alt="flowchart-2" width="124" height="281" /></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process.png" alt="process" width="139" height="41" /></p>
<p><span style="font-weight: 400">ეს დიაგრამა იყენებს </span><b>მართკუთხედს</b><span style="font-weight: 400">, რომელიც წარმოადგენს</span><b> პროცესს</b><span style="font-weight: 400">. პროცესში ვგულისხმობთ იმ ოპერაციებს, რასაც თქვენი კოდი შეასრულებს. ეს შეიძლება იყოს მომხმარებლის გაფრთხილება, ეტიკეტების დაყენება რაიმის სათქმელად ან ორი რიცხვის დამატება ერთად.</span></p>
<p><span style="font-weight: 400">ეს flowchart-ი აჩვენებს  </span><b>while loop-ს</b><i><span style="font-weight: 400">.</span></i><span style="font-weight: 400"> პირობა და პროცესი (ამ შემთხვევაში, შეყვანილ მონაცემებზე ხელმისაწვდომობა), განმეორდება მანამ,  სანამ პირობა არ დაკმაყოფილდება. არსებობს კიდევ ერთი ტიპის loop-ი, რომელსაც უკვე გაეცანის </span><a href="http://www.technovationchallenge.org/curriculum/code-3/"><span style="font-weight: 400">Code 3</span></a><span style="font-weight: 400">-ში, ეს არის </span><b>for loop-ი. </b><span style="font-weight: 400">მდგომარეობა </span><b>for loop</b><span style="font-weight: 400">  -ში ამოწმებს მიაღწია თუ არა </span><b>counter</b><span style="font-weight: 400"> -მა საკმარისად მაღალ დონეს, ასე რომ პროცესი იმდენჯერ განმეორდება, სანამ პირობას არ დაემთხვევა.</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-3-1.png" alt="flowchart-3" width="424" height="314" /></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/input-1.png" alt="input" width="145" height="41" /></p>
<p><span style="font-weight: 400">საბოლოო ფიგურა, რომელიც უნდა იცოდეთ, </span><b>პარალელოგრამია.</b><span style="font-weight: 400"> თქვენ უნდა გამოიყენოთ ეს ფიგურა, როდესაც გსურთ მონაცემების მიღება მომხმარებლისგან ან სხვა გზით, მაგალითად ინტერნეტიდან. პარალელოგრამი </span><b>შეყვანილი მონაცემებისთვის</b><span style="font-weight: 400"> გამოიყენება. </span></p>
<h3><span style="font-weight: 400">აქტივობა</span></h3>
<p><span style="font-weight: 400">ამ აქტივობაში თქვენ ჩართავთ ფსევდოკოდს flowchart-ში. გამოიყენეთ თქვენი ფსევდოკოდი, რომელიც ზემოთ აქტივობისთვის შექმენით და მიყევით შემდეგ ნაბიჯებს. </span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400">ოვალი</span></p>
<ol>
<li><span style="font-weight: 400"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-16outline.png" alt="terminal oval" width="112" height="36" />განათავსეთ ოვალი თქვენი event handler-ის დასაწყისში ან დასასრულში. ამას ტერმინალი ეწოდება. ხშირად flowchart-სერთზე მეტი დასასრული აქვს. ზემოთ მოყვანილ საძიებო ღილაკის მაგალითში event handler ბოლოდება ან ძიების შედეგების ჩამონათვალში ან მომხმარების შეტყობინებით, რომ შესაბამისობა არ არსებობს.</span></li>
</ol>
<p><span style="font-weight: 400">რომბი</span></p>
<p><span style="font-weight: 400">2. <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision_1outline.png" alt="conditional diamond" width="112" height="36" />განათავსეთ რომბი გარშემო, სადაც გადაწყვეტილება უნდა შესრულდეს. ეს მაშინ ხდება, როდესაც აპმა უნდა აირჩოს პირობა: ჭეშმარიტი ან მცდარი. გახსოვდეთ, რომ პირობებს შეიძლება გააჩნდეს ერთზე მეტი დაბოლოება.</span></p>
<p><span style="font-weight: 400">პარალელოგრამი</span></p>
<p><span style="font-weight: 400">3. <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-28outline.png" alt="input" width="112" height="36" />დაამატეთ პარალელოგრამი გარშემო ყველა მონაცემს თქვენს კოდში ან სხვა ადგილებში, საიდანაც მონაცემებს იღებთ: ინტერნეტი ან ადგილობრივი ნომაცემთა ბაზა. </span></p>
<p><span style="font-weight: 400">მართკუთხედი</span></p>
<p><span style="font-weight: 400">5. <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process_1outline.png" width="112" height="36" />განათავსეთ მართკუთხედი ყველა პროცესის ირგვლივ თქვენს კოდში. ეს ის შემთხვევაა, როდესაც თქვენი აპლიკაცია ასრულებს ბრძანებას, რომელიც არც ერთ კატეგორიაში არ შედის. ეს შეიძლება იყოს სიის დამატება ან მომხმარებლისთვის შეტყობინების გაგზავნა.</span></p>
<p><span style="font-weight: 400">ისარი</span></p>
<p><span style="font-weight: 400">6. <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/arrow_1outline.png" alt="arrow" height="36" />დააკავშირეთ ყველა ფიგურა ერთმანეთთან ისრებით! განსაკუთრებული ყურადღება მიაქციეთ, თუ როგორ განათავსებთ ისრებს loops და conditionals -თვის. გამოიყენეთ ზემოთ მოცემული მაგალითები თუ დახმარება გჭირდებათ.</span></p>
<p><span style="font-weight: 400">გადაუღეთ თქვენს ერთ-ერთ flowchart-ს სურათი და თან იქონიეთ წარდგენისას, რომ  ქულის მოპოვება შეძლოთ! არ ინერვიულოთ, თუ იგი ზედმიწევნით ზუსტი არ არის. მისი მთავარი მიზანია დახმარება გაგიწიოთ და შეისწავლოთ რაღაც ახალი მისი მეშვეობით! პრობლემა არ არის თუ თქვენი კოდი არ შეესაბამება თქვენს flowchart-ს აპლიკაციის შექმნის დასასრულს. უფრო მეტიც, თქვენ არც თქვენი flow chart-ის განახლება არ მოგიწევთ ამ შემთხვევაში.</span></p>
<h3><strong>წყვილში პროგრამირება</strong></h3>
<p><span style="font-weight: 400">წყვილში პროგრამირების დროს ორი პროგრამისტი იზიარებს ერთი სამუშაო სადგურს (ერთი ეკრანი, კლავიატურა და მაუსი წყვილს შორის), ან ერთად მუშაობენ ან კი მორიგეობით “driving”-ით და “navigating” -ით. ამ სცენარში, პირი, რომელიც კლავიატურასთან ან სენსორულ ეკრანთან იმყოფება ეწოდება ,,მძღოლი’’, ხოლო მეორე პირი კი, ,,ნავიგატორი’’. Navigator-ი ასევე აქტიურადაა ჩართული პროგრამირების ამოცანაში, მაგრამ იგი უფრო ორიენტირებულია დიდ სურათზე, პასუხობს ,,მძღოლის’’ შეკითხვებს და თვალ-ყურს ადევნებს კოდს, რომ არ გაიპაროს შეცდომები. მძღოლი და ნავიგატორი ხშირად ცვლიან როლებს.</span></p>
<p><span style="font-weight: 400">წყვილში პროგრამირებას ბევრი დადებითი მხარე აქვს, მაგალითად:</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">კოდის უკეთესი ხარისხი, რადგანაც ნავიგატორს შეუძლია შეამოწმოს მძღოლის მუშაობა.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">უკეთესი კომუნიკაცია გუნდის წევრებს შორის, რადგან მძღოლი მუდმივად უზრუნველყოფს კომენტარს იმის შესახებ, თუ რას აკეთებს (ანუ პროგრამირებს ხმამაღლა) და ნავიგატორს კი შეუძლია რეაგირების მოხდენა, შეკითხვის დასმა იმის შესახებ თუ რა ხდება, იმ შემთხვევაში თუ მძღოლი დუმს.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">ცოდნა შეიძლება გაუზიაროთ და გადასცეთ თქვენს გუნდს, განსაკუთრებით იმ შემთხვევაში, თუ ერთი ადამიანი უფრო დამწყებია და სხვები უფრო მოწინავე.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">თქვენ შეგიძლიათ უფრო ეფექტურად დაეხმაროთ გუნდს, რადგან მძღოლს შეუძლია შეცდომის გამოსწორება, მაშინ როდესაც ნავიგატორი უმეტესად ამოცანაზეა ფოკისირებული.</span></li>
</ul>
<p><span style="font-weight: 400">რჩევები წყვილში პროგრამირებისთვის:</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">არ შეგეშინდეთ ამ ფრაზის თქმა, "მოდი ვცადოთ თქვენი იდეა პირველ რიგში!" ზოგჯერ, როდესაც მძღოლის ფუნქციებს ასრულებთ, საჭიროა იცოდეთ, როდის უნდა მოუსმინოთ თქვენს ნავიგატორს. ამის მიზანია გამოიყენოთ საუკეთესო იდეები ურთიერთთანამშრომლობით და შეცდომების თავიდან ასაცილებლად.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">გამოცდილების გასაუმჯობესებლად, იხილეთ ათი შემოთავაზება აქ: </span><a href="https://www.thoughtworks.com/insights/blog/10-ways-improve-your-pairing-experience"><span style="font-weight: 400">ten suggestions</span></a></li>
</ul>
<p><b>"არც ერთი ჩვენგანი არც ისე ჭკვიანია, როგორც ჩვენ ყველანი ერთად."</b></p>
<p>–Ken Blanchard, author and management expert</p>
<h3><b>დროის მენეჯმენტი</b></h3>
<p><span style="font-weight: 400">ამ ეტაპზე, თქვენ შეიძლება გქონდეთ შეკითხვები, როგორიცაა:</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">როგორ ვიმუშაო უფრო ეფექტურად, რომ შევძლო ამ მიზნის მიღწევა? და როგორ მოვასწრო მუშაობის შესრულება დათქმულ ვადებში? </span></li>
<li style="font-weight: 400"><span style="font-weight: 400">ვინ შეამოწმებს ციფრულ პროტოტიპს და როდის?</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">როგორ გავიგებთ, თუ როდისთვის უნდა წარვადგინოთ სამუშაო ციფრული პროტოტიპი?</span></li>
</ul>
<p><span style="font-weight: 400">იმისათვის, რომ დაგეხმაროთ თქვენი პროგრამირების ნაწილზე თვალ-ყურის დევნებაში, მოდით გადავხედოთ პროგრამული უზრუნველყოფის პროცესის ეტაპებს.</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">მომხმარებლები, მათი საჭიროებები და MVP უკვე გამოვლენილია (from </span><a href="http://www.technovationchallenge.org/curriculum/code-5/"><span style="font-weight: 400">Code 5</span></a><span style="font-weight: 400">)</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">მოქმედბები, რომლებსაც მომხმარებლები შეიტანენ თქვენს აპლიკაციაში შედგენილია flow chart-თან ერთად</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">პროგრამული უზრუნველყოფა შექმნილია</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">მომხმარებელი ახდენს ტესტირებას, შეცდომები იდენტიფიცირებულია</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">შეცდომები გამოსწორებულია და გუნდი უზრუნველყოფს, რომ აპლიკაციაში შეცდომა აღარ დაფიქსირდეს</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">იმ შემთხვევაში, თუ აპლიკაცია ამუშაობს ყოველგვარი ხარვეზის გარეშე მობილურ მოწყობილობაზე და გუნდი კმაყოფილია საბოლოო შედეგებით, მაშინ იგი მზად არის გასაზიარებლად</span></li>
</ul>
<p><span style="font-weight: 400">რჩევები:</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">გრაფიკის დაყენება</span>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">მიეცით დავალებები გუნდის წევრებს და შესახსენებლად, დააფიქსირეთ ვადები და მიზანი თქვენს კალენდარზე! <a href="http://www.dreamincode.net/forums/topic/60048-creating-a-gantt-chart/" target="_blank" rel="noopener">dreamincode</a></span></li>
<li style="font-weight: 400"><span style="font-weight: 400">თუ თქვენ იყენებთ 12 კვირიანი სასწავლო პროგრამას, თქვენს გუნდს უნდა მისცეთ 5 კვირა თქვენი აპლიკაციის დასაპროგრამებლად</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">დარწმუნდით, რომ თქვენი ციფრული პროტოტიპი მზად იქნება მაქსიმუმ ორ დღეში, ტექნოლოგიური გამოწვევის წარდგენის ბოლო ვადამდე. ეს თავიდან აგაცილებთ ბევრ სტრესს იმ შემთხვევაში თუ არსებობს დაკავშირების პრობლემები.</span></li>
</ul>
</li>
</ul>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">დააშალე და გაანაწილე დავალებები </span>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">გუნდის წევრებიდან ყველა ერთად მუშაობს წყვილში და ასრულებენ სხვადახვა ამოცანებს ერთდროულად. ეს ხელს შეუწყობს პროექტის კოდის ასპექტს სწრაფად გადაადგილებაში.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">პრიორიტეტიზაცია</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">დარწმუნდით, რომ თქვენი აპლიკაცია პირველ რიგში ფუქციონირებს და შემდეგ შეიძლება მისი ვიზუალური მხარის დახვეწა. გახსოვდეთ, თქვენი ციფრული პროტოტიპის წარდგენისას ჟიური შეაფასებს თქვენი აპლიკაციის მუშაობას, ფუნქციონირებას და მისი გამოყენების სიმარტივეს. თქვენ შეგიძლიათ გამოიყენოთ თქვენი დემო ვიდეო და ბიზნეს გეგმა, რათა ჟიური გაერკვეს თქვენი სამომავლო გეგმების შესახებ აპლიკაციის ახალი ფუნქციების გათვალისწინებით. ახლა კი თქვენ უნდა ფოკუსირება მოახდინოთ MVP-ზე.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">თუ დავალებების პრიორიტეტიზაცია გიჭირთ, დახმარება სთხოვეთ თქვენს მენტორს.</span></li>
</ul>
</li>
</ul>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">ფოკუსი</span>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">გამორთეთ ყველა მოწყობილობა, რომელსაც არ იყენებთ აქტიურად თქვენი გუნდის შეხვედრისას ან პროგრამირების დროს. ასევე, უხმო რეჟიმზე ჩართეთ ყველა შეტყობინება ან სხვა ნებისმიერი ხელისშემშლელი მოწყობილება, რათა სრული ფოკუსირება მოახდინოთ.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">დარწმუნდით, რომ დაასრულეთ ერთიი დავალება, ვიდრე სხვა დავალებაზე გადახვიდოდეთ. რამდენიმე ამოცანის ერთად შესრულება ხშირად ბევრი დროის დაკარგვას იწვევს. თუ წყვილებში მუშაობთ, ნავიგატორი დაგეხმარებათ კონცენტრაციის შენარჩუნებაში.</span></li>
</ul>
</li>
</ul>
<p><span style="font-weight: 400">აქ მოცემულია <a href="http://www.technovationchallenge.org/wp-content/uploads/2017/01/Technical-Checklist-2017.pdf" target="_blank" rel="noopener">Technical Checklist </a></span><a href="http://technovationchallenge.org/curriculum/code-checklist/"><span style="font-weight: 400"> </span></a><span style="font-weight: 400">/კოდების შესამოწმებელი სია, რომელსაც ჟიური გამოიყენებს. თქვენც შეგიძლიათ მისი გამოყნება, რათა შეამოწმოთ თქვენი აპლიკაცია და ჟიურის დამაჯერებლად აუხსნათ თქვენს აპლიკაციაში გამოყენებული კომპნენტების შესახებ. ამ ყველაფრის შესრულებით, დარწმუნებული იყავით, რომ დაიმსახურებთ მაღალ ქულას. რუბრიკის განხილვის ეს ნაწილი 10 ქულას შეადგენს და ჟიური შეამოწმებს თქვენს მიერ გმოყენებულ კომპონენტებს, რომელთა შემადგენლობაში აუცილებლად უნდა იყოს: ტექსტები, რიცხვები, ცვლადები, სიები, loops/ ე.წ. მარყუჟები, პირობები, მონაცემთა ბაზები და მობილური ფუნქციები. ასევე, თქვენ შეგიძლიათ მიიღოთ დამატებითი ქულები თუ წარადგენთ თქვენი flow chart-ის, ქაღალდის პროტოტიპის და აპლიკაციის ეკრანის screenshots -ის ფოტოებს.  </span></p>
<p><span style="font-weight: 400">კარგი იქნება, თუ თქვენს ყველა ნამუშევარს და მუშაობის პროცესს შეინახავთ. რადგან მოგვიანებით შენახული მასალები საშუალებას მოგცემთ შექმნათ თქვენი აპლიკაციის განსხვავებული ვერსიები ან გამოიყენოთ თქვენი შენახული flow chart ან ქაღალდის პროტოტიპი იმ შემთხვევაში თუ ისინი დაგეკარგათ. ასე, რომ ეს მასალები თქვენს დროს საკმაოდ დაზოგავს და აღარ მოგიწევთ მათზე განმეორბით მუშაობა. თქვენ ასევე შეგიძლიათ გამოიყენოთ ეს მასალები, მენტორთან განხილვისას თუ რაიმე დაბრკოლებებს წააწყდებით და საჭირო გახდება თქვენი პრობლემის უფრო მკაფიოდ განმარტება. </span></p>
<h3><b>რეფლექსია</b></h3>
<p><span style="font-weight: 400">გილოცავთ! თქვენ უკვე აპლიკაციის შექმნის გზას ადგახართ, რომელიც სულ მალე მზად იქნება Technovation-ში წარსადგენად. თუ ბევრჯერ მოგიწიათ ჩიხში შესვლა და დაბნევა თქვენი აპლიკაციის კოდირების დროს, შეგიძლიათ გამოიყენოთ მომდევნო კოდირების თავი რჩევის მისაღებად და შეცდომების თავიდან ასაცილებლად. წარმატებას გისურვებთ თქვენი ციფრული პროტოტიპის შექმნაში და ჩვენ, Technovation -ის გუნდი აღფრთოვანებულები ვართ, რომ ეს თქვენ ეს შეძელით!</span></p>
<h4><span style="font-weight: 400">დამატებითი რესურსები</span></h4>
<ul>
<li><a href="http://ai2.appinventor.mit.edu/reference/other/testing.html"><span style="font-weight: 400">MIT Testing Documentation</span></a></li>
</ul>
