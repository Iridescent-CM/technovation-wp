კოდი 7

<h1><b>კოდი</b><b> 7</b></h1>
<h2><b>Debugging Your App</b></h2>
<h3><b>სასწავლო ამოცანები:</b></h3>
<p><span style="font-weight: 400">ამ თავში, თქვენ ისწავლით…</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">რჩევებს თქვენი კოდის ხარვეზების აღმოსაფხვრელად</span></li>
</ul>
<h3><span style="font-weight: 400">რჩევები ხარვეზების განსამუხტად</span></h3>
<p><span style="font-weight: 400">თქვენ უკვე შეძელით იდეების გარდაქმნა კოდად. მაგრამ სამწუხაროდ, არსებობს გარკვეული ხავზები და შეცდომები! </span></p>
<p><span style="font-weight: 400">ჩვენ იმდენად დამოკიდებული ვართ პროგრამული უზრუნველყოფაზე, რომ აღარც კი შეგვიძლია ცხოვრება მის გარეშე. პროგრამულმა უზრუნველყოფამ მრავალი გზით გააადვილა ჩვენი ცხოვრება: ჩვენ ვწერთ იმეილებს, ვსაუბრობთ მეგობრებთან Facebook- ზე, ვთამაშობთ თამაშებს და ვიძიებთ იფორმაციას Google- ის მეშვეობით. პროგრამული უზრუნველყოფა ყველგან გვხვდება, ისე რომ ვერც კი ვაცნობიერებთ ხშირად, მაგალითად მანქანებში, შუქნიშნებში, ტელევიზორებში, სარეცხ მანქანებში და სასმენ საშუალებებში. ჩვენ ყოველ დღიურად ვიყენებთ პროგრამულ უზრუნველყოფას და თითქმის ყოველ სიტუაციაში გვჭრდება მისი ფუნქციონირება! </span></p>
<p><span style="font-weight: 400">რატომ არ არის ეს? რატომ ვაწყდებით ხარვეზებს პირველ რიგში? როგორც აღმოჩნდა, წერილობითი პროგრამული უზრუნველყოფის შექმნა ყოველთვის ადვილი არ არის. პროგრამული უზრუნველყოფა არ არის ფიზიკური პროდუქტი, ასე რომ, არ შეგვიძლია უბრალოდ შევხედოთ მას და განვსაზღვროთ სწორია თუ არა.</span></p>
<p><b>ხარვეზების განმუხტვა/Debugging</b><span style="font-weight: 400"> პროცესის სახელია, რომელსაც კოდის შემქმნელები იყენებენ იმის გასარკვევად თუ რატომ არ მუშაობს მათი კოდი. კოდის გამოწვევის შესრულებისას და რაიმე სირთულის წაწყდომისას, ალბათ უკან დაბრუნება მოგიწიათ, იმის გასარკვევად თუ სად დაუშვით შეცდომა. სწორედ ეს არის ხარვეზების აღმოფხვრის/Debugging არსი და ამ სექციაში მოგაწვდით რჩევებს იმის შესახებ, თუ როგორ მოახერხოთ ამ პროცესის წარმართვა უფრო იოლად.</span></p>
<p><span style="font-weight: 400">შეიძლება უკვე იცით, თუ როგორ უნდა რაიმის კოდირება, მაგრამ მისი გაკეთება ხანდახან მაინც დიდ დროს გვართმევს! გამოცდილი კოდერებიც კი უშვებენ შეცდომებს, მაშინაც კი, როდესაც ისინი ზედმიწევნით აკეთებენ ყველაფერს. ამიტომ მნიშვნელოვანია, რომ შეიქმნას გამარტივებული მეთოდების ხელსაწყოები, რომლებიც დაგეხმარებათ შეცდომების თავიდან აცილებაში. ყველას აქვს განსხვავებული მეთოდი კოდის შეცდომების განსამუხტად. თქვენც გაერკვევით თქვენს მეთოდში გარკვეული პრაკტიკის შემდეგ. შეცომების გასწორება ხშირად კოდირების პროცესში ყველაზე დიდ დროს მოითხოვს. ასე რომ, მართლაც მნიშვნელოვანია, დიდი დრო გაითვალისწინოთ ამ კონკეტული საქმისთვის!</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400">უყურეთ ამ ვიდეოს და გაეცანით ზოგიერთ შეცდომას, რომელსაც შეიძლება თქვენი კოდი შეიცავდეს და როგორ აცნობეთ App Inventor-ს დახმარების გასაწევად! </span></p>
<p><span style="font-weight: 400">თუ ამ პროცესში რაიმე სპეციფიური შეკითხა გაგიჩნდებათ App Inventor-ის მიმართ, შეუერთდით App Inventor ფორუმს </span><a href="https://groups.google.com/forum/#!forum/mitappinventortest"><span style="font-weight: 400">join here</span></a><span style="font-weight: 400">, სადაც განათავსებთ თქვენს შეკითხვას. მიუხეედავად იმისა, რომ App Inventor ძალიან ეხმარება წევრებს და პასუხობს ყველა შეკითხვას, ძალიან დიდი აქტიურობის გამო, უმჯობესია ჯერ ფორუმში მოძებნოთ უკვე ხომ ყოფილა თქვენი შეკითხვები ან მსგავსი პასუხგაცემული. ეს საკმაოდ დიდ დროს დაზოგავს ყველასთვის. </span></p>
<h5><b>სატესტო მონაცემების გამოყენება</b></h5>
<p><span style="font-weight: 400">თუ მართლაც ბევრი და რთული მონაცემები გაქვთ აპლიკაციაში გამოსაყენებლად, მოსახერხებელი იქნება </span><b>ტესტირების მონაცემების</b><span style="font-weight: 400"> გამოყენება. სატესტო მონაცემები მარტივი მონაცემების კომპლექტია, რომელსაც მხოლოდ თქვენი აპლიკაციის შესამოწმებლად გამოიყენეთ, რათა დარწმუნდეთ, რომ სწორად მუშაობს.</span></p>
<p><span style="font-weight: 400">მაგალითისთვის, ვთქვათ, აპლიკაციას აკეთებთ, რომელიც მომხმარებელს უჩვენებს უახლოესი რესტორნის ადგილმდებარეობას. გსურთ, რომ გამოიყენოთ ,,ფუჟენ მაგიდები’’ რესტორნების, ადგილმდებარეობის მონაცემებისა და ტელეფონის ნომრების შესანახად. აპლიკაციის კოდირების დასაწყებად, საჭიროა არაა ყველა რესტორნის მთლიანი სიის მომზადება თქვენს ,,ფუჟენ მაგიდაში’’. შეგიძლიათ მხოლოდ ერთი ან ორი სატესტო რესტორანი შეიყვანოთ და აამუშაოთ თქვენი აპლიკაცია, სანამ რეალურ მონაცემებს დაამატებდეთ. </span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400">"საკმაოდ ძნელია შეცდომის პოვნა თქვენს კოდში, როცა ეძებთ მას; და კიდევ უფრო რთულია, როცა გჯერათ, რომ თქვენი კოდი უშეცდომოა. "</span></p>
<p><span style="font-weight: 400">                    –Steve McConnell, , პროგრამული უზრუნველყოფის საინჟინრო ექსპერტი და ავტორი</span></p>
<h4><span style="font-weight: 400">შეტყობინების გამოყენება</span></h4>
<p><span style="font-weight: 400">დავუშვათ, თქვენმა აპლიკაციამ ,,გაჭედა’’ და არ იცით რატომ! ასეთ შემთხვევაში, შეგიძლიათ გამოიყენოთ notifier/შეტყობინება, რათა დააკონფიგურიროთ, სადაა თქვენი კოდი გატეხილი. აპლიკაციაზე ამ შეტყობინების დასაყენებლად საჭიროა გადმოქაჩოთ იგი ეკრანზე მომხმარებლის ინტერფეისის პალიტრიდან. იგი ეკრანზე გამოჩნდება, როგორც უხილავი კომპონენტი, აი ასე:</span></p>
<p><a href="non-visible notifer"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image00-1.png" alt="image00" width="289" height="120" /></a></p>
<p><span style="font-weight: 400">ამის შემდეგ შეგიძლიათ გამოიყენოთ ეს შეტყობინებები, როგორც სიგნალი, რომელიც შეგატყობინებთ, სად მოხდა თქვენი აპლიკაციის მწყობრიდან გამოსვლა. მაგალითად, მოდით ვთქვათ, რომ აპლიკაციაში იყენებთ პირობით განაცხადს პროცდურის განსახორციელებლად. როდესაც სპინერიდან ირჩევთ </span><b>Option 1</b><span style="font-weight: 400"> მოლოდონი გაქვთ, რომ დაიწყება  </span><b>Procedure 1</b><span style="font-weight: 400">/ პროცედურა 1. </span><span style="font-weight: 400">თუმცა, როდესაც თქვენ აპლიკაციას შეამოწმებთ აღმოაჩენთ, რომ არაფერი არ ხდება! ასე გამოიყურება თქვენი აოლიკაცია:</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image17.png" alt="image17" width="635" height="285" /></p>
<p><span style="font-weight: 400"> შეიძლება იყოს სიტუაცია, როდესაც დარწმუნებული არ ხართ, რომ პრობლემა  </span><b>Procedure1</b><span style="font-weight: 400">-ს ეხება თუ თქვენს მიერ დაყენებულ პირობით განაცხადს. ასევე, შესაძლოა პრობლემა იმ ელემენტებიდან მომდინარეობდეს, რომლებიც სპინერშია მოთავსებული! არსებობს კიდევ ბევრი რამ, საიდანაც შეიძლება პრობლემა იყოს გამოწვეული. შეტყობინების სიგნალის გამოყეება, დაგეხმარებათ გამორიცხოთ პრობლემის გამომწვევი ელემენტები და დარწმუნდეთ თუ სად არის თქვენი შეცდომა. თქვენ ამატებთ სიგნალს თქვენი პირობითი განაცხადის ყველა ნაწილს ისე, როგორც ამ მაგალითშია ნაჩვენები:</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image19.png" alt="image19" width="662" height="452" /></p>
<p><span style="font-weight: 400">როდესაც აპლიკაციას შეამოწმებთ, მიიღებთ შეტყობინებას, რომელიც ამბობს, რომ "ეს აპლიკაცია არაფერს არ აკეთებს!". ახლა იცით, რომ პრობლემა მდგომარეობს თქვენ პირობით წინადადებაში, არა  </span><b>Procedure 1</b><span style="font-weight: 400">-ში. პირობითი განაცხადი ახორცილებს კოდს </span><b>else</b> <span style="font-weight: 400">სექციაში</span><b> if</b> <span style="font-weight: 400">სექციის ნაცვლად. ახლა  შეგიძლიათ შეამოწმოთ ბეჭვდითი შედცომა ხომ არ არსებობს თქვენს პირობით დამოკიდებულ წინადადებაში თუ შეცდომა თქვენი სპინერის ელემენტებშია. </span></p>
<p><span style="font-weight: 400">თუ შეამოწმეთ აპლიკაცია და მიიღეთ სიგნალი, რომლიც გაფრთხილებთ, "ეს აპლიკაცია აკეთებს option1"-ს, მაშინ მიხვდებით, რომ პირობითი განაცხადი სწორად მუშაობს და შეცდომა ახლა </span><b>Procedure 1-</b><span style="font-weight: 400"> ში უნდა ეძებოთ. ამის შემდეგ შეგიძლიათ შეამოწმოთ კოდი </span><b>Procedure 1</b><span style="font-weight: 400"> -ში. აქ მოცემულია სხვა სცენარები, რომლებიც იგივე მეთოდით შეგიძლიათ შეამოწმოთ:</span></p>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">პრობლემის მოგვარება, როდესაც loop -ი ,,ჭედავს’’ <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/ForLoop.png" alt="forloop" width="395" height="160" /></span></li>
</ul>
<ul>
<li style="font-weight: 400"><span style="font-weight: 400">ეკრანის შემოწმება- შეუძლია თუ არა ჩამტვირთვა ან ატვირთვა</span><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/ScreenInitalize.png" alt="screeninitalize" width="355" height="111" /></li>
</ul>
<h5><b>ბლოკების დაშლა და გაუქმება</b></h5>
<p><span style="font-weight: 400">ორი რამ, რაც დაგეხმარებათ, არის იმ ბლოკების დაშლა და გათიშვა, რომლებსაც არ იყენებთ. თუ თქვენ დააჭირეთ ღილაკს App Inventor, მოგეცემათ პარამეტრი -ბლოკის დაშლა ან გამორთვა:</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image11.png" alt="image11" width="442" height="216" /></p>
<p><span style="font-weight: 400">ბლოკების დაშლა გამოიწვევს ბარების შეკუმშვას და იგი მხოლოდ ქვემოთ ერთ ბარზე დავა, როგორც ეს თქვენს ეკრანზეა ნაჩვენები: <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image16.png" alt="image16" width="236" height="40" /></span></p>
<p><span style="font-weight: 400">ეს შეიძლება იყოს სასარგებლო, როდესაც ეკრანზე ბევრი კოდი გაქვთ და არ საჭიროებს გარკვეულ ნაწილებს, რომლებზეც არ მუშაობთ. თქვენი ბლოკების აღსადგენად და გასამრავლებლად, საჭიროა მარჯვენა ღილაკით დაწკაპუნება.</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image04.png" alt="image04" width="397" height="178" /></p>
<p><span style="font-weight: 400">ასევე შეგიძლიათ გამორთოთ ბლოკები. ისინი ისევ თქვენს ეკრანზე იქნებიან, მაგრამ ვერაფრის გაკეთებას ვერ შეძლებენ. ეს ძალიან სასარგებლო იქნება, თუ კოდი გაქვთ ბლოკზე, რომელიც არ მუშაობს და არ გსურთ აპლიკაციის შემოწმება მის გარეშე. ასევე შეგიძლიათ ამის გაკეთება, თუ თქვენ გაქვთ შეტყობინებების ბლოკირება, რომელსაც მხოლოდ შემოწმების მიზნით იყენებდით, მაგრამ ჯერ კიდევ არ გსურთ მისი წაშლა. გამორთული ბლოკები ასე გამოიყურება:</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image18.png" alt="image18" width="415" height="143" /></p>
<p><span style="font-weight: 400">თუ თქვენი ბლოკების ხელახალი ჩართვა გსურთ, დააწკაპეთ მარჯვენა ღილაკით და მიეცით ბრძანება ,,ბლოკების ჩართვა’’.</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image12-1.png" alt="image12" width="433" height="200" /></p>
<h5><b>კომენტარები</b></h5>
<p><span style="font-weight: 400">კარგი პროგრამისტები ხშირად კომენტარს ტოვებენ საკუთარ კოდში იმის შესახებ, თუ რას აკეთებს ეს კონკრეტული კოდი. კომენტარები ძალიან გამოსადეგი იქნება, განსაკუთრებით მაშინ, როდესაც სხვა ადამიანები ნახავენ თქვენს კოდს, მაგალითად, თანაგუნდელები, მენტორები და მსაჯები. კომენტარები ასევე დაგეხმარებათ თუ თქვენს კოდს მოგვიანებით დაუბრუნდებით და დაგავიწყდებათ თუ რას აკეთებენ მისი ნაწილები. კომენტარის დასამატებლად App Inventor- ში, მარჯვენივ დააწკაპუნეთ ბლოკებზე და აირჩიეთ ბრძანება "კომენტარის დამატება":</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image11.png" alt="image11" width="387" height="189" /></p>
<p><span style="font-weight: 400">ამის შემდეგ, ბლოკის კუთხეში, ლურჯ ფონში გამოჩნდება კითხვის ნიშანი და შეგიძლიათ დაამატოთ ტექსტი. კომენტარის ნახვა შეგეძლებათ ამ კითხვის ნიშანზე დაწკაპუნებით: </span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image14.png" alt="image14" width="423" height="226" /></p>
<p><b>“ტექნოლოგიების შექმნის შესწავლით, გოგონები სწავლობენ ლაპარაკს’’ </b></p>
<p><b>–Regina Agyare, Soronko Solutions-ის დამფუძნებელი</b></p>
<p>&nbsp;</p>
<h3><b>ვერსიის კონტროლი</b></h3>
<p><span style="font-weight: 400">დავუშვათ, თქვენ გაქვთ აპლიკაციის ერთი ნაწილი, რომელიც ფუნქციონირებს. როდესაც შექმნით და შეამოწმებთ თქვენი აპლიკაციის მეორე ნაწილს, ყველაფერი წყვეტს მუშაობას, მათ შორის, ის ნაწილიც რომლიც მანამდე ფუნქციონირებდა! ცდილობთ წაშალოთ ბლოკები, რომლებიც დაამატეთ, მაგრამ თქვენი მთელი აპლიკაცია ჯერ კიდევ არ მუშაობს! ახლა არ ხართ დარწმუნებული, რა მოხდა და გსურთ "გაუქმება" ღილაკს დააწკაპოთ უკან დასაბრუნებლად.</span></p>
<p><span style="font-weight: 400">მსგავსი შემთხვევების თავიდან ასაცილებლად, სასარგებლო იქნება თქვენი აპლიკაციის სხვადასხვა </span><b>ვერსიის</b><span style="font-weight: 400"> შექმნა. ეს განსხვავებული ვერსიები შეინარჩუნებს თქვენს კოდს ზუსტად ისე, რომ მოგვანებთ თუ შეცდომას დაუშვებთ და არ გეცოდინებათ მისი გამოსწორების გზა, შეგიძლიათ შეხვიდეთ ბოლოს შენახულ სამუშაო ვერსიაში. თქვენ ასევე შეგიძლიათ გამოიყენოთ ვერსიის კონტროლი თუ თქვენი აპლიკაციის ფუნქციების ექსპერიმენტებს აკეთებთ და არ ხართ დარწმუნებული, შეინახოთ თუ არა ისინი. App Inventor-ში არსებობს ორი გზა სხვადასხვა ვერსიიის დასამახსოვრებლად “save as” და “checkpoint”.</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image13.png" alt="save as" width="452" height="316" /></p>
<p><span style="font-weight: 400">“save project as”ვარიანტი საშუალებას გაძლევთ შექმნათ იმ კოდის ასლი, რომელზეც მუშაობთ და შეინახოთ ახალი სახელით.  </span></p>
<p><span style="font-weight: 400">მაგალითად, ვთქვათ, პროექტი, რომელზეც მუშაობთ ქვია "ტესტი". თქვენ შეგიძლიათ შეინახოთ პროექტი, რომელიც მუშაობს "test_version2" და ასე შემდეგ კიდევ დაამატოთ კოდი. თუ რაიმე აგერევათ, შეგიძლიათ უკან დაუბრუნდეთ პროექტს სახელწოდებით "ტესტი"</span></p>
<p><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image09.png" alt="checkpoint" width="1000" height="700" /></p>
<p><span style="font-weight: 400"> “checkpoint” ვარიანტი საშუალებას გაძლვთ შეინახოთ თქვენი კოდი ახალი სახელით. </span></p>
<p><span style="font-weight: 400">მაგალითად, ვთქვათ, პროექტს, რომელზეც მუშაობთ ქვია "ტესტი". Checkpoint შეინახავს თქვენს მიმდინარე კოდს, როგორც პროექტს სახელად "test_checkpoint1". ამის შემდეგ შეგიძლიათ სამუშაობის გაგრძელება და თუ რამე აგერიათ, შეგიძლიათ დაბრუნდეთ უკან პროექტში "test_checkpoint1".</span></p>
<p><span style="font-weight: 400">უყურეთ ამ ვიდეოს უფრო მეტი ინფორმაციის შესასწავლად ვერსიების შენახვის შესახებ App Inventor-ში</span></p>
<h2><b>რეფლექსია</b></h2>
<p><span style="font-weight: 400">გილოცავთ! თქვენ თითქმის დაასრულეთ აპლიკაციის შექმნა, რომელსაც Technovation-ის გუნდს წარუდგენთ. ჩვენ მოხარულები ვართ, რომ ეს შეძელით, რომელიც სულაც არ იყო იოლი სამუშაო თქვენი გუნდისთვის. </span></p>
<p><span style="font-weight: 400">თუ ეს პირველი შემთხვევა იყო, როდესაც შექმენით აპლიკაცია ან გამოიყენეთ კოდირება, უდავოდ ბევრი შეისწავლეთ  და დააძლიეთ იმედგაცრუება. ზოგიერთმა გუნდმა შეძლო ენობრივი ბარიერების გადალახვა და მწირი რესურსებით მუშაობა, რაც ძალიან რთულია.</span></p>
<p><span style="font-weight: 400">ჩვენ ვამაყობთ თქვენით, და იმედი მაქვს, რომ თქვენც ძალიან ამაყობთ საკუთარი თავით. თქვენ ბეჯითად იმუშავეთ ერთად და გადალახეთ ბევრი დაბრკოლება. ასევე, ბევრი შეისწავლეთ ერთმანეთისგან. თქვენ ხართ შთაგონების წყარო ჩვენთვის და კიდევ მრავალი სხვისთვის.</span></p>
<h3><span style="font-weight: 400">დამატებითი რესურსები:</span></h3>
<ul>
<li style="font-weight: 400"><a href="http://ai2.appinventor.mit.edu/reference/other/testing.html"><span style="font-weight: 400">MIT Testing Documentation</span></a></li>
<li style="font-weight: 400"><a href="https://www.youtube.com/watch?v=itCnknI5PlY"><span style="font-weight: 400">Debugging Video</span></a></li>
</ul>
