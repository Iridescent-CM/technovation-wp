<ul>
 	<li><a href="#conditions">Condicionais</a></li>
 	<li><a href="#ifelse">If/Else operador</a></li>
 	<li><a href="#act1">Atividade</a></li>
 	<li><a href="#elseif">Else/If operador</a></li>
 	<li><a href="#act2">Atividade</a></li>
 	<li><a href="#andop">AND operador</a></li>
 	<li><a href="#orop">OR operador</a></li>
 	<li><a href="#notop">NOT operador</a></li>
 	<li><a href="#act3">Atividade</a></li>
 	<li><a href="#forloop">For loops</a></li>
 	<li><a href="#foreach">For each loops</a></li>
 	<li><a href="#whileloop">While loops</a></li>
 	<li><a href="#codechal">Desafio de programação #3 </a></li>
</ul>
<h3><strong>Objetivos de aprendizagem</strong>:</h3>
Nesta unidade, você...
<ul>
 	<li>Aprenderá sobre condicionais e como escrevê-las</li>
 	<li>Aprenderá como usar operadores de lógica no seu código</li>
 	<li>Aprenderá como usar loops "for" (para) e "while" (enquanto)</li>
 	<li>Criar um aplicativo que pesquisa uma base de dados</li>
</ul>
Antes de começar esta unidade, vamos revisar alguns conceitos das unidades 1 e 2 de programação que você usará nesta unidade.
<ul>
 	<li><b>Algoritmos</b> são instruções passo a passo para o computador seguir.</li>
 	<li><b>Booleanos</b> são tipos de dados com dois valores: verdadeiro e falso.</li>
 	<li><b>Event Handlers</b> dizem ao seu app o que fazer quando algo acontece.</li>
 	<li><b>Variáveis</b> Dados que podem mudar de valor.</li>
</ul>
Antes de começar a unidade, jogue este jogo. Ele ajudará você a se familiarizar com os conceitos que aprenderá. Se você não conseguir resolver os cinco níveis, tente voltar aqui depois que completar esta unidade! 
<p style="text-align: center;">
<a href="https://www.madewithcode.com/projects/robots" target="_blank">Robô Made With Code</a></p>

<h2 id="conditions"><strong>Condicionais</strong></h2>
Até agora, você deve ter usado event handlers várias vezes! Nos desafios passados, quando seu usuário apertava um botão, o aplicativo fazia algo. Por exemplo, no aplicativo de lista de tarefas, o botão enter adicionava itens à lista. O <strong>evento</strong> era o usuário apertar "enter" e a forma como o aplicativo respondia era adicionando o texto do usuário à lista de tarefas. O código do aplicativo funcionava da seguinte maneira:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/11/Enter-Pressed1-533x1024.png" alt="enter-pressed1" width="99" height="189" />

É possível ter notado no aplicativo exemplo, ou na sua "lista de tarefas", que o aplicativo permitia adicionar uma caixa em branco para a lista. Por causa disso, o usuário poderia gerar uma lista muito longa sem itens. 

Digamos que você não quisesse que ele pudesse adicionar uma caixa em branco para a lista. Então, toda vez que o usuário apertasse "enter", o código perguntaria para o aplicativo: "o usuário escreveu alguma coisa"? Se a resposta for sim, então o aplicativo adicionaria o texto na lista. Se for não, então o aplicativo não faria nada. Agora, seu código deve parecer o seguinte:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed2-352x1024.png" alt="enter-pressed2" width="142" height="411" />

Essa é uma maneira inteligente de consertar o problema, mas é importante lembrar que os computadores não pensam por si próprios, então não é possível perguntar coisas como se estivesse perguntando a outra pessoa.  Na programação, quando quiser fazer uma pergunta ao aplicativo, você pode programar para ele verificar uma condição. Uma condição é algo que um computador determina como verdadeiro ou falso.

Quando programar seu aplicativo para verificar uma condição, devem haver apenas duas possibilidades de resultado. Verdadeiro, ou "true", significa que sim, a condição é verdadeira. Falso, ou "false", significa que não, ou seja, que a condição é falsa. É possível comandar que o aplicativo faça várias coisas dependendo da condição ser verdadeira ou falsa. Essa é uma maneira de perguntar a seu aplicativo, através de uma condicional, se o usuário digitou texto:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed3-343x1024.png" alt="enter-pressed3" width="152" height="455" />

Lembra-se dos dados booleanos vistos na Unidade 2: Dados e  variáveis? Booleanos são tipos de dados que podem ser verdadeiros ou falsos. Quando seu aplicativo avaliar uma condição, ele dará um valor booleano (output)!
<h2><strong>Estruturas condicionais</strong></h2>
<h5 id="ifelse">If/Else <strong>Estruturas</strong></h5>
Agora que sabe o que é uma condição, como ela pode ser usada na programação? Na programação, é possível pedir para seu computador avaliar condições escrevendo estruturas condicionais.  Estruturas condicionais são a maneira pela qual computadores tomam decisões. Estruturas condicionais devem sempre ter uma parte if, ou se, que diz o que o aplicativo deve fazer se a condição for verdadeira. Estruturas condicionais também costumar ter um parte else, ou outro, que fala para seu aplicativo o que fazer quando a condição é falsa. Se você deixar a parte else de fora, seu aplicativo não fará nada quando a condição for falsa. Agora, o código para quando o botão "enter" for apertado deve se parecer com isto:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Enter-Pressed4-550x1024.png" alt="enter-pressed4" width="262" height="488" />

Estruturas condicionais se parecem com isso no App Inventor.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-12.05.58-PM.png" alt="screen-shot-2016-11-01-at-12-05-58-pm" width="254" height="161" />

Os blocos funcionam assim. Coloca-se uma condição depois de if. Você programa o que seu aplicativo deve fazer se a condição for verdadeira ao lado de then, ou então, e coloca o que quer que seja feito se a condição for falsa ao lado de else. Se a condição for verdadeira, apenas o código para then será executado e tudo aquilo do lado de else será ignorado. Se a condição for falsa, todo o código para then será ignorado e tudo aquilo ao lado de else será executado.

Veja o exemplo. O bloco condicional fica assim após adicionar o código. 

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/if-statement.png" alt="if-statement" width="463" height="243" />

Aqui, quando o usuário clica em "enter", o aplicativo vai avaliar a seguinte condição: "o comprimento da string digitada na caixa de texto não é igual a zero". Se a condição for verdadeira (o comprimento da string não for igual a zero), isso significa que o usuário digitou texto, então o aplicativo adicionará o que foi escrito à lista. Se a condição for falsa (o comprimento da string é igual a zero), então o aplicativo vai ignorar o código escrito para "then" e passará direto para a parte "else", que alerta o usuário para escrever algo.
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="act1"><strong>Atividade</strong></h3>
Você consegue pensar em estruturas condicionais que ajudam a tomar decisões todos os dias? Para começar, aqui vão alguns exemplos:
<ul>
 	<li>Se estiver chovendo, leve um guarda-chuva</li>
 	<li>Se estiver com fome, faça um lanche, se não, espere até mais tarde</li>
 	<li>Se seu cachorro estiver chorando, leve-o para uma caminhada</li>
 	<li>Se estiver frio lá fora, leve uma jaqueta</li>
 	<li>Se seu cabelo estiver embaraçado, penteie-o</li>
 	<li>Se você tiver </li>
 	<li>Se você estiver doente, vá ao médico</li>
 	<li>Se seu celular estiver sem bateria, carregue-o</li>
</ul>
</div>
<h5 id="elseif">If/Else <strong>Estruturas</strong></h5>
Até agora você aprendeu como escrever estruturas que avaliam uma condição e têm dois resultados possíveis. Nesta seção, você aprenderá sobre como fazer estruturas condicionais maiores! 
<table>
<tbody>
<tr>
<td style="text-align: center;" width="50%">Estrutura condicional com dois resultados possíveis.</td>
<td style="text-align: center;">Estrutura condicional com três resultados possíveis. A Condição 2 só é avaliada caso a Condição 1 seja falsa.</td>
</tr>
<tr>
<td style="vertical-align: top;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition-1024x664.png" alt="condition" width="246" height="159" /></td>
<td style="vertical-align: top;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image04-1-1024x851.png" alt="image04" width="314" height="261" /></td>
</tr>
</tbody>
</table>
Os blocos se parecem com isto no App Inventor:
<table>
<tbody>
<tr>
<td style="vertical-align: top;" width="25%"> <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image29.png" alt="image29" width="150" height="230" /></td>
<td style="vertical-align: top;"> <img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image19.gif" alt="how to use the if else block" width="640" /></td>
</tr>
</tbody>
</table>
A primeira condição vai ao lado de if e a segunda condição vai ao lado de else if.  Vamos ver um exemplo:

Você está desenvolvendo um aplicativo apenas para usuários de 13 a 18 anos e quer que o aplicativo avise os usuários caso sejam novos ou velhos demais para usar o aplicativo. Existem três resultados possíveis: 
<ol>
 	<li>O usuário é novo demais</li>
 	<li>O usuário é velho demais</li>
 	<li>O usuário tem a idade adequada</li>
</ol>
O usuário digita a idade no aplicativo e ele armazena isso numa variável chamada "age" ou idade. Veja como usar uma estrutura if/else if/else para verificar se os usuários têm a idade certa.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image08-1-1024x457.png" alt="if/else else/if response blocks" width="633" height="283" />

A primeira condição testa se a idade for menor que 13. Se for, o aplicativo avisa que o usuário é muito novo. Se não for, o usuário testa se a idade é maior que 18. Se for, o aplicativo avisa que o usuário é muito velho. Se não for mais velho que 18, o aplicativo avisa que a idade é adequada.

É possível adicionar quantas condições quiser usando a estrutura else if, mas é importante notar a ordem em que o aplicativo avalia essas condições. O código deve sempre começar com a primeira condição e depois continuar até encontrar uma condição verdadeira. Pode-se pensar que o código está procurando por uma "frase verdadeira". Ao encontrar uma condição verdadeira, ele executa o código escrito abaixo disso. Se nenhuma for verdadeira, ele executa o que estiver escrito em else.

Aqui estão algumas coisas para se ter em mente quando usar estruturas do tipo If/ Else/ Else If
<ul>
 	<li>Você pode testar quantas condições quiser</li>
 	<li>A estrutura funciona de cima para baixo, então coloque a condição que você quer testar antes no topo da estrutura</li>
 	<li>Apenas uma coisa acontecerá, e ela será aquilo que for definido para a primeira condição que for verdadeira</li>
</ul>
Para mais informações sobre condicionais, <a href="http://appinventor.mit.edu/explore/ai2/support/blocks/control.html" target="_blank">acesse o site do MIT</a>.
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="act2"><strong>Atividade</strong></h3>
Identificar quais condições seu aplicativo deve avaliar pode ser complicado! Algumas vezes, você saberá o que quer que o aplicativo faça, mas pode ser difícil saber quais condições verificar. Pratique escrevendo condições que você acha que os aplicativos verificam quando você os usa.  Aqui está um exemplo para começar! Veja se você consegue pensar em outros.

Entrar em uma conta de rede social:
<ul>
 	<li>Condições para verificar:</li>
 	<li>O nome do usuário está correto</li>
 	<li>A senha está correta</li>
 	<li>O usuário não tentou logar mais do que cinco vezes</li>
</ul>
Outra parte complicada de se escrever estruturas condicionais é traduzir a condição para algo que seu aplicativo possa realmente entender. No exemplo anterior, verificamos a idade do usuário ao criar uma variável igual à idade do usuário. Criar condições não é algo intuitivo, leva um tempo de prática! Perguntas para se pensar ao definir condições:
<ol>
 	<li>A sua condição depende das informações digitadas pelo usuário?</li>
 	<li>Serão necessárias variáveis?
<ol type="a">
 	<li>Se sim, de que tipo? Numeral, lista ou string?</li>
</ol>
</li>
 	<li>Você pode usar operadores numéricos, como menor que (<) , maior que (>), igual a (=), diferente de (≠) na sua condição?</li>
 	<li>É preciso comparar o valor de algo com um valor em uma base de dados?</li>
 	<li>É preciso comparar algo com dados de outros locais, como sites? (Isso será discutido com mais profundidade na unidade de programação 4)</li>
 	<li>De quais tipo de dados a condição depende? Você vê alguma operação para esse tipo de dados que ajudará você? 
<ol type="a">
 	<li>Ex: Comparar duas strings, descobrir o comprimento de uma string, adicionar itens a uma lista, comparar duas listas etc.</li>
 	<li>Tente ver as funções do App Inventor rapidamente para ver se elas ajudam você.</li>
</ol>
</li>
</ol>
Hora de praticar! A partir de um ou dois exemplos que você identificou acima, tente traduzi-los para código. 

</div>
<h2 id="andop"><strong>Lógica</strong></h2>
Até agora, você aprendeu a comandar seu aplicativo a fazer coisas diferentes usando estruturas condicionais. É possível lidar com muitos novos problemas conhecendo alguns operadores de lógica. Operadores de lógica usam booleanos tanto como input, entrada, quanto como output, saída. Como o seu aplicativo vê condições como verdadeiras ou falsas, você pode usar as condições como inputs para booleanos. Há três funções principais de lógica que veremos nesta seção: AND, OR e NOT
<h5>AND <strong>Operador</strong></h5>
A função AND pega dois inputs e ambos devem ser verdadeiros para o output também ser verdadeiro. Caso alguma das condições seja falsa, o código avaliará a estrutura toda como falsa. As possibilidades de resultado usando o operador AND são as seguintes:
<p style="text-align: center;">Verdadeiro <strong>E</strong> Verdadeiro = Verdadeiro</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image34.png" alt="true/true blocks" width="318" height="62" /></p>
<p style="text-align: center;">Verdadeiro <strong>E</strong> Falso = Falso </p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image24-1.png" alt="true/false blocks" width="336" height="61" /></p>
<p style="text-align: center;">Falso <strong>E</strong> Verdadeiro = Falso</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image38.png" alt="false/true blocks" width="331" height="60" /></p>
<p style="text-align: center;">Falso <strong>E</strong> Falso = Falso</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image07-1.png" alt="false/false blocks" width="353" height="66" /></p>
<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition3-1024x608.png" alt="condition3" width="407" height="242" />

Observação: Usar o operador AND é diferente de usar else if, porque ambas as condições serão avaliadas ao mesmo tempo, ao invés de consecutivamente. Ambas precisam ser verdadeiras para o aplicativo ver a condicional como verdadeira.
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h5><strong><span style="color: #ffffff;">Exemplos</span></strong></h5>
O operador AND deve ser usado quando duas condições devem ser verdadeiras para algo acontecer. Exemplos de como você pode usar AND no seu aplicativo!
<ul>
 	<li>Fazendo login na mídia social:
<ul>
 	<li>Se (o nome de usuário estiver certo) AND (a senha estiver correta) ---> permitir que o usuário faça o login</li>
</ul>
</li>
 	<li>Vencendo um jogo:
<ul>
 	<li>Se (o jogador terminar o nível) AND (o tempo for menor que 3 minutos) ---> o usuário vence</li>
</ul>
</li>
 	<li>Encontrando uma loja:
<ul>
 	<li>Se (a loja estiver aberta) AND (próxima do usuário) ---> a loja é mostrada nos resultados	</li>
</ul>
</li>
 	<li>Postando fotos:
<ul>
 	<li>Se (o usuário selecionou uma foto) AND (o usuário inseriu um caption) ---> o usuário pode postar a foto</li>
</ul>
</li>
</ul>
Você consegue pensar em mais exemplos?

</div>
<h5>OR <strong>Operador</strong></h5>
A função OR (OU) avalia dois inputs e apenas um deles precisa ser verdadeiro para o output ser verdadeiro. Se nenhuma das condições não for verdadeira, seu código avaliará a estrutura como falsa. Os possíveis resultados usando o operador OR são os seguintes:
<p style="text-align: center;">Verdadeiro <b>OU</b>Verdadeiro = Verdadeiro</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image33-1.png" alt="true or true blocks" width="284" height="53" /></p>
<p style="text-align: center;">Verdadeiro <strong>OU</strong>Falso =Verdadeiro</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image57.png" alt="true or false blocks" width="299" height="58" /></p>
<p style="text-align: center;">Falso<strong>OU</strong>Verdadeiro =Verdadeiro</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image26-1.png" alt="false or true blocks" width="299" height="63" /></p>
<p style="text-align: center;">Falso<strong>OU</strong>Falso = Falso</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image49.png" alt="false or false blocks" width="313" height="61" /></p>
<img class="aligncenter" src="http://technovationchallenge.org/wp-content/uploads/2016/09/Condition4-3.png" alt="" width="408" height="239" />

Observação: O operador OR pode também ser similar ao else if. Usar o operador OR é diferente porque ambas as condições serão avaliadas ao mesmo tempo, ao invés de consecutivamente. O operador OR é melhor quando você tiver duas condições que devem ter o mesmo resultado, caso sejam verdadeiras.
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">

<strong>Exemplos</strong>
<ul>
 	<li>Perdendo um jogo
<ul>
 	<li>(se o tempo acabar) OU (o jogador perder todas as vidas) ---> o jogador perde</li>
</ul>
</li>
 	<li>Mostrando resultados de pesquisa
<ul>
 	<li>(se o título for igual) OU (a descrição for igual) ---> o resultado da busca é mostrado</li>
</ul>
</li>
 	<li>Recomendando ao usuário vídeos para assistir
<ul>
 	<li>(Se o usuário já assistiu) OU (ele é semelhante a algo que o usuário gostou) --- > o vídeo é recomendado para o usuário</li>
</ul>
</li>
</ul>
Você consegue pensar em mais exemplos?

</div>
<h5 id="notop">NOT <strong>Operador </strong></h5>
O operador NOT (NÃO) é mais fácil! O operador NOT troca o valor de um booleano para o valor oposto. 
<p style="text-align: center;"><b>NÃO</b> verdadeiro = falso</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image13-1.png" alt="not true blocks" width="167" height="52" /></p>
<p style="text-align: center;"><b>NÃO</b> falso = verdadeiro</p>
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image43.png" alt="not false blocks" width="178" height="44" /></p>
Às vezes, é mais fácil verificar uma condição para o oposto daquilo que você quer. Para os seguintes cenários, é possível usar o operador NOT.
<p style="text-align: center;"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Condition5-1024x825.png" alt="condition5" width="283" height="228" /></p>

<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h5><strong><span style="color: #ffffff;">Exemplos</span></strong></h5>
<ul>
 	<li>Você quer verificar se há um texto na caixa de texto, mas é mais fácil verificar se a caixa de texto está vazia, então você usa o operador NÃO.
<ul>
 	<li>Se NÃO(textbox = “ ”) ---> fazer isso</li>
</ul>
</li>
 	<li>Você quer excluir resultados de pesquisa sobre cachorrinhos, mas é mais fácil mostrar resultados que contém "cachorrinhos", então você usa o operador NOT.
<ul>
 	<li>Se NÃO(artigo contém a palavra "cachorrinho") ---> os resultados são mostrados</li>
</ul>
</li>
 	<li>Você pode combinar operadores de lógica para fazer mais coisas. Para excluir resultados sobre cachorrinhos, mas incluir resultados sobre gatinhos, a seguinte forma pode ser usada:
<ul>
 	<li>Se NÃO(artigo contém a palavra "cachorrinho") E (artigo contém a palavra "gatinho") ---> os resultados são mostrados</li>
</ul>
</li>
</ul>
</div>
<div style="background-color: #28a880; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h3 id="act3">Atividade</h3>
Sabia que é possível usar AND, OR e NOT em uma pesquisa no Google? Essa é uma boa forma de aumentar ou reduzir o número de resultados de uma busca quando estiver pesquisando algo! Tente você mesma! Certifique-se de usar AND, OR ou NOT em letras maiúsculas. Veja os exemplos abaixo:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image45.png" alt="image45" width="482" height="331" />

Pesquisando 2017 AND Technovation gera resultados que contenham tanto 2017 quanto Technovation
Pesquisando 2017 OR Technovation gera resultados que contenham 2017 ou Technovation  

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image25-1.png" alt="image25" width="481" height="313" />

</div>
<h2 id="forloops"><strong>Loops</strong></h2>
Computadores são ótimos para fazer a mesma coisa repetidas vezes de maneira rápida e sem erros! Você pode aproveitar isso através de loops. Loop é um bloco de código que se repetirá várias vezes.

Há dois tipos de loops, loops while e loops for. Loops while continuam fazendo algo até que uma condição deixe de ser verdadeira. Loops for fazem algo um número definido de vezes. 

Loops For
Loops for repetem um bloco de código um número definido de vezes. A razão de serem chamados de for (por) é porque você pode dizer para seu aplicativo por quantas vezes quer que repita o código. Pense nisso como os loops comandando seu aplicativo "repita isso por 15 vezes" ou "repita isso por 5 vezes".

Loops for usam uma variável chamada de counter, ou contador, para contar quantas vezes o código foi repetido. É possível controlar quantas vezes o loop repete definindo onde começa e onde termina o counter. Também é possível definir em quanto o counter aumenta cada vez que o código repete. Na maioria dos cenários, o counter aumenta em 1 por repetição do loop.

No App Inventor, os loops for são assim: 

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image21.png" alt="for loop block" width="276" height="153" />

A parte que diz number é o counter. O nome do counter é number, mas você pode alterar isso. O number começa em 1 e para quando for igual a 5. Cada vez que o código no loop repete, o number aumenta em 1. Então, esse loop repetirá o código 5 vezes. Agora, esse loop não faria nada, porque a parte do, que diz o que ele deve fazer, está vazia. Veja o exemplo.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image41-1024x449.png" alt="image41" width="431" height="189" />

Nada foi alterado na variável number, mas um pouco de código foi adicionado à parte do do loop. Cada vez que o loop for executado, o aplicativo enviará um alerta "hello" para o usuário, então, o usuário será alertado 5 vezes. O aplicativo executará o loop da seguinte maneira:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-2.00.15-PM.png" alt="screen-shot-2016-11-01-at-2-00-15-pm" width="448" height="414" />

Esse loop seria útil caso quisesse alertar "hello" para o usuário 5 vezes. Isso pode não ser tão útil, já que não é difícil colocar 5 blocos de notificação consecutivos dizendo "hello". Mas e se quisesse alertar "hello" para o usuário 100 vezes? Seria muito mais fácil fazer um loop do que colocar 100 blocos consecutivos!

Outra maneira em que loops for podem ser úteis é usando a variável counter no código. Cada vez que o loop for executado, a variável counter terá um valor diferente, e isso pode ser muito útil. Veja o exemplo. 

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image27-1-1024x402.png" alt="image27" width="464" height="182" />

Neste loop for, usamos a variável number ligada à palavra "hello". O number aumenta em 1 a cada vez, então o aplicativo mostrará coisas diferentes toda vez que executar. O aplicativo executará o loop da seguinte maneira agora: 

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/Screen-Shot-2016-11-01-at-2.04.17-PM.png" alt="screen-shot-2016-11-01-at-2-04-17-pm" width="445" height="381" />
<h5 id="foreach">For each <strong>Loops </strong></h5>
Outra maneira de se usar loops for no App Inventor é a seguinte:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image16-1.png" alt="image16" width="219" height="88" />

Aqui, a variável counter é chamada item e já vem configurada para repetir o número de itens em uma lista. Esses loops podem ser úteis sempre que precisar fazer algo com uma lista. Veja o exemplo.

Digamos que tenha uma lista de números e queira somar todos os números da lista e armazená-los em uma variável chamada sum, ou somatório.  Com um loop for each, isso seria feito da seguinte maneira

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/listofnumbers.png" alt="listofnumbers" width="404" height="94" />

<b><img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/numberlist.png" alt="numberlist" width="500" height="106" /></b>

Cada vez que o loop é executado, a variável sum terá um item da lista numberList adicionado a ela. O loop automaticamente para depois que todos os números da lista forem adicionados!

Observação: Você pode ter notado que as variáveis counter nesta seção se aproximam bastante das variáveis locais que aprendeu na unidade de programação 2! Se percebeu isso, você está correta! Assim como variáveis locais, elas só serão utilizadas dentro do loop. 
<h5 id="whileloop">While <strong>Loops </strong></h5>
Loops while são loops que se repetem até que uma condição deixe de ser verdadeira. A razão de se chamarem loops while (enquanto) é porque o código se repete enquanto uma condição permanece verdadeira. Pense nisso como os loops while comandando seu aplicativo a "enquanto isso acontece, repita isso" ou "enquanto isso não mudar, repita isso". 
<div style="background-color: #00abad; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h5><strong><span style="color: #ffffff;">Exemplo</span></strong></h5>
Você está numa festa e quer que a música toque até que todos os convidados vão embora. Sua festa pode ser descrita com o seguinte loop:
<ul>
 	<li>While (pessoas na festa &gt; 0)</li>
 	<li>do:  continuar tocando música</li>
</ul>
E se quiser que a música pare de tocar quando ficar mais tarde que meia-noite? Através de lógica, é possível programar loops while para terminarem baseados em várias condições. Agora, sua festa pode ser descrita com o seguinte loop:
<ul>
 	<li>While (pessoas na festa > 0) OR (horário < meio-noite) </li>
 	<li>do: continuar tocando música</li>
</ul>
Nesse caso, a música pararia assim que todos forem embora, ou se passar da meia-noite.

</div>
Para usar um loop while, é necessário definir uma condição que começa como verdadeira. Se sua condição começar como falsa, o loop nunca será executado. O loop verifica a condição antes de repetir para verificar se a condição ainda é verdadeira. 

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/StartLoop-Arrow3-436x1024.png" alt="startloop-arrow3" width="169" height="397" />

Os loops while são assim no App Inventor:

<img class="aligncenter" src="http://www.technovationchallenge.org/wp- content/uploads/2016/09/image35.png" alt="while loop block" width="159" height="105" />

É que os loops while encontrem erros! Se você escolher uma condição que nunca será falsa, seu loop nunca terminará. Isso se chama loop infinito. Veja o exemplo.

<img class="aligncenter" src="http://www.technovationchallenge.org/wp-content/uploads/2016/09/image52.png" alt="image52" width="389" height="156" />

Como 1 é sempre igual a 1, essa condição nunca será falsa! Ao executar esse código no App Inventor, o celular vai parar e não conseguiremos fazer nada. É possível também receber uma mensagem que diz que o App Inventor parou de funcionar. 
<h2 id="codechal">Desafio de programação #3 </h2>
Descrição: Crie um aplicativo que permita ao usuário buscar informações em uma base de dados e ver os resultados. A base de dados deve conter nomes e descrições de pessoas famosas, locais, filmes, músicas, eventos ou o que mais você quiser. Certifique-se de ter, no mínimo, três entradas na base de dados. 

Tente fazer o desafio sozinha antes de ler as <strong><a href="http://www.technovationchallenge.org/curriculum/code-3-challenge/" target="_blank">instruções</a>.</strong> As instruções são apenas uma maneira de solucionar o desafio. 
<p style="text-align: center;"><a href="https://play.google.com/store/apps/details?id=appinventor.ai_alliec.DatabaseSearch" target="_blank">
<strong> Baixe o aplicativo exemplo na loja Google Play</strong>
</a></p>

<div style="background-color: #006667; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
<h2><strong><span style="color: #ffffff;">Reflexão</span></strong></h2>
Parabéns por completar essa aula! Por mais que fosse pesada, ela será muito útil para a criação do seu aplicativo! Não se esqueça de que é sempre possível revisar algo que não tenha entendido.

Palavras-chaves:
<ul>
 	<li><strong>Booleanos </strong> tipo de dados que podem ser verdadeiros ou falsos</li>
 	<li><strong>Condições </strong> algo que um aplicativo avalia como verdadeira ou falsa</li>
 	<li><strong>Estrutura condicional </strong> diz ao aplicativo o que fazer após avaliar as condições</li>
 	<li><strong>Operador AND </strong> avalia como verdadeira se todos os inputs foram verdadeiros</li>
 	<li><strong>Operador OR </strong> avalia como verdadeira se um dos inputs for verdadeiro</li>
 	<li><strong>Operador NOT </strong> avalia como o oposto do input</li>
 	<li><strong>Loop </strong> um bloco de código que se repete</li>
 	<li><strong>Loops For </strong> repete um bloco de código um número definido de vezes</li>
 	<li><strong>Loops For each </strong> repete um bloco de código um número definido de vezes em uma lista</li>
 	<li><strong>Loop While  </strong> repete um bloco de código enquanto uma condição for verdadeira</li>
</ul>
</div>
