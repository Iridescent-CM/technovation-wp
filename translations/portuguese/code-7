Unidade de programação 7: Como depurar bugs no aplicativo

<ul>
	<li><a href="#tips">Dicas de depuração </a></li>
	<li><a href="#testdata">Como usar dados de teste</a></li>
	<li><a href="#notifer">Como usar o Notifier</a></li>
	<li><a href="#collapse">Como minimizar e desabilitar blocos </a></li>
	<li><a href="#comments">Como adicionar comentários</a></li>
	<li><a href="#version">	Controle de versões </a></li>
	<li><a href="#reflect">Reflexão </a></li>
</ul>
<h3><strong>Objetivos de aprendizagem:</strong></h3>
<p>Nesta unidade, vocês aprenderão...</p>
<ul>
	<li style="font-weight: 400">Dicas para depurar bugs no código</li>
</ul>
<h3 id="tips"><strong>Dicas de depuração</strong></h3>
<p>Vocês traduziram as suas ideias para código, mas agora estão encontrando bugs. Que saco!</p>
<p>Dependemos tanto da vida com softwares que não nos imaginamos sem. De várias maneiras, softwares tornaram nossa vida mais fácil: escrevemos e-mails, conversamos com amigos no Facebook, jogamos e buscamos coisas no Google. Existem softwares em todo lugar, então nem sabemos quando estamos usando um, como por exemplo, em carros, semáforos, TVs, máquinas de lavar e aparelhos auditivos. Estamos tão acostumados a usar softwares que esperamos que eles nunca deixem de funcionar!</p>
<p>Então, por que eles às vezes não funcionam? Por que encontramos bugs ou erros? Como vimos, escrever código para software não é sempre fácil. Softwares não são produtos físicos, então não podemos só ver se está tudo certo.</p>
<p>A depuração de bugs, ou debugging, é o nome do processo que os programadores usam para saber por que o código não está funcionando. Assim como vocês fizeram nos Desafios de Programação, é possível que tenham encontrado algo que forçou vocês a revisarem o código e encontrarem onde estão os erros. Essa é a essência da depuração de bugs. Nesta seção, forneceremos dicas para facilitar esse processo.</p>
<p>Às vezes, vocês podem saber como programar algo, mas mesmo assim isso ainda leva muito tempo! Bons programadores também cometem erros, até mesmo quando sabem exatamente o que estão fazendo, então é importante construir uma caixa de ferramentas e técnicas de depuração de bugs para ajudar quando não souberem o que está errado. Programadores usam técnicas diferentes para depurar erros no código. Vocês saberão qual é a melhor ferramenta depois de praticar um pouco. Depurar bugs pode ser a parte que mais consome tempo na programação, então é importante reservar bastante tempo para isso!</p>
<p>Vejam o vídeo a seguir para aprender sobre alguns erros que podem ser encontrados no código e como o App Inventor ajuda a encontrá-los!</p>
<center><iframe src="https://www.youtube.com/embed/IlFAwSj-YsQ" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></center>&nbsp;

<p>Caso tenham perguntas específicas sobre o App Inventor durante o processo de depuração, o Fórum do App Inventor pode ajudar. Entrem <a href="https://groups.google.com/forum/#!forum/mitappinventortest" target = "_blank">aquí</a> e postem sua pergunta. Por mais que a comunidade do App Inventor ajude bastante e responda várias perguntas, pesquisem no fórum primeiro para ver se alguém já perguntou isso antes. Isso economiza tempo.</p>
<h5 id="testdata"><strong>Como usar dados de teste</strong></h5>
<p>Se tiverem muitos dados complicados para usar no aplicativo, é bom usar dados de teste. Dados de teste são conjuntos mais simples de dados que serão usados apenas para testar o aplicativo.</p>
<p>Por exemplo, digamos que estão desenvolvendo um aplicativo que mostra ao usuário qual é o restaurante mais próximo. Vocês provavelmente devem usar fusion tables para armazenar os nomes dos restaurantes, os dados de local e os números de telefone. Para começar o desenvolvimento do aplicativo, não é necessário ter uma lista inteira de restaurantes nas fusion tables. Um ou dois restaurantes de teste são o necessário para fazer o aplicativo funcionar antes de inserir dados reais.</p>
<div style="background-color: #421b41; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<blockquote>
	<p style="text-align: center">"É bastante difícil encontrar um erro no código quando você sabe que tem algo errado; é ainda mais difícil encontrar quando você assume que seu código não tem erros. "</p>
	</blockquote>

	<p style="text-align: right">Steve McConnell, especialista em engenharia de software e autor</p>
</div>	
<h5 id="notifer">Como usar o Notifier</h5>
<p>Digamos que seu aplicativo está travando e vocês não sabem o porquê! Vocês podem usar o Notifier para apontar onde o código está com erro. Para configurar um Notifier no aplicativo, arraste-o da paleta de interface do usuário. Ele aparecerá como um componente invisível, assim:</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image00-1.png" alt="image00" width="289" height="120" /></a>

<p>Vocês podem usar esses alertas para saber quando o aplicativo travar. Digamos que estejam usando uma estrutura If para realizar um procedimento no aplicativo. Ao selecionar a opção "Option1" no menu "Spinner", vocês esperam que o procedimento "Procedure1" aconteça. No entanto, ao testar o aplicativo, nada acontece! Seu código se parece com isso:</p>

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image17.png" alt="image17" width="635" height="285" />
<p>Vocês não sabem se o problema está no Procedure1 ou na estrutura condicional que configuraram. O problema também pode estar nos elementos do "Spinner"! Há muitas coisas para verificar, então o Notifier ajuda a diminuir o número de opções para ajudar a descobrir onde está o erro. Vocês adicionam um alerta para cada parte da estrutura condicional assim:</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image19.png" alt="image19" width="662" height="452" />

<p>Ao testar o aplicativo, vocês agora recebem um alerta que diz "O aplicativo não está fazendo nada!" ("This app isn't doing anything!") Agora, vocês sabem que o problema é a estrutura condicional, não o procedimento "Procedure1". A estrutura condicional está executando o código da seção Else ao invés da If. Agora, vocês podem verificar a estrutura para ver se há erros de digitação ou se há erros com os elementos do menu "Spinner".</p>
<p>Se vocês testaram o aplicativo e receberam um alerta falando "This app is doing option1" ("Este aplicativo está fazendo opção1"), então a estrutura condicional estaria funcionando e o erro estaria no procedimento "Procedure1", que não está fazendo o que deveria. Portanto vocês podem buscar o erro no Procedure1. Outros cenários em que esse método pode ser útil:</p>
<ul>
	<li style="font-weight: 400">Resolver problemas com loops que estão travando
	<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/ForLoop.png" alt="forloop" width="395" height="160" /></li>
</ul>
<ul>
	<li style="font-weight: 400">Testar se uma tela está carregando ou travando<br />
	<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/ScreenInitalize.png" alt="screeninitalize" width="355" height="111" /></li>
</ul>
<h5 id="collapse"><strong>Como minimizar e desabilitar blocos</strong></h5>
<p>É útil saber minimizar e desabilitar blocos que não estiverem sendo usados. Se clicarem com o botão direito em um dos blocos do App Inventor, ele dará a opção de fechar ou desabilitar um bloco:</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image11.png" alt="image11" width="442" height="216" />

<p>Minimizar o bloco faz com que ele diminua para o tamanho de uma barra na tela, assim:
	<img class="" src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image16.png" alt="image16" width="236" height="40" /></p>
<p>Isso pode ajudar quando tiver muito código na tela e não precisarem ver as partes em que não estão trabalhando. Para expandir o bloco novamente, é só clicar com o botão direito novamente.</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image04.png" alt="image04" width="397" height="178" />
<p>Também é possível desabilitar blocos. Isso ainda os mantêm na tela, mas impede que façam coisas. Pode ser útil fazer isso quando quiser testar seu aplicativo sem um pedaço de código que não está funcionando. Isso também pode ser feito para quando tiver um bloco Notifier para testes, mas ainda não querem deletá-lo. Blocos desabilitados ficam assim:</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image18.png" alt="image18" width="415" height="143" />
<p>Para habilitá-los novamente, cliquem com o botão direito e depois em "Enable Block" (Habilitar bloco).</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image12-1.png" alt="image12" width="433" height="200" />

<h5 id="comments"><strong>Comentários</strong></h5>
<p>Bons programadores deixam comentários no código para explicar o que cada parte faz. Comentários ajudam quando outras pessoas virem o código, como colegas de equipe, mentores e juízes. Eles também podem ajudar se voltar ao código depois de um tempo e tiver se esquecido do que cada parte faz. Para adicionar um comentário no App Inventor, cliquem com o botão direito nos blocos e selecionem "add comment" (adicionar comentário):</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image11.png" alt="image11" width="387" height="189" />
<p>Depois disso, um ponto de interrogação azul aparecerá no canto do bloco para adicionar texto. Vocês podem ver o comentário clicando no ponto de interrogação.</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image14.png" alt="image14" width="423" height="226" />

<div style="background-color: #421b41; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<blockquote>
	
	<p style="text-align: center">"Ao aprender a criar tecnologia, garotas aprender a falar mais por elas mesmas".</p>
	</blockquote>
	<p style="text-align: right">–Regina Agyare, Fundadora da Soronko Solutions</p>
</div>	

<h3 id="version">Controle de versões</h3>
<p>Digamos que uma parte do seu aplicativo está pronta e funcionando. Ao desenvolver e testar uma segunda parte do aplicativo, tudo parou de funcionar, até mesmo a parte que funcionava antes! Vocês tentam deletar os blocos adicionados, mas o aplicativo ainda não funciona! Agora vocês não têm certeza do que houve e queriam ter um botão "desfazer".</p>
<p>Para evitar cenários como esse, pode ser útil criar versões diferentes do aplicativo.  Versões diferentes salvam o código exatamente como está para, caso aconteça algum erros que vocês não saibam resolver, vocês possam voltar para a última versão salva. Vocês também podem usar o controle de versões se estiverem experimentando recursos novos que não têm certeza que manterão no aplicativo. Há duas maneiras de salvar versões no App Inventor, "save as" ("salvar como") e "checkpoint".</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image13.png" alt="save as" width="452" height="316" />
<p>A opção "save project as" ("salvar projeto como") permite criar uma cópia do código e salvá-lo com um nome novo.</p>
<p>Digamos que o projeto em que estão trabalhando se chama "test". Vocês podem salvar o projeto em que estão trabalhando como "test_version2" e continuar adicionando código a ele. Se errarem algo, podem voltar para o projeto chamado "test".</p>
<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/image09.png" alt="checkpoint" width="1000" height="700" />

<p>A opção "chekpoint" permite salvar o código como está, sob outro nome.</p>
<p>Digamos que o projeto em que estão trabalhando se chama "test". A opção "checkpoint" salvará o código como "test_checkpoint1". Vocês podem continuar o trabalho e, se algo estragar, vocês podem voltar para o "test_checkpoint1".</p>
<p>Vejam este vídeo para saber mais sobre como salvar versões no App Inventor.</p>
<center>
<iframe src="https://www.youtube.com/embed/HNM5Mxf7eZU" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></center>

<div style="background-color: #006667; color: white; padding: 25px; margin-top: 25px; margin-bottom: 25px;">
	<h1 id="reflect" style="color: white;"><strong>Reflexão</strong></h1>
	<p>Parabéns! Vocês estão próximas de terminar o desenvolvimento do aplicativo para ser enviado para o Technovation. Estamos animados por vocês chegarem aqui e sabemos que sua equipe trabalhou muito.</p>
	<p>Se essa for a primeira vez que programaram um aplicativo ou usaram código, vocês sem dúvida aprenderam bastante e superaram muitas dificuldades. Algumas equipes ainda superaram barreiras linguísticas e limitações de recursos, o que dificulta muito qualquer coisa.</p>
	<p>Estamos orgulhosos de vocês e esperamos que também tenham ficado orgulhosas de vocês mesmas. Vocês persistiram, trabalharam duro e aprenderam muito umas com as outras. Vocês são uma inspiração para nós e muitas outras pessoas.</p>
	<h3 style="color: white;"><strong>Recursos adicionais</strong></h3>
	<ul>
		<li style="font-weight: 400"><a style="color: #eae46f;" href="http://ai2.appinventor.mit.edu/reference/other/testing.html" target="_blank" rel="noopener">●	Documentação de testagem do MIT</a>*</li>
		<li style="font-weight: 400">Outro vídeo para ajudar com a depuração de erros: <a style="color: #eae46f;" href="https://www.youtube.com/watch?v=itCnknI5PlY" target="_blank" rel="noopener">Vídeo de depuração</a>*</li>
	</ul>
	
</div>
