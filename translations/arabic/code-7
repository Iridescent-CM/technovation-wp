كود 7
تصحيح أخطاء التطبيق الخاص بك
Debugging Tips
Using Test Data
Using the Notifer
Collapsing and Disabling Blocks
Adding Comments
Version Control
Reflect
أهداف التعليم:
في هذه الوحدة، سوف تتعلمين...

نصائح لتصحيح الأخطاء البرمجية الخاصة بك
نصائح تصحيح الأخطاء
لقد أخذتي أفكارك وقمتي بترجمتها الى كود(تعليمات برمجية). ولكنكِ قد واجهتِ أخطاء. أخ!

نحن نعتمد كثيرا على البرمجيات بحيث أننا لا يمكن أن نتخيل حياتنا بدونها بعد الآن. من عدة نواحي، البرمجيات جعلت حياتنا أسهل: نحن نكتب الايميلات, ندردش مع الأصدقاء على الفيسبوك, نلعب الألعاب ونبحث عن المعلومات على جوجل. البرمجيات هي فقط في كل مكان فنحن حتى لا ندرك أننا نستخدمها, مثلا في السيارات, إشارات المرور, أجهزة التلفاز, الغسالات, والوسائل السمعية. نحن اعتدنا على وجود البرمجيات التي نتوقع منها أن تعمل دائما!

اذا لماذا هي ليست كذلك؟ لماذا نحصل على الأخطاء من البداية؟ كما تبين, كتابة البرمجيات ليست دائما أمرا سهلا. البرمجيات ليست منتج صلب, لذلك نحن لا نستطيع أن ننظر اليه لنرى ان كان صحيحا.

تصحيح الأخطاء هو اسم العملية التي يستخدمها المبرمجون لاكتشاف السبب في كون الكود الخاص بهم لا يعمل. عندما تقوم بعمل تحديات الكود, قد تكون قد واجهت بالفعل أمرا أجبرك على العودة الى الكود ومعرفة أين خطؤك. هذا هو جوهر التصحيح والقسم التالي سوف يقدم لك نصائح لجعل عملية التصحيح أسهل لك.

أحيانا قد تكوني بالفعل تعلمين كيف تبرمجين شيئا ولكن لا يزال يأخذ الكثير من الوقت للقيام بذلك! حتى المبرمجين العظيمين قد يقومو بالأخطاء, حتى عندما يكونو يعلمون ماذا يفعلون بالضبط, لذلك من المهم بناء مجموعة أدوات من تقنيات التصحيح التي يمكن أن تساعدك على الخروج بحل عندما لا تكوني متأكدة أين الخطأ. كل مبرمج لديه طريقة مختلفة في تصحيح الأخطاء وستعلمين طريقتك الخاصة بعد التدريب قليلا. تصحيح الأخطاء قد يكون أكثر جزء مستهلك للوقت من البرمجة, لذلك من المهم حقا ترك الكثير من الوقت لذلك.

تفحصي هذا الفيديو لتتعلمي عن بعض الأخطاء التي يمكن أن تواجهيها في الكود وكيف App Inventor يساعد في تحديدها




اذا كان لديك أسئلة خاصة ب App Inventor أثناء تصحيح الأخطاء, يوجد منتدى App Inventor يمكنك الانضمام هنا, ثم انشري سؤالك. بالرغم من أن مجتمع App Inventor الكبير هو بالعادة مفيد جدا ولديه استجابة للأسئلة, حاولي البحث في المنتدى لتري ان كان سؤالك موجود بالفعل وتمت الإجابة عليه. هذا سيوفر وقتك.

استخدام بيانات الاختبار
اذا كان لديك الكثير من البيانات المعقدة حقا لاستخدامها في تطبيقك سيكون من المفيد استعمال بيانات الاختبار.بيانات الاختبار هو مجموعة أبسط من البيانات التي ستقومين فقط باستخدامها لتتأكدي من أن تطبيقك يعمل بشكل صحيح..

كمثال, لنقل بأنك تنشئين تطبيق يظهر للمستخدم أين توجد أقرب المطاعم له. تريدين استعمال جداول الانصهار(fusion) لتخزين أسماء المطاعم, معلومات الموقع, أرقام الهواتف. للبدء ببناء تطبيقك, لست بحاجة لقائمة كاملة متكاملة من المطاعم جاهزة في جداول الانصهار لبدء برمجة تطبيقك. يمكنك فقط أن تستخدمي واحد أو اثنان من المطاعم كاختبار وجعل تطبيقك يعمل قبل ادخال المعلومات الحقيقية.

"انه من الصعب كفاية ايجاد خطأ في كودك عندما تكون تبحث عنه, وهو أصعب أكثر عندما تفترض أن كودك خالي من الأخطاء"



- Steve McConnell, خبير هندسة برمجيات ومؤلف

استخدام منبه
لنقل بأن تطبيقك عالق ولست متأكدة من السبب! يمكنك استعمال المنبه ليحدد بدقة أين الكود معطوب. لوضع منبه في تطبيقك اسحبه من لوحة واجهة المستخدم. سوف يظهر كمكون غير مرئي مثل هذا:



ثم يمكنك استعمال هذه المنبهات لاخبارك اين تطبيقك عالق. مثلا, لنقل بأنك تستخدمين جمل if في تطبيقك لتنفيذ إجراء. عندما تختارين Option 1 من السبنر تتوقعين حدوثProcedure1 على كل حال, عندما تختبرين تطبيقك لا شيء يحدث! تطبيقك سيبدو كذالك:



أنتي لست متأكدة ان كانت المشكلة من Procedure1, أو اذا كانت من الجمل الشرطية التي قمت بإنشائها. مشكلتك يمكن أن تكون من العناصر الموجودة في السبنر! يوجد الكثير من الأشياء لفحصها لذلك استخدام المنبه يمكن أن يساعدك على تضييق احتمالاتك ومعرفة أين هو خطؤك. تضيفين منبه لكل جزء من جملك الشرطية بهذه الطريقة:



عندما تفحصين تطبيقك الآن تحصلين على رسالة تنبيه تقول " هذا التطبيق لا يفعل شيئا!" الآن أنت تعلمين أن المشكلة من الجمل الشرطية, وليس من Procedure1. الجمل الشرطية تقوم بتنفيذ الكود الموجود في جزء ال else بدلا من الجزء if . الآن يمكنك فحص جملك الشرطية لتري ان كان يوجد أي أخطاء طباعية أو ان كان هناك خطأ بالعناصر في سبنر الخاص بك.

اذا قمت باختبار تطبيقك وحصلت على رسالة تنبيه تقول " هذا التطبيق ينفذ option1" بالتالي سوف تعلمين أن الجمل الشرطية تعمل بشكل صحيح ويوجد خطأ في Procedure1 ولا تعمل ما يفترض بها أن تعمل. هنا يمكنك أن تفحصي الكود في Procedure1 not doing what it is supposed to. You could then check the code in Procedure1. هنا بعض السيناريوهات الأخرى التي يمكن لهذه الطريقة من الفحص أن تكون مفيدة:

To resolve problems with a loop getting stuck

لفحص ان كانت الشاشة تحمل أو عالقة



انهيار وتعطيل الكتل
هناك أمران يمكن أن يساعداك وهما تعطيل وانهيار الكتل التي لا تقومين باستعمالها. اذا قمت بالضغط بزر الفارة الايمن على block App Inventor سيعطيكي خيار to collapse or disable a block لتعطيل وانهيار الكتلة



انهيار الكتلة سوف يضغطها الى شريط واحد على شاشتك بهذا الشكل:

هذا يمكن أن يكون مساعدا عندما يكون لديك الكثير من الكود على شاشتك ولست بحاجة لرؤية مجموعات معينة منها والتي لا تعملين عليها. لتوسيع الكتلة مرة أخرى تحتاجين للضغط عليها بزر الفأرة الأيمن.



يمكنك أيضا تعطيل الكتل. هذا سيبقيهن على الشاشة ولكنه يمنعهن من فعل أي شيء. هذا يمكن أن يكون مفيدا جدا عندما يكون لديك جزء من الكود لا يعمل وتريدين تجريب تطبيقك من دونه. ويمكنك أيضا فعل ذلك اذا كان لديك كتلة للتنبيه وكنت تستعمليها لأهداف الفحص فقط ولا تريدين حاليا حذفها. تعطيل الكتل يبدو كذلك:



لتفعيل الكتلة مرة أخرى بالضغط عليها بالزر الايمن للفأرة, اختيار تغعيل الكتلة "enable block" .



التعليقات
المبرمجون الجيدون بالعادة يتركون تعليقات على الكود لشرح ماذا يفعل. التعليقات يمكن أن تكون مفيدة عندما ينظر أشخاص آخرون للكود الخاص بك, مثلا أعضاء الفريق, الموجهون, والحكام. التعليقات تساعدك أيضا عند عودتك للكود فيما بعد وقد نسيتي ماذا تفعل بعض الأجزاء منه. لاضافة تعليق في App Inventor اضغطي بالزر الايمن على الكتلة واختاري "add comment" اضافة تعليق.



بعد ذلك علامة سؤال زرقاء سوف تظهر في زاوية الكتلة ويمكنك اضافة نص. يمكنك اظهار التعليق بالضغط على علامة السؤال.



"من خلال تعلم خلق التكنولوجيا, الفتيات يتعلمن التحدث"



- Regina Agyare, مؤوسسة Soronko Solutions.

التحكم بالنسخ
لنقل أنه لديك جزء من التطبيق قمت ببناءه ويعمل بشكل صحيح. عندما تنشئين وتفحصين الجزء الثاني من تطبيقك, كل شيء يتوقف عن العمل بما في ذلك الجزء الذي كان يعمل من قبل! تحاولين أن تحذفي الأجزاء التي قمت باضافتها ولكن كل التطبيق ما زال لا يعمل! والآن أنت لست متأكدة ما الخطأ وتتمنين لو كان هناك زر للتراجع.

لمنع مثل هذه السيناريوهات سيكون من المفيد انشاء مجموعة نسخ مختلفة من تطبيقك. هذه النسخ المختلفة ستحفط كودك تماما كما هو وبالتالي اذا قمت بأي خطأ فيما بعد ولا تعلمين كيف تصلحينه, يمكنك العودة لآخر نسخة من العمل قمت بحفظها. يمكنك أيضا استعمال التحكم بالنسخ اذا كنت تجربين المميزات لتطبيقك ولست متأكدة ان كنت تريدين الاحتفاظ بها. هاتان طريقاتان لحفظ نسخ مختلفة في App Inventor , استخدام "save as" و "checkpoint".



خيار “save project as” يسمح لك بإنشاء نسخة من الكود الذي تعملين عليه وحفظه تحت اسم آخر.

مثلا لنقل بأن المشروع الذي تعملين عليه يسمى “test”. يمكنك حفظ المشروع الذي تعملين عليه ك “test_version2” والاستمرار بإضافة الكود إليه. اذا أخطأت في أمر يمكنك العودة لمشروعك المسمى “test” .



The “checkpoint” option lets you save your code as it is under a new name.

خيار “checkpoint” يسمح لك بتخزين الكود كما هو تحت اسم جديد.
مثلا لنقل أن المشروع الذي تعملين عليه اسمه “test” . Checkpoint سوف يحفظ كودك الحالي كمشروع يسمى “test_checkpoint1” . ثم يمكنك الاستمرار بالعمل واذا أخطأت في أمر يمكنك العودة الى المشروع المسمى “test_checkpoint1” .

شاهدي هذا الفيديو لتتعلمي أكثر عن حفظ النسخ في App Inventor.



إنعكاس
تهانينا ! أنت تقريبا انتهيتي من بناء تطبيق جاهز لتسجيل الدخول ل Technovation. نحن متحمسون لوصولك لهذه المرحلة, ونعلم أنه كان جهدا كبيرا لفريقك.

اذا كانت هذه هي المرة الأولى التي تبنين فيها تطبيقا أو تستخدمين الكود, فأنت بلا شك قد تعلمت الكثير وتغلبت على الاحباط. بل إن بعض الفرق تغلبت على حواجز اللغة و القيود المفروضة على الموارد والتي تجعل من البداية صعبة جدا.

نحن فخورون بك, ونتمنى أنك فخورة بنفسك أيضا. لقد ثابرت, عملت جاهدة, وتعلمت من بعضكم البعض. أنت إلهام لنا, وأكثر.

مصادر إضافية
MIT Testing Documentation
هنا يوجد فيديو آخر يمكن أن يساعدك في تصحيح الأخطاء:: Debugging Video
