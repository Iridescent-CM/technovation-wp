<h1>الكود 6</h1>
<h2>التخطيط للكود الخاص بك</h2>
<ul>
 	<li><a href="#pseudo">Pseudocode</a></li>
 	<li><a href="#activity1">Activity</a></li>
 	<li><a href="#flow">Flowcharts</a></li>
 	<li><a href="#activity2">Activity</a></li>
 	<li><a href="#pair">Pair Programming</a></li>
 	<li><a href="#time">Time Management</a></li>
 	<li><a href="#reflect">Reflect</a></li>
</ul>
<h3>الأهداف التعليمية:</h3>
في هذه الوحده سوف تتعلمين
<ul>
 	<li style="font-weight: 400">كيف تخططين كيف تكتبين الكود</li>
 	<li style="font-weight: 400">طرق لتنظيم وإدارة مشروعك و هيكلة وقتك</li>
</ul>
<h3><b>التخطيط للكود الخاص بك</b></h3>
في<a href="/?p=21817" target="_blank"> البرمجة 5</a> خططتِ كيف سيبدو تطبيقكِ وكيف سيتعامل المستخدمين معه، في هذا القسم سوف تتعلمين طريقتين لمساعدتكِ في التخطيط على كتابة الكود الخاص بك والتفكير حول كيفية عمل تطبيقكِ فعلياً. من المهم جداً التخطيط لكتابه الكود حتى تتيحي لنفسك الفرصة لاكتشاف ما اذا كنتِ بحاجه لتعلّم شيء ما أنتِ لا تعلمين عنه شيئا، أو اذا استجدّ عليكِ شيء لأول مرة ولكي تتيحي لنفسكِ أيضاَ فرصه أخذ فكرة عن الأشياء وكيفية عملها قبل أن تصلي لجهاز الكمبيوتر.
<h5>شبيه-الكود (سودو كود)</h5>
يعتبر كتابة <b>السودو كود </b>جزء مهم من عملية التخطيط للتطبيق. يستخدم السودوكود لغة بسيطة مع بعض التعليمات البرمجية مجتمعةً معاً لتوضيح عمل التطبيق. يجب عليكِ استخدام مصطلحات البرمجة التي تعرفينها، مثل حلقات التكرار (Loops) أو الجمل الشرطية (Conditions)، وأي جزء قد تستخدمينه من مكونات (App Inventor) مثل قائمة العرض (ListView) أو اللأزرار (Buttons) . لا توجد قواعد كثيرة لكيفية كتابة سودوكود ولكن الهدف هو الحصول على فكرة عن كيفية عمل التطبيق الخاص بكِ قبل أن تبرمجيه.

لنأخذ نظرة على المثال من <a href="/?p=21138" target="_blank">البرمجة 3 </a>. في هذا التطبيق، يمكن للمستخدم البحث في قاعدة البيانات عن العالمات النساء. يعرض التطبيق الأسماء في قائمة عرض (ListView) ويمكن للمستخدم اختيار عالمة لمعرفة المزيد عنها.

<i>زر البحث</i>
<ul>
 	<li style="font-weight: 400">عندما يضغط المستخدم على زر البحث</li>
 	<li style="font-weight: 400">التطبيق يستخدم حلقة اللوب <strong>(for loop)</strong> ليبحث خلال كل الأسماء والوصف الخاص بها المخزنة في قاعدة البيانات <b>TinyDB</b></li>
 	<li style="font-weight: 400">إذا <b>(if)</b> ) كان هنالك تطابق
<ul>
 	<li style="font-weight: 400">التطبيق سيضيف اسم العالمة كمتغير للقائمة الفارغة التي تُدعى نتائج البحث <i>(searchResults)</i></li>
</ul>
</li>
 	<li style="font-weight: 400">إذا <b>(If) </b>كانت قائمة نتائج البحث <em>(SearchResults)</em> خالية بعد انتهاء حلقه التكرار (for Loop)
<ul>
 	<li style="font-weight: 400">سيُشعر التطبيق المستخدم بانه لا يوجد تطابق مع نتيجه البحث</li>
</ul>
</li>
 	<li><b>عدا عن ذلك (Else)</b>
<ul>
 	<li>سيعرض التطبيق نتائج البحث <em>(SearchResults)</em> في قائمة العرض<strong>(ListView)</strong></li>
</ul>
</li>
</ul>
<i>اختيار العلماء</i>
<ul>
 	<li style="font-weight: 400">عندما يقوم المستخدم بإجراء اختيار من <b>ListView1</b></li>
 	<li style="font-weight: 400">التطبيق سيفتح شاشه <i>Screen2</i></li>
 	<li style="font-weight: 400">التطبيق يطلب ويسترد وصف واسم العالمة من قاعده البيانات  <b>TinyDB</b></li>
 	<li style="font-weight: 400">يعرض التطبيق وصف واسم العالمة</li>
</ul>
<h3>نشاط</h3>
كتابة سودوكود لمعالجين الحدث (Event Handlers) في التطبيق الخاص بك. إذا كنتِ تواجهين مشكلة في تقسيم كيفية عمل معالج الأحداث (Event Handlers) في تطبيقك، فقد تحتاجين إلى سؤال زملائك في الفريق أو المشرفة للحصول على المساعدة!

إسالس نفسكِ التالي :
<ul>
 	<li style="font-weight: 400">ما هو الحدث الذي يبدأ هذا الكود؟</li>
 	<li style="font-weight: 400">هل يحتاج تطبيقكِ إلى استخدام أي قيم مخزنة؟
<ul>
 	<li style="font-weight: 400">إذا كان الأمر كذلك، أين سيتم تخزين القيم؟</li>
</ul>
</li>
 	<li style="font-weight: 400">هل يحتاج تطبيقكِ إلى استخدام أي متغيرات؟ إذا كان الأمر كذلك، امنحيهم أسماء يسهل تتبعها والرجوع اليها لاحقا.</li>
</ul>
<h3><b>
الرسوم أو المخططات البيانية</b></h3>
<b>المخطط الانسيابي </b>هو مخطط يُمثل خوارزمية. ويستخدم الأشكال الهندسية والأسهم لإظهار كيفية تنقل البيانات خلال البرنامج. وتتم القراءة دائما من أعلى إلى أسفل. يستخدم المبرمجون أشكالا مختلفة لتمثيل أشياء مختلفة يمكن أن تحدث للبيانات. هنا مثال على خوارزمية لمعرفة سبب آلآم معدة شخص ما:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-1.png" alt="flowchart-1" width="426" height="434" />

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/terminal.png" alt="terminal" width="139" height="41" />
<p style="text-align: left"><b>الشكل البيضاوي </b> يظهر حيث تبدأ الخوارزمية وتنتهي كما في المثال أعلاه، هناك ثلاثة أماكن مختلفة حيث قد تنتهي الخوارزمية، إما أن الشخص يحتاج إلى أكل شيء، فإنها تحتاج إلى الراحة، أو أنهم بحاجة إلى رؤية الطبيب وتسمى هذه المحطات<b>.</b></p>
<p style="text-align: center"><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision.png" alt="decision" width="139" height="76" /></p>
<p style="text-align: left"><b>الشكل الماسي </b>يظهر حيث يجب اتخاذ <strong>قرار</strong>. "كمفترق طرق" على سيبيل المثال . ويظهر هذا كلما صادفتِ جملة شرطية تحتاج إلى قرار إذا ما كانت جملة صحيحة أو خاطئة. ومن توابع هذا القرار ينتج سهمان، واحد للنتيجة الصحيحة<strong>(True)</strong> والاخر <strong>(False)</strong> للنتيحة الخاطئة. لاحظي كيف تخرج الأسهم من الشكل في المثال أعلاه، أحدهما يخرج من الاسفل والاخر يخرج من الجانب.</p>
في ما يلي مثال آخر على الرسم او المخطط البياني:

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-2-1.png" alt="flowchart-2" width="124" height="281" />

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process.png" alt="process" width="139" height="41" />

يستخدم هذا المخطط <strong>المستطيل</strong>، والذي يمثل العمليات. <strong>العملية </strong>هي كل ما يقوم الكود الذي كتبتِه بعمله. يمكن أن يكون تنبيه المستخدم، أو وضع label لتوضيح أو قول شيء ما أو إضافة رقمين معا.

يُظهر هذا المخطط البياني حلقة <strong>while loop</strong>. الجملة الشرطية والعملية (في هذه الحالة، الوصول إلى مُدخل) ستتكرر حتى يتم استيفاء الشرط. هناك نوع آخر من حلقات التكرار تعلمتها في <a href="http://www.technovationchallenge.org/curriculum/code-3/" target="_blank">البرمجة 3</a> ألا وهي الفور لوب الشرط في الحلقة هو التحقق مما إذا كان العداد قد وصل إلى درجة عالية بما فيه الكفاية حتى الآن، وبالتالي فإن العملية ستتكرر عدد محدد من المرات حتى يتم استيفاء الشرط.

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/flowchart-3-1.png" alt="flowchart-3" width="424" height="314" />

<img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/input-1.png" alt="input" width="145" height="41" />

الشكل الأخير الذي يجب أن تكوني على علم به هو <strong>متوازي الأضلاع</strong>. يجب عليكِ استخدام هذا الشكل كلما احتجتِ إلى الحصول على بيانات من مستخدم أو من مكان آخر، مثل موقع ويب. متوازي الأضلاع هو <strong>للمدخلات</strong>.
<h3>نشاط</h3>
في هذا النشاط سوف تحول السودوكود الخاص بك إلى مخطط انسيابي. استخدمي السودوكود الذي قمتِ به في النشاط أعلاه واتبعي الخطوات التالية.
<ol>
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-16outline.png" alt="terminal oval" width="112" height="36" />
1 ضع الشكل البيضاوي حول بداية ونهاية معالج الحدث (event handler) الخاص بكِ. وهذا ما يسمى بالمحطة النهائية(Terminals). غالبا في الرسم البياني يكون هنالك اكثر من نهاية واحدة. في مثال زر البحث أعلاه، ينتهي معالج الحدث (event handler) إما بعرض نتائج البحث في قائمة عرض<strong>(ListView)</strong> أو بإخطار المستخدم بأنه لا توجد تطابق.</li>
</ol>
<ol start="2">
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/decision_1outline.png" alt="conditional diamond" width="112" height="36" />
وضع الشكل الماسي في المكان الذي يجب اتخاذ قرار عنده. تحدث هذه الحالة في كل مرة يقرر التطبيق اتخاذ قرار لجملة شرطية بنتيجه صحيحة او خاطئة (True or False). تذكري، يمكن أن تؤدي الجمل الشرطية إلى أكثر من احتمالية واحدة للنهاية</li>
</ol>
<ol start="3">
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/Artboard-28outline.png" alt="input" width="112" height="36" />
إضافة متوازي الأضلاع حول جميع المدخلات في التعليمات البرمجية الخاصة بك أو من الأماكن التي تحصل فيها على البيانات من المستخدم أومن اي مكان آخر، مثل موقع ويب أو قاعدة بيانات محلية.</li>
</ol>
<ol start="5">
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/process_1outline.png" width="112" height="36" />
وضع مستطيل حول كافة العمليات في الكود الخاص بك. وهذه الحالة تنطبق على تطبيقك في كل مرة يقوم التطبيق بعملية لا تندرج تحت اي فئة من الفئات المذكورة أعلاه. يمكن أن تكون هذه العملية كإضافة عناصر إلى قائمة أو إرسال تنبيه للمستخدم.</li>
 	<li><img src="http://www.technovationchallenge.org/wp-content/uploads/2016/12/arrow_1outline.png" alt="arrow" height="36" />
ربط كل ذلك جنباً إلى جنب مع الأسهم! انتبهي بشكل خاص لكيفية رسم الأسهم للحلقات والجمل الشرطية والرجوع إلى الأمثلة أعلاه إذا احتجتِ إلى مساعدة.</li>
</ol>
التقطي صورة من واحدة من المخططات البيانية الخاصة بك وادرجيه مع الملحق المُقدم لكسب <strong>نقطة</strong> اضافية! لا تقلقي إذا لم تكوني دقيقة بالضبط، والغرض من هذا كله هو للمساعدة في التخطيط وتعلّم شيء جديد! لا بأس إذا كان الكود الخاصة بك لا يتطابق مع المخطط البياني الخاص بكِ بنهاية بناء التطبيق الخاص بكِ، لستِ يحاجة إلى تحديث المخطط البياني الخاص بكِ.
<h3><b>البرمجة الزوجية</b></h3>
البرمجة الزوجية أو الثنائية هي عندما يتشارك مبرمجان في محطة عمل واحده مشتركة بينهما (شاشة واحدة، لوحة المفاتيح وفأرة بين الزوج)، إما العمل معا أو يتناوبون "القيادة" و "التنقل". في هذا السيناريو، الشخص الذي يجلس على لوحة المفاتيح أو الشاشة التي تعمل باللمس هو "السائق" الذي يقود عملية الكتابة، والشخص الآخر هو الملّاح. الملاح عليه أيضا أن يشارك بنشاط في مهمة البرمجة ولكن بتركيز أكثر على الصورة الأكبر، يُجيب على أسئلة "السائق"، ويُبقي عينه على الكود للتحقق من الأخطاء البرمجية. يقوم السائق والملّاح بتبادل الأدوار بين كل فترة وأخرى.

وهنالك ميزات للبرمجة الثنائية أو الزوجية، على سبيل المثال:
<ul>
 	<li style="font-weight: 400">جودة أفضل للكود بحيث يمكن للملّاح أن يتحقق من عمل السائق.</li>
 	<li style="font-weight: 400">تحسين التواصل بين أعضاء الفريق لأن السائق يقدم تعليق مستمر على ما يقوم به (أو البرمجة بصوت عال)، واستطاعة الملّاح على الاستجابة أو السؤال عما يحدث إذا كان السائق ساكناً.</li>
 	<li style="font-weight: 400">ويمكن تشارك المعرفة ونقلها لفريقكِ، وخاصة إذا كان شخص ما من المبتدئين والبعض الآخر أكثر تقدما.</li>
 	<li style="font-weight: 400">ويمكن أن يساعد على جعل العمل الجماعي أكثر كفاءة لأن السائق يستطيع أن يتوجه لإصلاح خلل ما في حين أن الملاح يستطيع أن يُبقي تركيزه على المهمة ويساعد على استعادة التركيز بعد ذلك</li>
</ul>
نصائح للبرمجه الزوجية او الثانية:
<ul>
 	<li style="font-weight: 400">لا تخافوا من القول: "دعونا نحاول فكرتك أولا!" في بعض الأحيان حتى وإن كنتِ السائق، ستحتاجين إلى معرفة متى يجب عليك الاستماع إلى الملاح. بالنهاية الهدف هو استخدام أفضل الأفكار والوصول إليها من خلال التعاون، وتجنب الأخطاء.</li>
 	<li style="font-weight: 400">وفيما يلي <a href="https://www.thoughtworks.com/insights/blog/10-ways-improve-your-pairing-experience" target="_blank">عشرة اقتراحات</a> لتحسين التجربة .</li>
</ul>
<blockquote>
<p style="text-align: center">" لا يكون ذكاء الفرد منا كذكائنا مجتمعين "</p>
</blockquote>
&nbsp;
<p align="right">– كين بلانشارد، مؤلف وخبير الإدارة</p>

<h3>إدارة الوقت:</h3>
في هذه المرحلة قد تتولد لديكِ أسئلة، مثل:
<ul>
 	<li>كيف تعملي بكفاءة لتحقيق هذا الهدف، وتلبية الموعد النهائي؟</li>
 	<li>من الذي سوف يختبر النموذج الرقمي ومتى؟</li>
 	<li>كيف تعلمي متى يكون لديك نموذج رقمي جاهز للتسليم؟</li>
</ul>
من أجل مساعدتكِ في وضع الجزء البرمجي من المشروع الخاص بكِ على المسار الصحيح، دعونا نراجع مراحل عملية تطوير البرمجيات.
<ul>
 	<li>بعد تحديد المستخدمين، واحتياجاتهم، وال MVP الحد الأدنى من صلاحية المنتج (من وحدة<a href="/?p=21817" target="_blank"> البرمجة 5 </a>)</li>
 	<li>تم ربط الإجراءات التي سيتخذها المستخدمون في تطبيقك مع المخطط البياني</li>
 	<li>إنشاء البرنامج</li>
 	<li>تجربة المستخدم، وتحديد الأخطاء</li>
 	<li>يتم إصلاح الاخطاء ويضمن الفريق أن التطبيق خالي من الأخطاء</li>
 	<li>إذا كان التطبيق يعمل دون أي عيوب على جهاز محمول والفريق راضٍ عن النتيجة النهائية، اذا فهو جاهز للنشر.</li>
</ul>
نصائح:
<ul>
 	<li>اعداد جدول
<ul>
 	<li>يمكنكِ إنشاء مخطط Gantt لمساعدتك على إنشاء جدول زمني لتحديد متى يجب القيام ببعض الاشياء، ومعرفة ما إذا كان هناك شيء يعتمد على شيء آخر من الممكن أن يحدث. هنا مثال على كيفية استخدام مخطط Gantt لتطوير البرمجيات من <a href="http://www.dreamincode.net/forums/topic/60048-creating-a-gantt-chart/" target="_blank">dreamincode</a>.</li>
 	<li>تعيين المهام لأعضاء الفريق، وتحديد المواعيد النهائية و تنبيهات الأهداف المرجوة على التقويمات الخاصة بك!</li>
 	<li>إذا كنتِ تستخدمين المنهج الدراسي لمدة 20 أسبوعا، يجب على فريقك أن يمنح نفسه حوالي 8 أسابيع لبرمجة التطبيق الخاص بكم</li>
 	<li>إذا كنتي تستخدمين المنهج الدراسي لمدة 12 أسبوعا، يجب على فريقك أن يمنح نفسه حوالي 5 أسابيع لبرمجة التطبيق الخاص بكم</li>
 	<li>تأكدي من أن النموذج الرقمي (prototype) النموذج الأساسي الخاص بكم قد تم انجازه وجاهز للنشر في موعد لا يتجاوز يومين قبل الموعد النهائي للتقدم للتحدي التكنوفيشن، والتي ستكون في 26 أبريل 2017. وهذا سيخفف عنكِ الكثير من التوتر في حالة وجود مشاكل في الاتصال</li>
</ul>
</li>
 	<li>تقسيم المهام وتوزيعها
<ul>
 	<li>اجعلي جميع الفريق يعمل معاً على شكل أزواج ومعالجة المهام المختلفة في وقت واحد. ويمكن لهذا أن يساعد في نقل الجانب البرمجي من الكود بالمشروع بشكل أسرع.</li>
</ul>
</li>
 	<li>تحديد الأولويات
<ul>
 	<li>تأكدي من أن التطبيق الخاص بكِ يعمل بشكل صحيح أولاَ، وبعد ذلك يمكن جعله يبدو أفضل لاحقاُ. تذكري، أنكِ تقدمين نموذجاَ أولياَ، وستكون لجنة التحكيم مهتمة بمعرفة أنه يعمل، احرصي على أن تتم هذه المهمة، وأن يكون سهل الاستخدام. يمكنك استخدام الفيديو التوضيحي وخطة عملك للسماح للجنة التحكيم معرفة ما هي خططك المستقبلية للتطبيق من حيث الميزات الجديدة التي يمكن أن تضاف. الآن يجب عليك التركيز الحد الأدنى لصلاحية المنتج ال MVP.</li>
 	<li>اطلبي من المشرفة مساعدتكِ إذا كنتِ تواجهين صعوبة في تحديد أولويات المهام الخاصة بكِ</li>
</ul>
</li>
 	<li>التركيز
<ul>
 	<li>قومي بإيقاف تشغيل كافة الأجهزة التي لا تستخدميها بشكل فعال أثناء اجتماع فريقكِ أو وقت البرمجة. يمكنكِ أيضا كتم الاشعارات وأي شيء من شأنه أن يشتت انتباهك.</li>
 	<li>تأكدي من الانتهاء من المهمة الحالية قبل الانتقال إلى أخرى. فتعدد المهام عادة لا توفر الوقت. إذا كنتم تعملون على شكل أزواج، فيمكن للملاح ان يساعدك على الاستمرار في التركيز.</li>
</ul>
</li>
</ul>
في ما يلي <a href="http://www.technovationchallenge.org/wp-content/uploads/2017/01/Technical-Checklist-2017.pdf" target="_blank">قائمة التحقق الفنية </a>التي ستستخدمها لجنة التحكيم. يمكنك استخدامها للتحققومن أجل أن تكوني قادرة على شرح المكونات التي استخدمتها في التطبيق الخاص بك وللتأكد على أن تحصلي على أعلى الدرجات الممكنة. هذا الجزء من التحكيم يشير إلى 10 نقاط، وسوف تريد لجنة التحكيم أن ترى أنكِ تستخدمين أشياء مثل: النصوص والأرقام والمتغيرات والقوائم والحلقات والجمل الشرطية وقواعد البيانات، وميزات الهاتف المحمول. يمكنكِ أيضا الحصول على نقاط بتوفير الصور من الرسم البياني الخاص بك، والنموذج الورقي، ولقطات من التطبيق.

انها بالتأكيد فكرة جيدة نوثيق مراحل العمليات الخاصة بكِ وحفظ كل شيء. ستكوني قادرة على الوصول إلى أشياء مثل إصدارات مختلفة من التطبيق الخاص بك، الرسم البياني الخاص بك، أو النموذج الورقي الخاص بك في حالة فقدان أي شيء، وبذلك لا تخسرين الوقت. يمكنكِ أيضا استخدام هذه عند مناقشة العقبات التي قد تواجهكِ لتضحى العقبة أكثر وضوحا لمناقشتها مع المشرف الخاص بك.
<h1>الاستنتاج</h1>
تهانينا! أنتِ في طريقكِ لإنشاء تطبيقك الخاص حيث سيكون جاهزاً للتسليم لTechnovation . اذا وجدتِ نفسكِ عالقة كثير خلال برمجة تطبيقك ألقي نظرة على وحدة البرمجة القادمة التي تحتوي على نصائح عن كيفية ايجاد الاخطاء البرمجية، حظاُ موفقاُ في انشاء نموذجك الرقمي ، ونحن في Technovation متحمسون لانك استطعتِ الوصول الى هذا الحد.
<h3>مصادر إضافية</h3>
<ul>
 	<li style="font-weight: 400"><a href="http://ai2.appinventor.mit.edu/reference/other/testing.html" target="_blank">MIT Testing Documentation</a></li>
</ul>
